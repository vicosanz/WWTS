'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Xml
Imports System.Xml.Serialization
Imports Infoware.Reglas



#Region "Cuarto"
Partial Public Class Cuarto
  Inherits _Database

#Region "Campos variables"
  Private mTrr_codigo As String = String.Empty
  Private mCto_codigo As String = String.Empty
  Private mCto_descripcion As String = String.Empty
  Private mCto_temperatura As Decimal = 0.0
  Private mCto_area As Decimal = 0.0
  Private mCto_escaliente As Boolean = False
#End Region

#Region "Propiedades públicas de la clase"

  <XmlAttribute()> _
  Public Overridable Property Cto_codigo() As String
    Get
      Return Me.mCto_codigo
    End Get
    Set(ByVal value As String)
      If String.IsNullOrWhiteSpace(value) Then
        Throw New ArgumentNullException("Código", "El código no acepta vacio")
      End If
      Me.mCto_codigo = value
    End Set
  End Property

  <XmlAttribute()> _
  Public Overridable Property Cto_descripcion() As String
    Get
      Return Me.mCto_descripcion
    End Get
    Set(ByVal value As String)
      If String.IsNullOrWhiteSpace(value) Then
        Throw New ArgumentNullException("La descripción no acepta vacio")
      End If
      Me.mCto_descripcion = value
    End Set
  End Property

  <XmlAttribute()> _
  Public Overridable Property Cto_temperatura() As Decimal
    Get
      Return Me.mCto_temperatura
    End Get
    Set(ByVal Value As Decimal)
      If Value <= 0 Then
        Throw New ArgumentNullException("La temperatura no puede ser nula")
      End If
      mCto_temperatura = Value
    End Set
  End Property

  <XmlAttribute()> _
  Public Overridable Property Cto_area() As Decimal
    Get
      Return Me.mCto_area
    End Get
    Set(ByVal Value As Decimal)
      If Value <= 0 Then
        Throw New ArgumentNullException("El área no puede ser nula")
      End If
      mCto_area = Value
    End Set
  End Property

  <XmlAttribute()> _
  Public Overridable Property Cto_escaliente() As Boolean
    Get
      Return Me.mcto_escaliente
    End Get
    Set(ByVal Value As Boolean)
      mcto_escaliente = Value
    End Set
  End Property
#End Region

#Region "Constructores de la clase"
  Public Sub New()
    MyBase.New()
  End Sub
#End Region
End Class
#End Region