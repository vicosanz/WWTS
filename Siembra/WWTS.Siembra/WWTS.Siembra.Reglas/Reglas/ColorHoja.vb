'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas


Public Class ColorHoja

#Region "Campos constantes"
  Private Const _Procedimiento As String = "proc_ColorHoja"
#End Region

#Region "Campos variables"
#End Region

#Region "Propiedades públicas de la clase"
#End Region

#Region "Constructores de la clase"
  Private Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    EsNuevo = _nuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Col_codigo As String, ByVal _Nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    If _Col_codigo.Trim = String.Empty Then
      Throw New ArgumentOutOfRangeException("Col_codigo", "El código del país debe ser válido")
    End If

    Me.mCol_codigo = _Col_codigo
    EsNuevo = _Nuevo
    If Not _Nuevo Then
      If Not Me.Recargar Then
        Throw New Exception("El objeto no puede ser cargado")
      End If
    End If
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Col_nombre As String)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    Me.Col_nombre = _Col_nombre
    EsNuevo = True
  End Sub
#End Region

#Region "Implementación de los métodos de persistencia"
  Public Function Recargar() As Boolean
    Dim dsResult As New DataSet
    Dim bResult As Boolean

    With OperadorDatos
      .AgregarParametro("@accion", "C")
      .AgregarParametro("@Col_codigo", Me.mCol_codigo)
      .Procedimiento = _Procedimiento
      bResult = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bResult AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      Me.MapearDataRowaObjeto(dsResult.Tables(0).Rows(0))
      Return True
    Else
      Return False
    End If
  End Function
#End Region

#Region "Métodos internos de la clase"
  Private Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Me.mCol_codigo = CStr(Fila("Col_codigo"))
    Me.mCol_nombre = CStr(Fila("Col_nombre"))
    Me.mCol_orden = CInt(Fila("Col_orden"))
  End Sub

  Public Function Guardar() As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    Dim sAccion As String = String.Empty
    If EsNuevo Then
      sAccion = "I"
    Else
      sAccion = "M"
    End If
    With OperadorDatos
      .AgregarParametro("@accion", sAccion)
      .AgregarParametro("@Col_codigo", Me.mCol_codigo)
      .AgregarParametro("@Col_nombre", Me.mCol_nombre)
      .AgregarParametro("@Col_orden", Me.mCol_orden)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      If bReturn Then
        EsNuevo = False
      End If
      .LimpiarParametros()
    End With
    Return bReturn
  End Function

  Public Function Eliminar() As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    With OperadorDatos
      .AgregarParametro("@accion", "E")
      .AgregarParametro("@Col_codigo", Me.mCol_codigo)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    Return bReturn
  End Function
#End Region

#Region "Métodos compartidos"
  Public Shared Function RetornarColorHojas(ByVal _OperadorDatos As OperadorDatos, Optional ByVal _filtro As String = "") As ColorHojaCollection
    Dim oResult As New ColorHojaCollection
    Dim bReturn As Boolean
    Dim dsResult As New DataSet
    With _OperadorDatos
      .AgregarParametro("@accion", "G")
      If Not _filtro.Trim = String.Empty Then
        .AgregarParametro("@filtro", _filtro)
      End If
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Tables(0).Rows
        Dim _col As New ColorHoja(_OperadorDatos, False)
        _col.MapearDataRowaObjeto(_dr)
        oResult.Add(_col)
      Next
    End If
    Return oResult
  End Function
#End Region
End Class

Public Class ColorHojaCollection
  Inherits System.ComponentModel.BindingList(Of ColorHoja)
  Public Sub New()
  End Sub

End Class
