'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas

Public Class CuracionDetalle

#Region "Campos constantes"
    Private Const _Procedimiento As String = "proc_CuracionDetalle"
#End Region

#Region "Campos variables"
    Private mCuracion As Curacion = Nothing
    Private mHumedadRelativa As HumedadRelativa = Nothing
#End Region

#Region "Propiedades públicas de la clase"
    Public Property Curacion() As Curacion
        Get
            If mCuracion Is Nothing And Not mCur_numero = 0 Then
                mCuracion = New Curacion(OperadorDatos, mCur_numero, False)
            End If
            Return mCuracion
        End Get
        Set(ByVal Value As Curacion)
            If Value Is Nothing Then
                Throw New Exception("No se puede enlazar Curacion")
            End If
            mCuracion = Value
            mCur_numero = Value.Cur_numero
        End Set
    End Property

    Public Property HumedadRelativa() As HumedadRelativa
        Get
            If mHumedadRelativa Is Nothing And Not Curdet_db = 0 And Not Curdet_wb = 0 Then
                Try
                    mHumedadRelativa = New HumedadRelativa(OperadorDatos, Curdet_db, Curdet_wb, False)
                Catch ex As Exception

                End Try
            End If
            Return mHumedadRelativa
        End Get
        Set(ByVal Value As HumedadRelativa)
            If Value Is Nothing Then
                Throw New Exception("No se puede enlazar HumedadRelativa")
            End If
            mHumedadRelativa = Value
            mCurdet_db = Value.HumRel_Dry
            mCurdet_wb = Value.HumRel_Wet
            mCurdet_hr = Value.HumRel_Valor
        End Set
    End Property

    <Infoware.Reportes.CampoReporteAtributo("Fecha", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Fecha, 100, True)>
    Public ReadOnly Property Fecha() As Date
        Get
            Return Curdet_fecha
        End Get
    End Property

    <Infoware.Reportes.CampoReporteAtributo("Día", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 50, True)>
    Public ReadOnly Property Dia() As String
        Get
            Dim _dia As Long = DateDiff(DateInterval.Day, Curacion.Cur_fechaingreso, Curdet_fecha)
            Return $"Día {_dia}"
        End Get
    End Property

    <Infoware.Reportes.CampoReporteAtributo("Hora", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 80, True)>
    Public ReadOnly Property Hora() As String
        Get
            Dim _hora As Integer = Curdet_hora
            Dim _ampm As String = "AM"
            If (_hora >= 12 And _hora < 24) Then
                _ampm = "PM"
            End If
            If (_hora >= 13) Then
                _hora -= 12
            End If

            Return $"{_hora}:00 {_ampm}"
        End Get
    End Property

    <Infoware.Reportes.CampoReporteAtributo("DB", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Numero, 50, True)>
    Public Property DB() As Integer
        Get
            Return Curdet_db
        End Get
        Set(ByVal value As Integer)
            Curdet_db = value
            EsModificado = True
            mHumedadRelativa = Nothing
        End Set
    End Property

    <Infoware.Reportes.CampoReporteAtributo("WB", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Numero, 50, True)>
    Public Property WB() As Integer
        Get
            Return Curdet_wb
        End Get
        Set(ByVal value As Integer)
            Curdet_wb = value
            EsModificado = True
            mHumedadRelativa = Nothing
        End Set
    End Property

    <Infoware.Reportes.CampoReporteAtributo("%HR", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Numero, 50, True)>
    Public ReadOnly Property HR() As Integer
        Get
            Dim _hr As Integer = 0
            If HumedadRelativa IsNot Nothing Then
                _hr = HumedadRelativa.HumRel_Valor
            End If
            mCurdet_hr = _hr
            Return mCurdet_hr
        End Get
    End Property

    <Infoware.Reportes.CampoReporteAtributo("PRE-EST", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Numero, 50, True)>
    Public ReadOnly Property PreEst() As Integer
        Get
            Return Curdet_preest
        End Get
    End Property

    <Infoware.Reportes.CampoReporteAtributo("Reviza", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 150, True)>
    Public Property Reviza() As String
        Get
            Return Curdet_reviza
        End Get
        Set(ByVal value As String)
            Curdet_reviza = value
            EsModificado = True
        End Set
    End Property

    <Infoware.Reportes.CampoReporteAtributo("Observación", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 250, True)>
    Public Property Observacion() As String
        Get
            Return Curdet_observacion
        End Get
        Set(ByVal value As String)
            Curdet_observacion = value
            EsModificado = True
        End Set
    End Property
#End Region

#Region "Constructores de la clase"
    Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _nuevo As Boolean)
        If _OperadorDatos Is Nothing Then
            Throw New InvalidOperationException("El operador de datos es nulo")
        End If

        OperadorDatos = _OperadorDatos
        EsNuevo = _nuevo
    End Sub

    Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Curacion As Curacion, _Curdet_fecha As Date, _Curdet_hora As Integer, ByVal _Nuevo As Boolean)
        If _OperadorDatos Is Nothing Then
            Throw New InvalidOperationException("El operador de datos es nulo")
        End If
        OperadorDatos = _OperadorDatos
        Curacion = _Curacion
        Curdet_fecha = _Curdet_fecha
        Curdet_hora = _Curdet_hora
        EsNuevo = _Nuevo
        If Not _Nuevo Then
            If Not Me.Recargar Then
                Throw New Exception("El objeto no puede ser cargado")
            End If
        End If
    End Sub

    Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Cur_numero As Integer)
        If _OperadorDatos Is Nothing Then
            Throw New InvalidOperationException("El operador de datos es nulo")
        End If

        OperadorDatos = _OperadorDatos
        mCur_numero = _Cur_numero
        EsNuevo = True
    End Sub
#End Region

#Region "Implementación de los métodos de persistencia"
    Public Function Recargar() As Boolean
        Dim dsResult As New DataSet
        Dim bResult As Boolean

        With OperadorDatos
            .AgregarParametro("@accion", "C")
            .AgregarParametro("@Cur_numero", mCur_numero)
            .AgregarParametro("@Curdet_fecha", mCurdet_fecha)
            .AgregarParametro("@curdet_hora", mCurdet_hora)
            .Procedimiento = _Procedimiento
            bResult = .Ejecutar(dsResult)
            .LimpiarParametros()
        End With
        If bResult AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
            Me.MapearDataRowaObjeto(dsResult.Tables(0).Rows(0))
            Return True
        Else
            Return False
        End If
    End Function
#End Region

#Region "Métodos internos de la clase"
    Private Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
        mCur_numero = CInt(Fila("Cur_numero"))
        mCuracion = Nothing
        mCurdet_fecha = CDate(Fila("Curdet_fecha"))
        mCurdet_hora = CInt(Fila("curdet_hora"))
        mCurdet_db = CInt(Fila("curdet_db"))
        mCurdet_wb = CInt(Fila("curdet_wb"))
        mCurdet_hr = CInt(Fila("curdet_hr"))
        mCurdet_observacion = CStr(Fila("curdet_observacion"))
        mCurdet_preest = CInt(Fila("curdet_preest"))
        mCurdet_reviza = CStr(Fila("curdet_reviza"))
    End Sub

    Public Function Guardar() As Boolean
        Dim dsResult As New DataSet
        Dim bReturn As Boolean
        Dim sAccion As String = String.Empty
        If EsNuevo Then
            sAccion = "I"
        Else
            sAccion = "M"
        End If
        With OperadorDatos
            .AgregarParametro("@accion", sAccion)
            .AgregarParametro("@Cur_numero", mCur_numero)
            .AgregarParametro("@Curdet_fecha", mCurdet_fecha)
            .AgregarParametro("@curdet_hora", mCurdet_hora)
            .AgregarParametro("@curdet_db", mCurdet_db)
            .AgregarParametro("@curdet_wb", mCurdet_wb)
            .AgregarParametro("@curdet_hr", mCurdet_hr)
            .AgregarParametro("@curdet_observacion", mCurdet_observacion)
            .AgregarParametro("@curdet_preest", mCurdet_preest)
            .AgregarParametro("@curdet_reviza", mCurdet_reviza)
            .Procedimiento = _Procedimiento
            bReturn = .Ejecutar(dsResult)
            .LimpiarParametros()
            If bReturn Then
                Me.mCurdet_hr = CInt(dsResult.Tables(0).Rows(0)(0))
                If Not OperadorDatos.EstaenTransaccion Then
                    AceptarCambios()
                End If
            End If
        End With
        Return bReturn
    End Function

    Public Overridable Sub AceptarCambios()
        EsNuevo = False
        EsModificado = False
    End Sub

    Public Function Eliminar() As Boolean
        Dim dsResult As New DataSet
        Dim bReturn As Boolean
        With OperadorDatos
            .AgregarParametro("@accion", "E")
            .AgregarParametro("@Cur_numero", mCur_numero)
            .AgregarParametro("@Curdet_fecha", mCurdet_fecha)
            .AgregarParametro("@curdet_hora", mCurdet_hora)
            .Procedimiento = _Procedimiento
            bReturn = .Ejecutar(dsResult)
            .LimpiarParametros()
        End With
        Return bReturn
    End Function
#End Region

#Region "Métodos compartidos"
    Public Shared Function RetornarCuracionDetallesFiltro(ByVal _OperadorDatos As OperadorDatos, _Cur_numero As Integer) As CuracionDetalleCollection
        Dim oResult As New CuracionDetalleCollection
        Dim bReturn As Boolean
        Dim dsResult As New DataSet

        With _OperadorDatos
            .AgregarParametro("@accion", "F")
            .AgregarParametro("@Cur_numero", _Cur_numero)
            .Procedimiento = _Procedimiento
            bReturn = .Ejecutar(dsResult)
            .LimpiarParametros()
        End With
        If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
            For Each _dr As DataRow In dsResult.Tables(0).Rows
                Dim _obj As New CuracionDetalle(_OperadorDatos, False)
                _obj.MapearDataRowaObjeto(_dr)
                oResult.Add(_obj)
            Next
        End If
        Return oResult
    End Function

#End Region
End Class

Public Class CuracionDetalleCollection
    Inherits System.ComponentModel.BindingList(Of CuracionDetalle)
    Public Sub New()
	End Sub

End Class
