'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas

Public Class EnsarteZafadura

#Region "Campos constantes"
  Private Const _Procedimiento As String = "proc_EnsarteZafadura"
#End Region

#Region "Campos variables"
  Private mZafra As ZafraSiembra = Nothing
  Private mLote As LoteTerreno = Nothing
  Private mCorte As Corte = Nothing
  Private mSeccionHorno As SeccionHorno = Nothing
  Private mSemilla As SemillaSiembra = Nothing
  Private mPardetCicloEnsarte As WWTSParametroDet = Nothing
#End Region

#Region "Propiedades públicas de la clase"
  Public Property Zafra() As ZafraSiembra
    Get
      If mZafra Is Nothing And Not mZaf_codigo = String.Empty Then
        mZafra = New ZafraSiembra(OperadorDatos, mZaf_codigo, False)
      End If
      Return mZafra
    End Get
    Set(ByVal Value As ZafraSiembra)
      If Value Is Nothing Then
        Throw New Exception("No se puede enlazar zafra")
      End If
      mZafra = Value
      mZaf_codigo = Value.Zaf_codigo
    End Set
  End Property

  Public Property PardetCicloEnsarte() As WWTSParametroDet
    Get
      If mPardetCicloEnsarte Is Nothing And Pardet_CicloEnsarte > 0 Then
        mPardetCicloEnsarte = New WWTSParametroDet(OperadorDatos, mParame_CicloEnsarte, mPardet_CicloEnsarte)
      End If
      Return mPardetCicloEnsarte
    End Get
    Set(ByVal Value As WWTSParametroDet)
      If Value Is Nothing Then
        Throw New Exception("No se puede enlazar ParametroDet")
      End If
      mPardetCicloEnsarte = Value
      mParame_CicloEnsarte = Value.Parame_Codigo
      mPardet_CicloEnsarte = Value.Pardet_Secuencia
    End Set
  End Property

  Public Property Lote() As LoteTerreno
    Get
      If mLote Is Nothing And Not mLot_codigo = 0 Then
        mLote = New LoteTerreno(OperadorDatos, New Terreno(OperadorDatos, mTrr_codigo, False), mLot_codigo, False)
      End If
      Return mLote
    End Get
    Set(ByVal Value As LoteTerreno)
      If Value Is Nothing Then
        Throw New Exception("No se puede enlazar lote")
      End If
      mLote = Value
      mTrr_codigo = Value.Terreno.Trr_codigo
      mLot_codigo = Value.Lot_codigo
    End Set
  End Property
  Public Property Semilla() As SemillaSiembra
    Get
      If mSemilla Is Nothing And Not mSem_codigo = String.Empty Then
        mSemilla = New SemillaSiembra(OperadorDatos, Me.mSem_codigo, False)
      End If
      Return mSemilla
    End Get
    Set(ByVal Value As SemillaSiembra)
      If Value Is Nothing Then
        Throw New Exception("No se puede enlazar semilla")
      End If
      mSemilla = Value
      mSem_codigo = Value.Sem_codigo
    End Set
  End Property
  Public Property Corte() As Corte
    Get
      If mCorte Is Nothing And Not mCor_codigo = String.Empty Then
        mCorte = New Corte(OperadorDatos, Me.mCor_codigo, False)
      End If
      Return mCorte
    End Get
    Set(ByVal Value As Corte)
      If Value Is Nothing Then
        Throw New ArgumentNullException("No se pudo enlazar Corte")
      End If
      Me.mCorte = Value
      Me.mCor_codigo = Value.Cor_codigo
    End Set
  End Property
  Public Property SeccionHorno() As SeccionHorno
    Get
      If mSeccionHorno Is Nothing And Not mSec_codigo = 0 And Not mHor_codigo = String.Empty Then
        mSeccionHorno = New SeccionHorno(OperadorDatos, New Horno(OperadorDatos, mHor_codigo, False), mSec_codigo, False)
      End If
      Return mSeccionHorno
    End Get
    Set(ByVal Value As SeccionHorno)
      If Value Is Nothing Then
        Throw New ArgumentNullException("No se pudo enlazar Corte")
      End If
      mSeccionHorno = Value
      mHor_codigo = Value.Horno.Hor_codigo
      mSec_codigo = Value.Sec_codigo
    End Set
  End Property
  Public ReadOnly Property Ens_estazafadonat() As Boolean
    Get
      Return mEns_libnatural > 0
    End Get
  End Property
  Public ReadOnly Property Ens_estazafadocand() As Boolean
    Get
      Return mEns_libcandela > 0
    End Get
  End Property
#End Region

#Region "Constructores de la clase"
  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    Dim _configsiembra As New ConfigSiembra(_OperadorDatos)
    Me.Ens_numero = _configsiembra.Cfs_ensarte + 1
    EsNuevo = _nuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _zafra As ZafraSiembra, ByVal _ens_numero As Integer, ByVal _Nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If
    OperadorDatos = _OperadorDatos
    If _zafra Is Nothing Then
      Throw New Exception("No se puede enlazar Zafra")
    End If
    mZaf_codigo = _zafra.Zaf_codigo
    Ens_numero = _ens_numero
    EsNuevo = _Nuevo
    If Not _Nuevo Then
      If Not Me.Recargar Then
        Throw New Exception("El objeto no puede ser cargado")
      End If
    End If
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _ens_numero As Integer)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    mEns_numero = _ens_numero
    EsNuevo = True
  End Sub
#End Region

#Region "Implementación de los métodos de persistencia"
  Public Function Recargar() As Boolean
    Dim dsResult As New DataSet
    Dim bResult As Boolean

    With OperadorDatos
      .AgregarParametro("@accion", "C")
      .AgregarParametro("@Ens_numero", mEns_numero)
      .AgregarParametro("@Zaf_codigo", mZaf_codigo)
      .Procedimiento = _Procedimiento
      bResult = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bResult AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      Me.MapearDataRowaObjeto(dsResult.Tables(0).Rows(0))
      Return True
    Else
      Return False
    End If
  End Function
#End Region

#Region "Métodos internos de la clase"
  Private Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    mEns_numero = CInt(Fila("Ens_numero"))
    mZafra = Nothing
    mZaf_codigo = CStr(Fila("Zaf_codigo"))
    mPardetCicloEnsarte = Nothing
    mParame_CicloEnsarte = CInt(Fila("Parame_CicloEnsarte"))
    mPardet_CicloEnsarte = CInt(Fila("Pardet_CicloEnsarte"))
    mLote = Nothing
    mTrr_codigo = CStr(Fila("Trr_codigo"))
    mLot_codigo = CInt(Fila("Lot_codigo"))
    mSemilla = Nothing
    mSem_codigo = CStr(Fila("Sem_codigo"))
    mEns_fechaensarte = CDate(Fila("Ens_fechaensarte"))
    mCorte = Nothing
    mCor_codigo = CStr(Fila("Cor_codigo"))
    mSeccionHorno = Nothing
    mHor_codigo = CStr(Fila("Hor_codigo"))
    mSec_codigo = CInt(Fila("Sec_codigo"))
    mEns_cujesnatural = CInt(Fila("Ens_cujesnatural"))
    mEns_cujescandela = CInt(Fila("Ens_cujescandela"))
    Dim obj As Object
    obj = Fila("Ens_libnatural")
    If TypeOf obj Is DBNull Then
      mEns_libnatural = 0
    Else
      mEns_libnatural = CDec(obj)
    End If
    obj = Fila("Ens_libcandela")
    If TypeOf obj Is DBNull Then
      mEns_libcandela = 0
    Else
      mEns_libcandela = CDec(obj)
    End If
    obj = Fila("Ens_fechazafnatural")
    If TypeOf obj Is DBNull Then
      mEns_fechazafnatural = Nothing
    Else
      mEns_fechazafnatural = CDate(obj)
    End If
    obj = Fila("Ens_fechazafcandela")
    If TypeOf obj Is DBNull Then
      mEns_fechazafcandela = Nothing
    Else
      mEns_fechazafcandela = CDate(obj)
    End If
  End Sub

  Public Function Guardar() As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    Dim sAccion As String = String.Empty
    If esNuevo Then
      sAccion = "I"
    Else
      sAccion = "M"
    End If
    With OperadorDatos
      .AgregarParametro("@accion", sAccion)
      .AgregarParametro("@Ens_numero", mEns_numero)
      .AgregarParametro("@Zaf_codigo", mZaf_codigo)
      .AgregarParametro("@Trr_codigo", mTrr_codigo)
      .AgregarParametro("@Lot_codigo", mLot_codigo)
      .AgregarParametro("@Sem_codigo", mSem_codigo)
      .AgregarParametro("@Ens_fechaensarte", mEns_fechaensarte)
      .AgregarParametro("@Cor_codigo", mCor_codigo)
      .AgregarParametro("@Hor_codigo", mHor_codigo)
      .AgregarParametro("@Sec_codigo", mSec_codigo)
      .AgregarParametro("@Ens_cujesnatural", mEns_cujesnatural)
      .AgregarParametro("@Ens_cujescandela", mEns_cujescandela)
      .AgregarParametro("@Parame_CicloEnsarte", mParame_CicloEnsarte)
      .AgregarParametro("@Pardet_CicloEnsarte", mPardet_CicloEnsarte)

      If Ens_estazafadonat Then
        .AgregarParametro("@Ens_libnatural", mEns_libnatural)
        If Not mEns_fechazafnatural = Nothing Then
          .AgregarParametro("@Ens_fechazafnatural", mEns_fechazafnatural)
        End If
      End If
      If Ens_estazafadocand Then
        .AgregarParametro("@Ens_libcandela", mEns_libcandela)
        If Not mEns_fechazafcandela = Nothing Then
          .AgregarParametro("@Ens_fechazafcandela", mEns_fechazafcandela)
        End If
      End If
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      If bReturn Then
        If sAccion = "I" Then
          Me.mEns_numero = CInt(dsResult.Tables(0).Rows(0)(0))
        End If
        EsNuevo = False
      End If
      .LimpiarParametros()
    End With
    Return bReturn
  End Function

  Public Function Eliminar() As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    With OperadorDatos
      .AgregarParametro("@accion", "E")
      .AgregarParametro("@Ens_numero", mEns_numero)
      .AgregarParametro("@Zaf_codigo", mZaf_codigo)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    Return bReturn
  End Function
#End Region

#Region "Métodos compartidos"
  Public Shared Function RetornarEnsarteZafadurasFiltro(ByVal _OperadorDatos As OperadorDatos, ByVal _zafra As ZafraSiembra, ByVal _terreno As Terreno, ByVal _lote As LoteTerreno, ByVal _porfechaensarte As Boolean, ByVal _fecensini As Date, ByVal _fecensfin As Date, ByVal _SeccionHorno As SeccionHorno, ByVal _semilla As SemillaSiembra, ByVal _corte As Corte, ByVal _pornumerozafada As Boolean, ByVal _desde As Integer, ByVal _hasta As Integer, ByVal _solozafado As System.Windows.Forms.CheckState, ByVal _porfechazafada As Boolean, ByVal _feczafdesde As Date, ByVal _feczafhasta As Date) As EnsarteZafaduraCollection
    Dim oResult As New EnsarteZafaduraCollection
    Dim bReturn As Boolean
    Dim dsResult As New DataSet
    Dim _terreno1 As Terreno = Nothing
    If _terreno IsNot Nothing Then
      _terreno1 = _terreno
    Else
      If _lote IsNot Nothing Then
        _terreno1 = _lote.Terreno
      End If
    End If

    Dim _horno As Horno = Nothing
    If _SeccionHorno IsNot Nothing Then
      _horno = _SeccionHorno.Horno
    End If

    With _OperadorDatos
      .AgregarParametro("@accion", "F")
      .AgregarParametro("@zaf_codigo", _zafra.Zaf_codigo)
      If _terreno IsNot Nothing Then
        .AgregarParametro("@Trr_codigo", _terreno1.Trr_codigo)
      Else
        If _lote IsNot Nothing Then
          .AgregarParametro("@Trr_codigo", _terreno1.Trr_codigo)
          .AgregarParametro("@Lot_codigo", _lote.Lot_codigo)
        End If
      End If
      If _porfechaensarte Then
        .AgregarParametro("@fechaensdesde", _fecensini)
        .AgregarParametro("@fechaenshasta", _fecensfin)
      End If
      If Not _SeccionHorno Is Nothing Then
        .AgregarParametro("@Hor_codigo", _horno.Hor_codigo)
        .AgregarParametro("@Sec_codigo", _SeccionHorno.Sec_codigo)
      End If
      If Not _semilla Is Nothing Then .AgregarParametro("@Sem_codigo", _semilla.Sem_codigo)
      If Not _corte Is Nothing Then .AgregarParametro("@Cor_codigo", _corte.Cor_codigo)
      If _pornumerozafada Then
        .AgregarParametro("@numzafdesde", _desde)
        .AgregarParametro("@numzafhasta", _hasta)
      End If
      If Not _solozafado = System.Windows.Forms.CheckState.Indeterminate Then .AgregarParametro("@Solozafado", _solozafado = System.Windows.Forms.CheckState.Checked)
      If _porfechazafada Then
        .AgregarParametro("@feczafdesde", _feczafdesde)
        .AgregarParametro("@feczafhasta", _feczafhasta)
      End If
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Tables(0).Rows
        Dim _obj As New EnsarteZafadura(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function

#End Region
End Class

Public Class EnsarteZafaduraCollection
  Inherits System.ComponentModel.BindingList(Of EnsarteZafadura)
	Public Sub New()
	End Sub

End Class
