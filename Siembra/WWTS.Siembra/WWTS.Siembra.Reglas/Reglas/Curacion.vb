'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas

Public Class Curacion

#Region "Campos constantes"
    Private Const _Procedimiento As String = "proc_Curacion"
#End Region

#Region "Campos variables"
    Private mZafra As ZafraSiembra = Nothing
    Private mLote As LoteTerreno = Nothing
    Private mCorte As Corte = Nothing
    Private mSeccionHorno As SeccionHorno = Nothing
    Private mSemilla As SemillaSiembra = Nothing
    Private mPardetTipoTabaco As WWTSParametroDet = Nothing
    Private mDetalles As CuracionDetalleCollection = Nothing
    Private mCortes As CuracionCortesCollection = Nothing
#End Region

#Region "Propiedades públicas de la clase"
    Public Property Detalles() As CuracionDetalleCollection
        Get
            If mDetalles Is Nothing Then
                If EsNuevo Then
                    mDetalles = New CuracionDetalleCollection()
                Else
                    mDetalles = CuracionDetalle.RetornarCuracionDetallesFiltro(OperadorDatos, Cur_numero)
                End If
            End If
            Return mDetalles
        End Get
        Set(ByVal value As CuracionDetalleCollection)
            mDetalles = value
        End Set
    End Property

    Public Property Cortes() As CuracionCortesCollection
        Get
            If mCortes Is Nothing Then
                If EsNuevo Then
                    mCortes = New CuracionCortesCollection()
                Else
                    mCortes = CuracionCortes.RetornarCuracionCortesFiltro(OperadorDatos, Cur_numero)
                End If
            End If
            Return mCortes
        End Get
        Set(ByVal value As CuracionCortesCollection)
            mCortes = value
        End Set
    End Property

    Public Property Zafra() As ZafraSiembra
        Get
            If mZafra Is Nothing And Not mZaf_codigo = String.Empty Then
                mZafra = New ZafraSiembra(OperadorDatos, mZaf_codigo, False)
            End If
            Return mZafra
        End Get
        Set(ByVal Value As ZafraSiembra)
            If Value Is Nothing Then
                Throw New Exception("No se puede enlazar zafra")
            End If
            mZafra = Value
            mZaf_codigo = Value.Zaf_codigo
        End Set
    End Property

    Public Property PardetTipoTabaco() As WWTSParametroDet
        Get
            If mPardetTipoTabaco Is Nothing And Pardet_TipoTabaco > 0 Then
                mPardetTipoTabaco = New WWTSParametroDet(OperadorDatos, mParame_TipoTabaco, mPardet_TipoTabaco)
            End If
            Return mPardetTipoTabaco
        End Get
        Set(ByVal Value As WWTSParametroDet)
            If Value Is Nothing Then
                Throw New Exception("No se puede enlazar ParametroDet")
            End If
            mPardetTipoTabaco = Value
            mParame_TipoTabaco = Value.Parame_Codigo
            mPardet_TipoTabaco = Value.Pardet_Secuencia
        End Set
    End Property

    Public Property Lote() As LoteTerreno
        Get
            If mLote Is Nothing And Not mLot_codigo = 0 Then
                mLote = New LoteTerreno(OperadorDatos, New Terreno(OperadorDatos, mTrr_codigo, False), mLot_codigo, False)
            End If
            Return mLote
        End Get
        Set(ByVal Value As LoteTerreno)
            If Value Is Nothing Then
                Throw New Exception("No se puede enlazar lote")
            End If
            mLote = Value
            mTrr_codigo = Value.Terreno.Trr_codigo
            mLot_codigo = Value.Lot_codigo
        End Set
    End Property
    Public Property Semilla() As SemillaSiembra
        Get
            If mSemilla Is Nothing And Not mSem_codigo = String.Empty Then
                mSemilla = New SemillaSiembra(OperadorDatos, Me.mSem_codigo, False)
            End If
            Return mSemilla
        End Get
        Set(ByVal Value As SemillaSiembra)
            If Value Is Nothing Then
                Throw New Exception("No se puede enlazar semilla")
            End If
            mSemilla = Value
            mSem_codigo = Value.Sem_codigo
        End Set
    End Property
    Public Property SeccionHorno() As SeccionHorno
        Get
            If mSeccionHorno Is Nothing And Not mSec_codigo = 0 And Not mHor_codigo = String.Empty Then
                mSeccionHorno = New SeccionHorno(OperadorDatos, New Horno(OperadorDatos, mHor_codigo, False), mSec_codigo, False)
            End If
            Return mSeccionHorno
        End Get
        Set(ByVal Value As SeccionHorno)
            If Value Is Nothing Then
                Throw New ArgumentNullException("No se pudo enlazar Corte")
            End If
            mSeccionHorno = Value
            mHor_codigo = Value.Horno.Hor_codigo
            mSec_codigo = Value.Sec_codigo
        End Set
    End Property
#End Region

#Region "Constructores de la clase"
    Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _nuevo As Boolean)
        If _OperadorDatos Is Nothing Then
            Throw New InvalidOperationException("El operador de datos es nulo")
        End If

        OperadorDatos = _OperadorDatos
        Dim _configsiembra As New ConfigSiembra(_OperadorDatos)
        Me.Cur_numero = _configsiembra.Cfs_curacion + 1
        EsNuevo = _nuevo
    End Sub

    Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Cur_numero As Integer, ByVal _Nuevo As Boolean)
        If _OperadorDatos Is Nothing Then
            Throw New InvalidOperationException("El operador de datos es nulo")
        End If
        OperadorDatos = _OperadorDatos
        Cur_numero = _Cur_numero
        EsNuevo = _Nuevo
        If Not _Nuevo Then
            If Not Me.Recargar Then
                Throw New Exception("El objeto no puede ser cargado")
            End If
        End If
    End Sub

    Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Cur_numero As Integer)
        If _OperadorDatos Is Nothing Then
            Throw New InvalidOperationException("El operador de datos es nulo")
        End If

        OperadorDatos = _OperadorDatos
        mCur_numero = _Cur_numero
        EsNuevo = True
    End Sub
#End Region

#Region "Implementación de los métodos de persistencia"
    Public Function Recargar() As Boolean
        Dim dsResult As New DataSet
        Dim bResult As Boolean

        With OperadorDatos
            .AgregarParametro("@accion", "C")
            .AgregarParametro("@Cur_numero", mCur_numero)
            .Procedimiento = _Procedimiento
            bResult = .Ejecutar(dsResult)
            .LimpiarParametros()
        End With
        If bResult AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
            Me.MapearDataRowaObjeto(dsResult.Tables(0).Rows(0))
            Return True
        Else
            Return False
        End If
    End Function
#End Region

#Region "Métodos internos de la clase"
    Private Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
        mCur_numero = CInt(Fila("Cur_numero"))
        mZafra = Nothing
        mZaf_codigo = CStr(Fila("Zaf_codigo"))
        mPardetTipoTabaco = Nothing
        mParame_TipoTabaco = CInt(Fila("Parame_TipoTabaco"))
        mPardet_TipoTabaco = CInt(Fila("Pardet_TipoTabaco"))
        mLote = Nothing
        mTrr_codigo = CStr(Fila("Trr_codigo"))
        mLot_codigo = CInt(Fila("Lot_codigo"))
        mSemilla = Nothing
        mSem_codigo = CStr(Fila("Sem_codigo"))
        mCur_fecha = CDate(Fila("Cur_fecha"))
        mCorte = Nothing
        mSeccionHorno = Nothing
        mHor_codigo = CStr(Fila("Hor_codigo"))
        mSec_codigo = CInt(Fila("Sec_codigo"))
        mCur_fechaingreso = CDate(Fila("Cur_fechaingreso"))
    End Sub

    Public Function Guardar() As Boolean
        Dim dsResult As New DataSet
        Dim bReturn As Boolean

        Dim _comenzotransaccion As Boolean = False
        If Not OperadorDatos.EstaenTransaccion Then
            OperadorDatos.ComenzarTransaccion()
            _comenzotransaccion = True
        End If

        Dim sAccion As String = String.Empty
        If EsNuevo Then
            sAccion = "I"
        Else
            sAccion = "M"
        End If
        With OperadorDatos
            .AgregarParametro("@accion", sAccion)
            .AgregarParametro("@Cur_numero", mCur_numero)
            .AgregarParametro("@Zaf_codigo", mZaf_codigo)
            .AgregarParametro("@Trr_codigo", mTrr_codigo)
            .AgregarParametro("@Lot_codigo", mLot_codigo)
            .AgregarParametro("@Sem_codigo", mSem_codigo)
            .AgregarParametro("@Cur_fecha", mCur_fecha)
            .AgregarParametro("@Cur_fechaingreso", mCur_fechaingreso)
            .AgregarParametro("@Hor_codigo", mHor_codigo)
            .AgregarParametro("@Sec_codigo", mSec_codigo)
            .AgregarParametro("@Parame_TipoTabaco", mParame_TipoTabaco)
            .AgregarParametro("@Pardet_TipoTabaco", mPardet_TipoTabaco)
            .Procedimiento = _Procedimiento
            bReturn = .Ejecutar(dsResult)
            .LimpiarParametros()
            If bReturn Then
                If sAccion = "I" Then
                    Me.mCur_numero = CInt(dsResult.Tables(0).Rows(0)(0))
                End If

                For Each _detalle As CuracionDetalle In Detalles
                    If _detalle.EsNuevo OrElse _detalle.EsModificado Then
                        _detalle.Curacion = Me
                        If Not _detalle.Guardar() Then
                            bReturn = False
                            Exit For
                        End If
                    End If
                Next

                For Each _detalle As CuracionCortes In Cortes
                    If _detalle.Ens_numero <> 0 AndAlso (_detalle.EsNuevo OrElse _detalle.EsModificado) Then
                        _detalle.Curacion = Me
                        If Not _detalle.Guardar() Then
                            bReturn = False
                            Exit For
                        End If
                    End If
                Next

                If Not OperadorDatos.EstaenTransaccion Then
                    EsNuevo = False
                    EsModificado = False
                End If
            End If
        End With

        If _comenzotransaccion Then
            If bReturn Then
                OperadorDatos.TerminarTransaccion()
                AceptarCambios()
            Else
                OperadorDatos.CancelarTransaccion()
            End If
        End If
        Return bReturn
    End Function

    Public Overridable Function AceptarCambios() As Boolean
        EsNuevo = False
        EsModificado = False

        For Each _detalle As CuracionDetalle In Detalles
            _detalle.AceptarCambios()
        Next
        Return True
    End Function

    Public Function Eliminar() As Boolean
        Dim dsResult As New DataSet
        Dim bReturn As Boolean
        With OperadorDatos
            .AgregarParametro("@accion", "E")
            .AgregarParametro("@Cur_numero", mCur_numero)
            .Procedimiento = _Procedimiento
            bReturn = .Ejecutar(dsResult)
            .LimpiarParametros()
        End With
        Return bReturn
    End Function
#End Region

#Region "Métodos compartidos"
    Public Shared Function RetornarCuracionsFiltro(ByVal _OperadorDatos As OperadorDatos, ByVal _zafra As ZafraSiembra, ByVal _terreno As Terreno, ByVal _lote As LoteTerreno,
                                                   ByVal _porfecha As Boolean, ByVal _fecini As Date, ByVal _fecfin As Date, ByVal _SeccionHorno As SeccionHorno, ByVal _semilla As SemillaSiembra,
                                                   ByVal _pornumerozafada As Boolean, ByVal _desde As Integer, ByVal _hasta As Integer) As CuracionCollection
        Dim oResult As New CuracionCollection
        Dim bReturn As Boolean
        Dim dsResult As New DataSet
        Dim _terreno1 As Terreno = Nothing
        If _terreno IsNot Nothing Then
            _terreno1 = _terreno
        Else
            If _lote IsNot Nothing Then
                _terreno1 = _lote.Terreno
            End If
        End If

        Dim _horno As Horno = Nothing
        If _SeccionHorno IsNot Nothing Then
            _horno = _SeccionHorno.Horno
        End If

        With _OperadorDatos
            .AgregarParametro("@accion", "F")
            .AgregarParametro("@zaf_codigo", _zafra.Zaf_codigo)
            If _terreno IsNot Nothing Then
                .AgregarParametro("@Trr_codigo", _terreno1.Trr_codigo)
            Else
                If _lote IsNot Nothing Then
                    .AgregarParametro("@Trr_codigo", _terreno1.Trr_codigo)
                    .AgregarParametro("@Lot_codigo", _lote.Lot_codigo)
                End If
            End If
            If _porfecha Then
                .AgregarParametro("@fechadesde", _fecini)
                .AgregarParametro("@fechahasta", _fecfin)
            End If
            If Not _SeccionHorno Is Nothing Then
                .AgregarParametro("@Hor_codigo", _horno.Hor_codigo)
                .AgregarParametro("@Sec_codigo", _SeccionHorno.Sec_codigo)
            End If
            If Not _semilla Is Nothing Then .AgregarParametro("@Sem_codigo", _semilla.Sem_codigo)
            If _pornumerozafada Then
                .AgregarParametro("@numdesde", _desde)
                .AgregarParametro("@numhasta", _hasta)
            End If
            .Procedimiento = _Procedimiento
            bReturn = .Ejecutar(dsResult)
            .LimpiarParametros()
        End With
        If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
            For Each _dr As DataRow In dsResult.Tables(0).Rows
                Dim _obj As New Curacion(_OperadorDatos, False)
                _obj.MapearDataRowaObjeto(_dr)
                oResult.Add(_obj)
            Next
        End If
        Return oResult
    End Function

#End Region
End Class

Public Class CuracionCollection
    Inherits System.ComponentModel.BindingList(Of Curacion)
    Public Sub New()
	End Sub

End Class
