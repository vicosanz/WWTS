'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas

Public Class InvCaja

#Region "Campos constantes"
  Private Const _Procedimiento As String = "proc_InvCaja"
#End Region

#Region "Campos variables"
  Private mZafra As ZafraSiembra = Nothing
  Private mTerreno As Terreno = Nothing
  Private mColorHoja As ColorHoja = Nothing
  Private mClaseHoja As ClaseHoja = Nothing
  Private mSemilla As SemillaSiembra = Nothing
  Private mBodega As BodegaTerreno = Nothing
  Private mCorte As Corte = Nothing
  Private mEmbarque As Embarque = Nothing
#End Region

#Region "Propiedades públicas de la clase"

  Public Property Zafra() As ZafraSiembra
    Get
      If mZafra Is Nothing And Not mZaf_codigo.Trim = String.Empty Then
        mZafra = New ZafraSiembra(OperadorDatos, Me.mZaf_codigo, False)
      End If
      Return mZafra
    End Get
    Set(ByVal Value As ZafraSiembra)
      If Value Is Nothing Then
        Throw New ArgumentNullException("No se pudo enlazar Zafra")
      End If
      Me.mZafra = Value
      Me.mZaf_codigo = Value.Zaf_codigo
    End Set
  End Property
  Public Property Terreno() As Terreno
    Get
      If mTerreno Is Nothing And Not mTrr_codigo.Trim = String.Empty Then
        mTerreno = New Terreno(OperadorDatos, Me.mTrr_codigo, False)
      End If
      Return mTerreno
    End Get
    Set(ByVal Value As Terreno)
      If Value Is Nothing Then
        Throw New ArgumentNullException("No se pudo enlazar Terreno")
      End If
      Me.mTerreno = Value
      Me.mTrr_codigo = Value.Trr_codigo
    End Set
  End Property
  Public Property ColorHoja() As ColorHoja
    Get
      If mColorHoja Is Nothing And Not mCol_codigo.Trim = String.Empty Then
        mColorHoja = New ColorHoja(OperadorDatos, Me.mCol_codigo, False)
      End If
      Return mColorHoja
    End Get
    Set(ByVal Value As ColorHoja)
      Me.mColorHoja = Value
      If Value Is Nothing Then
        mCol_codigo = String.Empty
      Else
        Me.mCol_codigo = Value.Col_codigo
      End If
    End Set
  End Property
  Public Property ClaseHoja() As ClaseHoja
    Get
      If mClaseHoja Is Nothing And Not mCla_codigo.Trim = String.Empty Then
        mClaseHoja = New ClaseHoja(OperadorDatos, Me.mCla_codigo, False)
      End If
      Return mClaseHoja
    End Get
    Set(ByVal Value As ClaseHoja)
      If Value Is Nothing Then
        Throw New ArgumentNullException("No se pudo enlazar Clase")
      End If
      Me.mClaseHoja = Value
      Me.mCla_codigo = Value.Cla_codigo
    End Set
  End Property
  Public Property Semilla() As SemillaSiembra
    Get
      If mSemilla Is Nothing And Not mSem_codigo.Trim = String.Empty Then
        mSemilla = New SemillaSiembra(OperadorDatos, Me.mSem_codigo, False)
      End If
      Return mSemilla
    End Get
    Set(ByVal Value As SemillaSiembra)
      If Value Is Nothing Then
        Throw New ArgumentNullException("No se pudo enlazar Semilla")
      End If
      Me.mSemilla = Value
      Me.mSem_codigo = Value.Sem_codigo
    End Set
  End Property
  Public Property Bodega() As BodegaTerreno
    Get
      If mBodega Is Nothing And Not mBod_codigo.Trim = String.Empty Then
        mBodega = New BodegaTerreno(OperadorDatos, Me.mBod_codigo, False)
      End If
      Return mBodega
    End Get
    Set(ByVal Value As BodegaTerreno)
      If Value Is Nothing Then
        Throw New ArgumentNullException("No se pudo enlazar Bodega")
      End If
      Me.mBodega = Value
      Me.mBod_codigo = Value.Bod_codigo
    End Set
  End Property
  Public Property Corte() As Corte
    Get
      If mCorte Is Nothing And Not mCor_codigo.Trim = String.Empty Then
        mCorte = New Corte(OperadorDatos, Me.mCor_codigo, False)
      End If
      Return mCorte
    End Get
    Set(ByVal Value As Corte)
      If Value Is Nothing Then
        Throw New ArgumentNullException("No se pudo enlazar Corte")
      End If
      Me.mCorte = Value
      Me.mCor_codigo = Value.Cor_codigo
    End Set
  End Property
  Public ReadOnly Property PesoNeto() As Decimal
    Get
      Return mCaj_peso - mCaj_tara
    End Get
  End Property
  Public Property Embarque() As Embarque
    Get
      If mEmbarque Is Nothing And Not mEmb_codigo <= 0 And Not mZaf_embarque.Trim = String.Empty Then
        mEmbarque = New Embarque(OperadorDatos, New ZafraSiembra(OperadorDatos, mZaf_embarque, False), mEmb_codigo, False)
      End If
      Return mEmbarque
    End Get
    Set(ByVal Value As Embarque)
      mEmbarque = Value
      If Value Is Nothing Then
        mEmb_codigo = 0
        mZaf_embarque = String.Empty
      Else
        mEmb_codigo = Value.Emb_codigo
        mZaf_embarque = Value.Zafra.Zaf_codigo
      End If
    End Set
  End Property
#End Region

#Region "Constructores de la clase"
  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    EsNuevo = _nuevo
    Dim _configsiembra As New ConfigSiembra(_OperadorDatos)
    Me.Caj_empNum = _configsiembra.Cfs_empaque + 1
    Me.Caj_Tara = _configsiembra.Cfs_tara
  End Sub
  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _zafra As ZafraSiembra, ByVal _Caj_empNum As String, ByVal _Nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    Me.Caj_empNum = _Caj_empNum
    Me.Zafra = _zafra
    EsNuevo = _Nuevo
    If Not _Nuevo Then
      If Not Me.Recargar Then
        Throw New Exception("El objeto no puede ser cargado")
      End If
    Else
      Dim _configsiembra As New ConfigSiembra(_OperadorDatos)
      Me.Caj_empNum = _configsiembra.Cfs_empaque + 1
      Me.Caj_Tara = _configsiembra.Cfs_tara
    End If
  End Sub
#End Region

#Region "Implementación de los métodos de persistencia"
  Public Function Recargar() As Boolean
    Dim dsResult As New DataSet
    Dim bResult As Boolean

    With OperadorDatos
      .AgregarParametro("@accion", "C")
      .AgregarParametro("@Zaf_codigo", mZaf_codigo)
      .AgregarParametro("@Caj_empNum", mCaj_empNum)
      .Procedimiento = _Procedimiento
      bResult = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bResult AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      Me.MapearDataRowaObjeto(dsResult.Tables(0).Rows(0))
      Return True
    Else
      Return False
    End If
  End Function
#End Region

#Region "Métodos internos de la clase"
  Private Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    mZafra = Nothing
    mZaf_codigo = CStr(Fila("Zaf_codigo"))
    mCaj_empNum = CStr(Fila("Caj_empNum"))
    mCaj_tipoNC = Enumerados.TipoTabacoList.RetornarNumero(CStr(Fila("Caj_tipoNC")))
    mTrr_codigo = CStr(Fila("Trr_codigo"))
    mTerreno = Nothing
    Dim obj As Object
    obj = Fila("Col_codigo")
    If TypeOf obj Is DBNull Then
      mCol_codigo = String.Empty
    Else
      mCol_codigo = CStr(Fila("Col_codigo"))
    End If
    mColorHoja = Nothing

    mCla_codigo = CStr(Fila("Cla_codigo"))
    mClaseHoja = Nothing
    mSem_codigo = CStr(Fila("Sem_codigo"))
    mSemilla = Nothing
    mBod_codigo = CStr(Fila("Bod_codigo"))
    mBodega = Nothing
    mCor_codigo = CStr(Fila("Cor_codigo"))
    mCorte = Nothing
    mCaj_precio = CDec(Fila("Caj_precio"))
    mCaj_Fechaempaque = Now.Date
    obj = Fila("Caj_fechaempaque")
    If TypeOf obj Is DBNull Then
      mCaj_Fechaempaque = Nothing
    Else
      mCaj_Fechaempaque = CDate(obj)
    End If
    mCaj_peso = CDec(Fila("Caj_peso"))
    mCaj_tara = CDec(Fila("Caj_tara"))
    obj = Fila("Zaf_embarque")
    If TypeOf obj Is DBNull Then
      mZaf_embarque = String.Empty
    Else
      mZaf_embarque = CStr(obj)
    End If
    obj = Fila("Emb_codigo")
    If TypeOf obj Is DBNull Then
      mEmb_codigo = 0
    Else
      mEmb_codigo = CInt(obj)
    End If
    mEmbarque = Nothing
    obj = Fila("Caj_embnum")
    If TypeOf obj Is DBNull Then
      mCaj_embNum = 0
    Else
      mCaj_embNum = CInt(obj)
    End If
  End Sub

  'Public Function Enumerarx(ByVal num As Integer) As Boolean
  '	Dim dsResult As DataSet
  '	Dim bReturn As Boolean
  '	Dim sAccion As String = String.Empty
  '	With OperadorDatos
  '		.AgregarParametro("@accion", "EN")
  '		.AgregarParametro("@Zaf_codigo", mZaf_codigo)
  '		.AgregarParametro("@Caj_empNum", mCaj_empNum)
  '		.AgregarParametro("@Caj_embNum", num)
  '		.Procedimiento = _Procedimiento
  '		bReturn = .Ejecutar(dsResult)
  '		If bReturn Then
  '			EsNuevo= False
  '		End If
  '		.LimpiarParametros()
  '	End With
  '	Return bReturn
  'End Function
  Public Function Guardar() As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    Dim sAccion As String = String.Empty
    If esNuevo Then
      sAccion = "I"
    Else
      sAccion = "M"
    End If

    Dim _Embarcado As Boolean = Not Me.Embarque Is Nothing
    With OperadorDatos
      .AgregarParametro("@accion", sAccion)
      .AgregarParametro("@Zaf_codigo", Me.mZaf_codigo)
      .AgregarParametro("@Caj_empNum", Me.mCaj_empNum)
      .AgregarParametro("@Caj_tipoNC", Enumerados.TipoTabacoList.RetornarCaracter(CInt(Me.mCaj_tipoNC)))
      .AgregarParametro("@Trr_codigo", Me.mTrr_codigo)
      If Not mCla_codigo.Trim = "SIN ESCOGER" Then
        If Not mCol_codigo = String.Empty Then
          .AgregarParametro("@Col_codigo", Me.mCol_codigo)
        End If
      End If
      .AgregarParametro("@Cla_codigo", Me.mCla_codigo)
      .AgregarParametro("@Sem_codigo", Me.mSem_codigo)
      .AgregarParametro("@Bod_codigo", Me.mBod_codigo)
      .AgregarParametro("@Cor_codigo", Me.mCor_codigo)
      .AgregarParametro("@Caj_precio", Me.mCaj_precio)
      .AgregarParametro("@Caj_fechaempaque", IIf(Me.mCaj_Fechaempaque = Nothing, Now.Date, Me.mCaj_Fechaempaque))
      .AgregarParametro("@Caj_peso", Me.mCaj_peso)
      .AgregarParametro("@Caj_tara", Me.mCaj_tara)
      .AgregarParametro("@Caj_embNum", Me.mCaj_embNum)
      If _Embarcado Then
        .AgregarParametro("@Zaf_embarque", Me.mZaf_embarque)
        .AgregarParametro("@Emb_codigo", Me.mEmb_codigo)
      End If
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      If bReturn Then
        If sAccion = "I" Then
          Me.mCaj_empNum = CInt(dsResult.Tables(0).Rows(0)(0))
        End If
        EsNuevo = False
      End If
      .LimpiarParametros()
    End With
    Return bReturn
  End Function
  Public Function CambiarEmpaque(ByVal _empnuevo As Integer) As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    If _empnuevo <= 0 Then
      Throw New Exception("No es un número de empaque válido")
    End If
    With OperadorDatos
      .AgregarParametro("@accion", "CE")
      .AgregarParametro("@Zaf_codigo", Me.mZaf_codigo)
      .AgregarParametro("@Caj_empNum", Me.mCaj_empNum)
      .AgregarParametro("@empNuevo", _empnuevo)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      If bReturn Then
        Me.mCaj_empNum = _empnuevo
        EsNuevo = False
      End If
      .LimpiarParametros()
    End With
    Return bReturn
  End Function
  Public Function Eliminar() As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    With OperadorDatos
      .AgregarParametro("@accion", "E")
      .AgregarParametro("@Zaf_codigo", mZaf_codigo)
      .AgregarParametro("@Caj_empNum", mCaj_empNum)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    Return bReturn
  End Function
#End Region

#Region "Métodos compartidos"
  Public Shared Function RetornarInvCajaFiltro(ByVal _OperadorDatos As OperadorDatos, ByVal _tipotabaco As Enumerados.TipoTabaco, ByVal _semilla As SemillaSiembra, ByVal _terreno As Terreno, ByVal _bodega As BodegaTerreno, ByVal _corte As Corte, ByVal _Noestaclase As Boolean, ByVal _clase As ClaseHoja, ByVal _color As ColorHoja, ByVal _zafra As ZafraSiembra, ByVal _porfechaempaque As Boolean, ByVal _fecempdesde As Date, ByVal _fecemphasta As Date, ByVal _soloembarcado As System.Windows.Forms.CheckState, ByVal _pornumeroembarque As Boolean, ByVal _desde As Integer, ByVal _hasta As Integer) As InvCajaCollection
    Dim oResult As New InvCajaCollection
    Dim bReturn As Boolean
    Dim dsResult As New DataSet
    With _OperadorDatos
      .AgregarParametro("@accion", "F")
      .AgregarParametro("@Caj_tipoNC", Enumerados.TipoTabacoList.RetornarCaracter(CInt(_tipotabaco)))
      If Not _terreno Is Nothing Then .AgregarParametro("@trr_codigo", _terreno.Trr_codigo)
      If Not _clase Is Nothing Then
        .AgregarParametro("@Cla_codigo", _clase.Cla_codigo)
        .AgregarParametro("@NoEstaClase", _Noestaclase)
      End If
      If Not _color Is Nothing Then .AgregarParametro("@Col_codigo", _color.Col_codigo)
      If Not _bodega Is Nothing Then .AgregarParametro("@Bod_codigo", _bodega.Bod_codigo)
      If Not _semilla Is Nothing Then .AgregarParametro("@sem_codigo", _semilla.Sem_codigo)
      If Not _corte Is Nothing Then .AgregarParametro("@Cor_codigo", _corte.Cor_codigo)
      If Not _zafra Is Nothing Then .AgregarParametro("@zaf_codigo", _zafra.Zaf_codigo)
      If _porfechaempaque Then
        .AgregarParametro("@fechaempdesde", _fecempdesde)
        .AgregarParametro("@fechaemphasta", _fecemphasta)
      End If
      If Not _soloembarcado = System.Windows.Forms.CheckState.Indeterminate Then .AgregarParametro("@Soloembarcado", _soloembarcado = System.Windows.Forms.CheckState.Checked)
      If _pornumeroembarque Then
        .AgregarParametro("@numembdesde", _desde)
        .AgregarParametro("@numembhasta", _hasta)
      End If
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Tables(0).Rows
        Dim _obj As New InvCaja(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function RetornarInvCajaFiltro(ByVal _OperadorDatos As OperadorDatos, ByVal _embarque As Embarque) As InvCajaCollection
    Dim oResult As New InvCajaCollection
    Dim bReturn As Boolean
    Dim dsResult As New DataSet
    Dim _zafra As ZafraSiembra = _embarque.Zafra()
    With _OperadorDatos
      .AgregarParametro("@accion", "FE")
      .AgregarParametro("@zaf_embarque", _zafra.Zaf_codigo)
      .AgregarParametro("@emb_codigo", _embarque.Emb_codigo)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Tables(0).Rows
        Dim _obj As New InvCaja(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function RetornarInvCajaFiltroResumen(ByVal _OperadorDatos As OperadorDatos, ByVal _embarque As Embarque) As ResumenInvCajaCollection
    Dim oResult As New ResumenInvCajaCollection
    Dim bReturn As Boolean
    Dim dsResult As New DataSet
    Dim _zafra As ZafraSiembra = _embarque.Zafra()
    With _OperadorDatos
      .AgregarParametro("@accion", "FER")
      .AgregarParametro("@zaf_embarque", _zafra.Zaf_codigo)
      .AgregarParametro("@emb_codigo", _embarque.Emb_codigo)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Tables(0).Rows
        Dim _obj As New ResumenInvCaja(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function


#End Region
End Class

Public Class InvCajaCollection
  Inherits System.ComponentModel.BindingList(Of InvCaja)
  Public Sub New()
  End Sub

End Class

Public Class ResumenInvCaja

#Region "Campos variables"
  Private mTerreno As Terreno = Nothing
  Private mSemilla As SemillaSiembra = Nothing
#End Region

#Region "Propiedades públicas de la clase"
  Public Property Terreno() As Terreno
    Get
      If mTerreno Is Nothing And Not mTrr_codigo.Trim = String.Empty Then
        mTerreno = New Terreno(OperadorDatos, Me.mTrr_codigo, False)
      End If
      Return mTerreno
    End Get
    Set(ByVal Value As Terreno)
      If Value Is Nothing Then
        Throw New ArgumentNullException("No se pudo enlazar Terreno")
      End If
      Me.mTerreno = Value
      Me.mTrr_codigo = Value.Trr_codigo
    End Set
  End Property

  Public Property Semilla() As SemillaSiembra
    Get
      If mSemilla Is Nothing And Not mSem_codigo.Trim = String.Empty Then
        mSemilla = New SemillaSiembra(OperadorDatos, Me.mSem_codigo, False)
      End If
      Return mSemilla
    End Get
    Set(ByVal Value As SemillaSiembra)
      If Value Is Nothing Then
        Throw New ArgumentNullException("No se pudo enlazar Semilla")
      End If
      Me.mSemilla = Value
      Me.mSem_codigo = Value.Sem_codigo
    End Set
  End Property
#End Region

#Region "Constructores de la clase"
  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
  End Sub
#End Region

#Region "Métodos internos de la clase"
  Public Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    mNumCajas = CInt(Fila("NumCajas"))
    mTrr_codigo = CStr(Fila("Trr_codigo"))
    mTerreno = Nothing
    mCaj_tipoNC = Enumerados.TipoTabacoList.RetornarNumero(CStr(Fila("Caj_tipoNC")))
    mSem_codigo = CStr(Fila("Sem_codigo"))
    mSemilla = Nothing
    mPeso = CDec(Fila("Peso"))
    mTara = CDec(Fila("Tara"))
  End Sub
#End Region
End Class

Public Class ResumenInvCajaCollection
  Inherits System.ComponentModel.BindingList(Of ResumenInvCaja)
  Public Sub New()
  End Sub

End Class
