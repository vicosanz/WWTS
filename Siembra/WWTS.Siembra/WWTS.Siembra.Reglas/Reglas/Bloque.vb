'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas

Public Class Bloque

#Region "Campos constantes"
  Private Const _Procedimiento As String = "proc_Bloque"
#End Region

#Region "Campos variables"
  Private mZafra As ZafraSiembra = Nothing
  Private mCorte As Corte = Nothing
  Private mSemilla As SemillaSiembra = Nothing
  Private mLote As LoteTerreno = Nothing
#End Region

#Region "Propiedades públicas de la clase"
  Public Property Zafra() As ZafraSiembra
    Get
      If mZafra Is Nothing And Not mZaf_codigo = String.Empty Then
        mZafra = New ZafraSiembra(OperadorDatos, mZaf_codigo, False)
      End If
      Return mZafra
    End Get
    Set(ByVal Value As ZafraSiembra)
      If Value Is Nothing Then
        Throw New Exception("No se puede enlazar zafra")
      End If
      mZafra = Value
      mZaf_codigo = Value.Zaf_codigo
    End Set
  End Property
  Public Property Corte() As Corte
    Get
      If mCorte Is Nothing And Not mCor_codigo = String.Empty Then
        mCorte = New Corte(OperadorDatos, Me.mCor_codigo, False)
      End If
      Return mCorte
    End Get
    Set(ByVal Value As Corte)
      If Value Is Nothing Then
        Throw New ArgumentNullException("No se pudo enlazar Corte")
      End If
      Me.mCorte = Value
      Me.mCor_codigo = Value.Cor_codigo
    End Set
  End Property
  Public Property Semilla() As SemillaSiembra
    Get
      If mSemilla Is Nothing And Not mSem_codigo = String.Empty Then
        mSemilla = New SemillaSiembra(OperadorDatos, Me.mSem_codigo, False)
      End If
      Return mSemilla
    End Get
    Set(ByVal Value As SemillaSiembra)
      If Value Is Nothing Then
        Throw New Exception("No se puede enlazar semilla")
      End If
      mSemilla = Value
      mSem_codigo = Value.Sem_codigo
    End Set
  End Property
  Public Property Lote() As LoteTerreno
    Get
      If mLote Is Nothing And Not mLot_codigo = 0 Then
        mLote = New LoteTerreno(OperadorDatos, New Terreno(OperadorDatos, mTrr_codigo, False), mLot_codigo, False)
      End If
      Return mLote
    End Get
    Set(ByVal Value As LoteTerreno)
      If Value Is Nothing Then
        Throw New Exception("No se puede enlazar lote")
      End If
      mLote = Value
      mTrr_codigo = Value.Terreno.Trr_codigo
      mLot_codigo = Value.Lot_codigo
    End Set
  End Property
#End Region

#Region "Constructores de la clase"
  Private Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    Dim _configsiembra As New ConfigSiembra(_OperadorDatos)
    Me.Blo_codigo = _configsiembra.Cfs_bloque + 1
    EsNuevo = _nuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _zafra As ZafraSiembra, ByVal _Blo_codigo As Integer, ByVal _Nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If
    OperadorDatos = _OperadorDatos
    If _zafra Is Nothing Then
      Throw New Exception("No se puede enlazar Zafra")
    End If
    mZaf_codigo = _zafra.Zaf_codigo
    Blo_codigo = _Blo_codigo
    EsNuevo = _Nuevo
    If Not _Nuevo Then
      If Not Me.Recargar Then
        Throw New Exception("El objeto no puede ser cargado")
      End If
    End If
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _zafra As ZafraSiembra)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    mZafra = _zafra
    EsNuevo = True
  End Sub
#End Region

#Region "Implementación de los métodos de persistencia"
  Public Function Recargar() As Boolean
    Dim dsResult As New DataSet
    Dim bResult As Boolean

    With OperadorDatos
      .AgregarParametro("@accion", "C")
      .AgregarParametro("@Blo_codigo", mBlo_codigo)
      .AgregarParametro("@Zaf_codigo", mZaf_codigo)
      .Procedimiento = _Procedimiento
      bResult = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bResult AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      Me.MapearDataRowaObjeto(dsResult.Tables(0).Rows(0))
      Return True
    Else
      Return False
    End If
  End Function
#End Region

#Region "Métodos internos de la clase"
  Private Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    mBlo_codigo = CInt(Fila("Blo_codigo"))
    mZafra = Nothing
    mZaf_codigo = CStr(Fila("Zaf_codigo"))
    mCorte = Nothing
    mCor_codigo = CStr(Fila("Cor_codigo"))
    mSemilla = Nothing
    mSem_codigo = CStr(Fila("Sem_codigo"))
    mLote = Nothing
    mTrr_codigo = CStr(Fila("Trr_codigo"))
    mLot_codigo = CInt(Fila("Lot_codigo"))
    mBlo_essanooroto = CBool(Fila("Blo_essanooroto"))
    mBlo_eslimpioopintado = CBool(Fila("Blo_eslimpioopintado"))
    mBlo_observacion = CStr(Fila("Blo_observacion"))
  End Sub

  Public Function Guardar() As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    Dim sAccion As String = String.Empty
    If EsNuevo Then
      sAccion = "I"
    Else
      sAccion = "M"
    End If
    With OperadorDatos
      .AgregarParametro("@accion", sAccion)
      .AgregarParametro("@Blo_codigo", mBlo_codigo)
      .AgregarParametro("@Zaf_codigo", mZaf_codigo)
      .AgregarParametro("@Cor_codigo", mCor_codigo)
      .AgregarParametro("@Sem_codigo", mSem_codigo)
      .AgregarParametro("@Trr_codigo", mTrr_codigo)
      .AgregarParametro("@Lot_codigo", mLot_codigo)
      .AgregarParametro("@Blo_essanooroto", mBlo_essanooroto)
      .AgregarParametro("@Blo_eslimpioopintado", mBlo_eslimpioopintado)
      .AgregarParametro("@Blo_observacion", mBlo_observacion)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      If bReturn Then
        If sAccion = "I" Then
          Me.mBlo_codigo = CInt(dsResult.Tables(0).Rows(0)(0))
        End If
        EsNuevo = False
      End If
      .LimpiarParametros()
    End With
    Return bReturn
  End Function

  Public Function Eliminar() As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    With OperadorDatos
      .AgregarParametro("@accion", "E")
      .AgregarParametro("@Blo_codigo", mBlo_codigo)
      .AgregarParametro("@Zaf_codigo", mZaf_codigo)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    Return bReturn
  End Function
#End Region

#Region "Métodos compartidos"
  Public Shared Function RetornarBloquesFiltro(ByVal _OperadorDatos As OperadorDatos, ByVal _zafra As ZafraSiembra, ByVal _terreno As Terreno, ByVal _lote As LoteTerreno, ByVal _porfechatipomovinv As Boolean, ByVal _tipomov As Enumerados.TipoMovBloque, ByVal _fecbloqini As Date, ByVal _fecbloqfin As Date, ByVal _semilla As SemillaSiembra, ByVal _corte As Corte, ByVal _pornumerobloque As Boolean, ByVal _desde As Integer, ByVal _hasta As Integer) As BloqueCollection
    Dim oResult As New BloqueCollection
    Dim bReturn As Boolean
    Dim dsResult As New DataSet
    Dim _terreno1 As Terreno = Nothing
    If _terreno IsNot Nothing Then
      _terreno1 = _terreno
    Else
      If _lote IsNot Nothing Then
        _terreno1 = _lote.Terreno
      End If
    End If

    With _OperadorDatos
      .AgregarParametro("@accion", "F")
      .AgregarParametro("@zaf_codigo", _zafra.Zaf_codigo)
      If _terreno IsNot Nothing Then
        .AgregarParametro("@Trr_codigo", _terreno1.Trr_codigo)
      Else
        If Not _lote Is Nothing Then
          .AgregarParametro("@Trr_codigo", _terreno1.Trr_codigo)
          .AgregarParametro("@Lot_codigo", _lote.Lot_codigo)
        End If
      End If
      If _porfechatipomovinv Then
        .AgregarParametro("@blm_tipo", Enumerados.TipoMovBloqueList.RetornarCaracter(CInt(_tipomov)))
        .AgregarParametro("@fechamovdesde", _fecbloqini)
        .AgregarParametro("@fechamovhasta", _fecbloqfin)
      End If
      If Not _semilla Is Nothing Then .AgregarParametro("@Sem_codigo", _semilla.Sem_codigo)
      If Not _corte Is Nothing Then .AgregarParametro("@Cor_codigo", _corte.Cor_codigo)
      If _pornumerobloque Then
        .AgregarParametro("@numbloqdesde", _desde)
        .AgregarParametro("@numbloqhasta", _hasta)
      End If
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Tables(0).Rows
        Dim _obj As New Bloque(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function

#End Region
End Class

Public Class BloqueCollection
  Inherits System.ComponentModel.BindingList(Of Bloque)
  Public Sub New()
  End Sub

End Class
