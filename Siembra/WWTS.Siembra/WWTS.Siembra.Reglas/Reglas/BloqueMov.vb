'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas

Public Class BloqueMov

#Region "Campos constantes"
  Private Const _Procedimiento As String = "proc_BloqueMov"
#End Region

#Region "Campos variables"
  Private mBloque As Bloque = Nothing
  Private mCuarto As Cuarto = Nothing
  Private mCuartoDestino As Cuarto = Nothing
#End Region

#Region "Propiedades públicas de la clase"
  Public Property Bloque() As Bloque
    Get
      If mBloque Is Nothing And Not mZaf_codigo = String.Empty Then
        mBloque = New Bloque(OperadorDatos, New ZafraSiembra(OperadorDatos, mZaf_codigo, False), mBlo_codigo, False)
      End If
      Return mBloque
    End Get
    Set(ByVal Value As Bloque)
      If Value Is Nothing Then
        Throw New Exception("No se puede enlazar Bloque")
      End If
      mBloque = Value
      mZaf_codigo = Value.Zafra.Zaf_codigo
      mBlo_codigo = Value.Blo_codigo
    End Set
  End Property
  Public Property Cuarto() As Cuarto
    Get
      If mCuarto Is Nothing And Not mCto_codigo = String.Empty Then
        mCuarto = New Cuarto(OperadorDatos, Me.mCto_codigo, False)
      End If
      Return mCuarto
    End Get
    Set(ByVal Value As Cuarto)
      If Value Is Nothing Then
        Throw New ArgumentNullException("No se pudo enlazar Cuarto")
      End If
      Me.mCuarto = Value
      Me.mCto_codigo = Value.Cto_codigo
    End Set
  End Property
  Public Property CuartoDestino() As Cuarto
    Get
      If mCuartoDestino Is Nothing And Not mCto_destino = String.Empty Then
        mCuartoDestino = New Cuarto(OperadorDatos, Me.mCto_destino, False)
      End If
      Return mCuartoDestino
    End Get
    Set(ByVal Value As Cuarto)
      Me.mCuartoDestino = Value
      If Value Is Nothing Then
        Me.mCto_destino = String.Empty
      Else
        Me.mCto_destino = Value.Cto_codigo
      End If
    End Set
  End Property

  Public ReadOnly Property CuartoOrigenStr() As String
    Get
      If Cuarto Is Nothing Then
        Return String.Empty
      Else
        Return Cuarto.Cto_descripcion
      End If
    End Get
  End Property
  Public ReadOnly Property CuartoDestinoStr() As String
    Get
      If CuartoDestino Is Nothing Then
        Return String.Empty
      Else
        Return CuartoDestino.Cto_descripcion
      End If
    End Get
  End Property
  Public ReadOnly Property TipoMovimientoStr() As String
    Get
      Return Enumerados.TipoMovBloqueList.RetornarDescripcion(CInt(Blm_tipo))
    End Get
  End Property
#End Region

#Region "Constructores de la clase"
  Private Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    EsNuevo = _nuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _bloque As Bloque, ByVal _blm_secuencia As Integer, ByVal _Nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If
    OperadorDatos = _OperadorDatos
    mBlm_secuencia = _blm_secuencia
    Bloque = _bloque
    EsNuevo = _Nuevo
    If Not _Nuevo Then
      If Not Me.Recargar Then
        Throw New Exception("El objeto no puede ser cargado")
      End If
    End If
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Bloque As Bloque)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    Bloque = _Bloque
    EsNuevo = True
  End Sub
#End Region

#Region "Implementación de los métodos de persistencia"
  Public Function Recargar() As Boolean
    Dim dsResult As New DataSet
    Dim bResult As Boolean

    With OperadorDatos
      .AgregarParametro("@accion", "C")
      .AgregarParametro("@Blo_codigo", mBlo_codigo)
      .AgregarParametro("@Zaf_codigo", mZaf_codigo)
      .AgregarParametro("@Blm_secuencia", mBlm_secuencia)
      .Procedimiento = _Procedimiento
      bResult = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bResult AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      Me.MapearDataRowaObjeto(dsResult.Tables(0).Rows(0))
      Return True
    Else
      Return False
    End If
  End Function
#End Region

#Region "Métodos internos de la clase"
  Private Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    mBlo_codigo = CInt(Fila("Blo_codigo"))
    mZaf_codigo = CStr(Fila("Zaf_codigo"))
    mBloque = Nothing
    mBlm_secuencia = CInt(Fila("Blm_secuencia"))
    mBlm_tipo = Enumerados.TipoMovBloqueList.RetornarNumero(CStr(Fila("Blm_tipo")))
    mBlm_fecha = CDate(Fila("Blm_fecha"))
    mCuarto = Nothing
    mCto_codigo = CStr(Fila("Cto_codigo"))
    mBlm_numcajas = CInt(Fila("Blm_numcajas"))
    mBlm_libras = CDec(Fila("Blm_libras"))
    mCuartoDestino = Nothing
    Dim obj As Object
    obj = Fila("Cto_destino")
    If TypeOf obj Is DBNull Then
      mCto_destino = String.Empty
    Else
      mCto_destino = CStr(obj)
    End If
  End Sub

  Public Function Guardar() As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    Dim sAccion As String = String.Empty
    If EsNuevo Then
      sAccion = "I"
    Else
      sAccion = "M"
    End If
    With OperadorDatos
      .AgregarParametro("@accion", sAccion)
      .AgregarParametro("@Blo_codigo", mBlo_codigo)
      .AgregarParametro("@Zaf_codigo", mZaf_codigo)
      .AgregarParametro("@Blm_secuencia", mBlm_secuencia)
      .AgregarParametro("@Blm_tipo", Enumerados.TipoMovBloqueList.RetornarCaracter(CInt(mBlm_tipo)))
      .AgregarParametro("@Blm_fecha", mBlm_fecha)
      .AgregarParametro("@Cto_codigo", mCto_codigo)
      .AgregarParametro("@Blm_numcajas", mBlm_numcajas)
      .AgregarParametro("@Blm_libras", mBlm_libras)
      If mBlm_tipo = Enumerados.TipoMovBloque.Transferencia Then
        .AgregarParametro("@Cto_destino", mCto_destino)
      End If
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      If bReturn Then
        EsNuevo = False
      End If
      .LimpiarParametros()
    End With
    Return bReturn
  End Function

  Public Function Eliminar() As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    With OperadorDatos
      .AgregarParametro("@accion", "E")
      .AgregarParametro("@Blo_codigo", mBlo_codigo)
      .AgregarParametro("@Zaf_codigo", mZaf_codigo)
      .AgregarParametro("@Blm_secuencia", mBlm_secuencia)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    Return bReturn
  End Function
#End Region

#Region "Métodos compartidos"
  Public Shared Function RetornarBloqueMovsFiltro(ByVal _OperadorDatos As OperadorDatos, ByVal _bloque As Bloque) As BloqueMovCollection
    Dim oResult As New BloqueMovCollection
    Dim bReturn As Boolean
    Dim dsResult As New DataSet
    Dim _zafra As ZafraSiembra = _bloque.Zafra()
    With _OperadorDatos
      .AgregarParametro("@accion", "F")
      .AgregarParametro("@blo_codigo", _bloque.Blo_codigo)
      .AgregarParametro("@zaf_codigo", _zafra.Zaf_codigo)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Tables(0).Rows
        Dim _obj As New BloqueMov(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function
  'Public Shared Function RetornarDataGridStyle(ByVal _op As OperadorDatos, ByVal _dg As DataGrid, ByVal _ReadOnly As Boolean) As DataGridTableStyle
  '  Dim TS As New DataGridTableStyle
  '  If _dg.DataSource Is Nothing Then
  '    Return TS
  '    Exit Function
  '  End If
  '  TS.MappingName = _dg.DataSource.GetType.Name

  '  Dim TC As New DataGridTextBoxColumn
  '  TC.MappingName = "TipoMovimientoStr"
  '  TC.HeaderText = "Tipo Movimiento"
  '  TC.Width = 85
  '  TC.TextBox.TextAlign = HorizontalAlignment.Left
  '  TC.ReadOnly = _ReadOnly
  '  TS.GridColumnStyles.Add(TC)

  '  TC = New DataGridTextBoxColumn
  '  TC.MappingName = "Blm_fecha"
  '  TC.HeaderText = "Fecha"
  '  TC.Width = 90
  '  TC.Format = "d"
  '  TC.TextBox.TextAlign = HorizontalAlignment.Left
  '  TC.ReadOnly = _ReadOnly
  '  TS.GridColumnStyles.Add(TC)

  '  TC = New DataGridTextBoxColumn
  '  TC.MappingName = "CuartoOrigenStr"
  '  TC.HeaderText = "Cuarto"
  '  TC.Width = 100
  '  TC.TextBox.TextAlign = HorizontalAlignment.Left
  '  TC.ReadOnly = _ReadOnly
  '  TS.GridColumnStyles.Add(TC)

  '  TC = New DataGridTextBoxColumn
  '  TC.MappingName = "Blm_numcajas"
  '  TC.HeaderText = "Cajas"
  '  TC.Width = 50
  '  TC.Format = "#"
  '  TC.Alignment = HorizontalAlignment.Right
  '  TC.ReadOnly = _ReadOnly
  '  TS.GridColumnStyles.Add(TC)

  '  TC = New DataGridTextBoxColumn
  '  TC.MappingName = "Blm_libras"
  '  TC.HeaderText = "Libras"
  '  TC.Width = 50
  '  TC.Format = "#.##"
  '  TC.Alignment = HorizontalAlignment.Right
  '  TC.ReadOnly = _ReadOnly
  '  TS.GridColumnStyles.Add(TC)

  '  TC = New DataGridTextBoxColumn
  '  TC.MappingName = "CuartoDestinoStr"
  '  TC.HeaderText = "Cuarto Destino"
  '  TC.Width = 100
  '  TC.Alignment = HorizontalAlignment.Left
  '  TC.ReadOnly = _ReadOnly
  '  TS.GridColumnStyles.Add(TC)

  '  Return TS
  'End Function

#End Region
End Class

Public Class BloqueMovCollection
  Inherits System.ComponentModel.BindingList(Of BloqueMov)
	Public Sub New()
	End Sub

End Class
