'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas

Public Class Terreno

#Region "Campos constantes"
  Private Const _Procedimiento As String = "proc_Terreno"
#End Region
#Region "Campos variables"
  Private mhacienda As Hacienda = Nothing
  Private mPropietario As Propietario = Nothing
#End Region
#Region "Propiedades públicas de la clase"
  Public Property Hacienda() As hacienda
    Get
      If mhacienda Is Nothing AndAlso Not mhac_codigo = String.Empty Then
        mhacienda = New Hacienda(OperadorDatos, Me.mhac_codigo, False)
      End If
      Return mhacienda
    End Get
    Set(ByVal Value As hacienda)
      If Value Is Nothing Then
        Throw New ArgumentNullException("No se pudo enlazar hacienda ")
      End If
      Me.mhacienda = Value
      Me.mhac_codigo = Value.Hac_codigo
    End Set
  End Property
  Public Property Propietario() As Propietario
    Get
      If mPropietario Is Nothing And Not mPro_codigo = String.Empty Then
        mPropietario = New Propietario(OperadorDatos, Me.mPro_codigo, False)
      End If
      Return mPropietario
    End Get
    Set(ByVal Value As Propietario)
      If Value Is Nothing Then
        Throw New ArgumentNullException("No se pudo enlazar Propietario")
      End If
      Me.mPropietario = Value
      Me.mPro_codigo = Value.Pro_codigo
    End Set
  End Property
#End Region

#Region "Constructores de la clase"
  Private Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    EsNuevo = _nuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Trr_codigo As String, ByVal _Nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    Trr_codigo = _Trr_codigo
    EsNuevo = _Nuevo
    If Not _Nuevo Then
      If Not Me.Recargar Then
        Throw New Exception("El objeto no puede ser cargado")
      End If
    End If
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Trr_codigo As String, ByVal _hacienda As Hacienda)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    Me.hacienda = _hacienda
    EsNuevo = True
  End Sub
  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Trr_nombre As String)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    Me.Trr_nombre = _Trr_nombre
    EsNuevo = True
  End Sub
#End Region

#Region "Implementación de los métodos de persistencia"
  Public Function Recargar() As Boolean
    Dim dsResult As New DataSet
    Dim bResult As Boolean

    With OperadorDatos
      .AgregarParametro("@accion", "C")
      .AgregarParametro("@Trr_codigo", Me.Trr_codigo)
      .Procedimiento = _Procedimiento
      bResult = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bResult AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      Me.MapearDataRowaObjeto(dsResult.Tables(0).Rows(0))
      Return True
    Else
      Return False
    End If
  End Function
#End Region

#Region "Métodos internos de la clase"
  Private Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Me.mhacienda = Nothing
    Me.mPropietario = Nothing
    Me.mTrr_codigo = CStr(Fila("Trr_codigo"))
    Me.mTrr_nombre = CStr(Fila("Trr_nombre"))
    Me.mtrr_areaT = CDec(Fila("Trr_areat"))
    Me.mtrr_areaU = CDec(Fila("Trr_areau"))
    Me.mhac_codigo = CStr(Fila("hac_codigo"))
    Me.mPro_codigo = CStr(Fila("pro_codigo"))
  End Sub

  Public Function Guardar() As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    Dim sAccion As String = String.Empty
    If esNuevo Then
      sAccion = "I"
    Else
      sAccion = "M"
    End If
    With OperadorDatos
      .AgregarParametro("@accion", sAccion)
      .AgregarParametro("@Trr_codigo", Me.Trr_codigo)
      .AgregarParametro("@Trr_nombre", Me.Trr_nombre)
      .AgregarParametro("@hac_codigo", Me.mhac_codigo)
      .AgregarParametro("@pro_codigo", Me.mPro_codigo)
      .AgregarParametro("@Trr_areaT", Me.mtrr_areaT)
      .AgregarParametro("@Trr_areaU", Me.mtrr_areaU)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      If bReturn Then
        EsNuevo = False
      End If
      .LimpiarParametros()
    End With
    Return bReturn
  End Function

  Public Function Eliminar() As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    With OperadorDatos
      .AgregarParametro("@accion", "E")
      .AgregarParametro("@Trr_codigo", Me.Trr_codigo)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    Return bReturn
  End Function
#End Region

#Region "Métodos compartidos"
  Public Shared Function RetornarTerrenos(ByVal _OperadorDatos As OperadorDatos, Optional ByVal _hacienda As hacienda = Nothing) As TerrenoCollection
    Dim oResult As New TerrenoCollection
    Dim bReturn As Boolean
    Dim dsResult As New DataSet
    With _OperadorDatos
      If _hacienda Is Nothing Then
        .AgregarParametro("@accion", "G")
      Else
        .AgregarParametro("@accion", "F")
        .AgregarParametro("@hac_codigo", _hacienda.Hac_codigo)
      End If
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Tables(0).Rows
        Dim _trr As New Terreno(_OperadorDatos, False)
        _trr.MapearDataRowaObjeto(_dr)
        oResult.Add(_trr)
      Next
    End If
    Return oResult
  End Function
#End Region
End Class

Public Class TerrenoCollection
  Inherits System.ComponentModel.BindingList(Of Terreno)
  Public Sub New()
  End Sub

End Class
