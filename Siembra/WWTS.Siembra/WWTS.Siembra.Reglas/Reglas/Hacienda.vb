'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas

Public Class Hacienda

#Region "Campos constantes"
  Private Const _Procedimiento As String = "proc_Hacienda"
#End Region

#Region "Campos variables"
  Private mParroquia As WWTSParametroDet = Nothing
#End Region

#Region "Propiedades públicas de la clase"
  Public Property Parroquia() As WWTSParametroDet
    Get
      If mParroquia Is Nothing And Pardet_Parroquia > 0 Then
        mParroquia = New WWTSParametroDet(OperadorDatos, Parame_Parroquia, Pardet_Parroquia)
      End If
      Return mParroquia
    End Get
    Set(ByVal Value As WWTSParametroDet)
      If Value Is Nothing Then
        Throw New ArgumentNullException("No se pudo enlazar Parroquia")
      End If
      Me.mParroquia = Value
      Parame_Parroquia = Value.Parame_Codigo
      Pardet_Parroquia = Value.Pardet_Secuencia
    End Set
  End Property
#End Region

#Region "Constructores de la clase"
  Private Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    EsNuevo = _nuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Hac_codigo As String, ByVal _Nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    If _Hac_codigo.Trim = String.Empty Then
      Throw New ArgumentOutOfRangeException("Hac_codigo", "El código del país debe ser válido")
    End If

    Me.mHac_codigo = _Hac_codigo
    EsNuevo = _Nuevo
    If Not _Nuevo Then
      If Not Me.Recargar Then
        Throw New Exception("El objeto no puede ser cargado")
      End If
    End If
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Hac_nombre As String)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    Me.Hac_nombre = _Hac_nombre
    EsNuevo = True
  End Sub
#End Region

#Region "Implementación de los métodos de persistencia"
  Public Function Recargar() As Boolean
    Dim dsResult As New DataSet
    Dim bResult As Boolean

    With OperadorDatos
      .AgregarParametro("@accion", "C")
      .AgregarParametro("@Hac_codigo", Me.mHac_codigo)
      .Procedimiento = _Procedimiento
      bResult = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bResult AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      Me.MapearDataRowaObjeto(dsResult.Tables(0).Rows(0))
      Return True
    Else
      Return False
    End If
  End Function
#End Region

#Region "Métodos internos de la clase"
  Private Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Me.mHac_codigo = CStr(Fila("Hac_codigo"))
    Me.mHac_nombre = CStr(Fila("Hac_nombre"))
    Me.mHac_sufijo = CStr(Fila("Hac_sufijo"))
    mParame_Parroquia = CInt(Fila("Parame_Parroquia"))
    mPardet_Parroquia = CInt(Fila("Pardet_Parroquia"))
    mParroquia = Nothing
  End Sub

  Public Function Guardar() As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    Dim sAccion As String = String.Empty
    If EsNuevo Then
      sAccion = "I"
    Else
      sAccion = "M"
    End If
    With OperadorDatos
      .AgregarParametro("@accion", sAccion)
      .AgregarParametro("@Hac_codigo", Me.mHac_codigo)
      .AgregarParametro("@Hac_nombre", Me.mHac_nombre)
      .AgregarParametro("@Hac_sufijo", Me.mHac_sufijo)
      .AgregarParametro("@Parame_Parroquia", Me.mParame_Parroquia)
      .AgregarParametro("@Pardet_Parroquia", Me.mPardet_Parroquia)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      If bReturn Then
        EsNuevo = False
      End If
      .LimpiarParametros()
    End With
    Return bReturn
  End Function

  Public Function Eliminar() As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    With OperadorDatos
      .AgregarParametro("@accion", "E")
      .AgregarParametro("@Hac_codigo", Me.mHac_codigo)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    Return bReturn
  End Function
#End Region

#Region "Métodos compartidos"
  Public Shared Function RetornarHaciendas(ByVal _OperadorDatos As OperadorDatos) As HaciendaCollection
    Dim oResult As New HaciendaCollection
    Dim bReturn As Boolean
    Dim dsResult As New DataSet
    With _OperadorDatos
      .AgregarParametro("@accion", "G")
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Tables(0).Rows
        Dim _obj As New Hacienda(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function
#End Region
End Class

Public Class HaciendaCollection
  Inherits System.ComponentModel.BindingList(Of Hacienda)
	Public Sub New()
	End Sub
End Class
