'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas


Public Class Horno

#Region "Campos constantes"
  Private Const _Procedimiento As String = "proc_Horno"
#End Region

#Region "Campos variables"
  Private mTerreno As Terreno = Nothing
#End Region

#Region "Propiedades públicas de la clase"
  Public Property Terreno() As Terreno
    Get
      If mTerreno Is Nothing And Not mTrr_codigo = String.Empty Then
        mTerreno = New Terreno(OperadorDatos, Me.mTrr_codigo, False)
      End If
      Return mTerreno
    End Get
    Set(ByVal Value As Terreno)
      If Value Is Nothing Then
        Throw New ArgumentNullException("No se pudo enlazar Terreno")
      End If
      Me.mTerreno = Value
      Me.mTrr_codigo = Value.Trr_codigo
    End Set
  End Property
#End Region

#Region "Constructores de la clase"
  Private Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    EsNuevo = _nuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Hor_codigo As String, ByVal _Nuevo As Boolean)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    If _Hor_codigo.Trim = String.Empty Then
      Throw New ArgumentOutOfRangeException("Hor_codigo", "El código del país debe ser válido")
    End If

    Me.mHor_codigo = _Hor_codigo
    EsNuevo = _Nuevo
    If Not _Nuevo Then
      If Not Me.Recargar Then
        Throw New Exception("El objeto no puede ser cargado")
      End If
    End If
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Hor_descripcion As String, ByVal _Terreno As Terreno)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos
    Me.Hor_descripcion = _Hor_descripcion
    Me.Terreno = _Terreno
    EsNuevo = True
  End Sub
#End Region

#Region "Implementación de los métodos de persistencia"
  Public Function Recargar() As Boolean
    Dim dsResult As New DataSet
    Dim bResult As Boolean

    With OperadorDatos
      .AgregarParametro("@accion", "C")
      .AgregarParametro("@Hor_codigo", Me.mHor_codigo)
      .Procedimiento = _Procedimiento
      bResult = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bResult AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      Me.MapearDataRowaObjeto(dsResult.Tables(0).Rows(0))
      Return True
    Else
      Return False
    End If
  End Function
#End Region

#Region "Métodos internos de la clase"
  Private Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Me.mHor_codigo = CStr(Fila("Hor_codigo"))
    Me.mHor_descripcion = CStr(Fila("Hor_descripcion"))
    Me.mTerreno = Nothing
    Me.mTrr_codigo = CStr(Fila("trr_codigo"))
    Me.mHor_numaposento = CInt(Fila("Hor_numaposento"))
    Me.mHor_cujes = CInt(Fila("Hor_cujes"))
  End Sub

  Public Function Guardar() As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    Dim sAccion As String = String.Empty
    If esNuevo Then
      sAccion = "I"
    Else
      sAccion = "M"
    End If
    With OperadorDatos
      .AgregarParametro("@accion", sAccion)
      .AgregarParametro("@Hor_codigo", Me.mHor_codigo)
      .AgregarParametro("@Hor_descripcion", Me.mHor_descripcion)
      .AgregarParametro("@Hor_numaposento", Me.mHor_numaposento)
      .AgregarParametro("@Hor_cujes", Me.mHor_cujes)
      .AgregarParametro("@Trr_codigo", Me.mTrr_codigo)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      If bReturn Then
        EsNuevo = False
      End If
      .LimpiarParametros()
    End With
    Return bReturn
  End Function

  Public Function Eliminar() As Boolean
    Dim dsResult As New DataSet
    Dim bReturn As Boolean
    With OperadorDatos
      .AgregarParametro("@accion", "E")
      .AgregarParametro("@Hor_codigo", Me.mHor_codigo)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    Return bReturn
  End Function
#End Region

#Region "Métodos compartidos"
  Public Shared Function RetornarHornos(ByVal _OperadorDatos As OperadorDatos, Optional ByVal _Terreno As Terreno = Nothing) As HornoCollection
    Dim oResult As New HornoCollection
    Dim bReturn As Boolean
    Dim dsResult As New DataSet
    With _OperadorDatos
      If _Terreno Is Nothing Then
        .AgregarParametro("@accion", "G")
      Else
        .AgregarParametro("@accion", "F")
        .AgregarParametro("@Trr_codigo", _Terreno.Trr_codigo)
      End If
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Tables(0).Rows
        Dim _obj As New Horno(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function
#End Region
End Class

Public Class HornoCollection
  Inherits System.ComponentModel.BindingList(Of Horno)
  Public Sub New()
  End Sub

End Class