
'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas

Public Class CuracionCortes

#Region "Campos constantes"
    Private Const _Procedimiento As String = "proc_CuracionCortes"
#End Region

#Region "Campos variables"
    Private mCuracion As Curacion = Nothing
    Private mEnsarteZafadura As EnsarteZafadura = Nothing
#End Region

#Region "Propiedades públicas de la clase"
    Public Property Curacion() As Curacion
        Get
            If mCuracion Is Nothing And Not mCur_numero = 0 Then
                mCuracion = New Curacion(OperadorDatos, mCur_numero, False)
            End If
            Return mCuracion
        End Get
        Set(ByVal Value As Curacion)
            If Value Is Nothing Then
                Throw New Exception("No se puede enlazar Curacion")
            End If
            mCuracion = Value
            mCur_numero = Value.Cur_numero
        End Set
    End Property

    Public Property EnsarteZafadura() As EnsarteZafadura
        Get
            If mEnsarteZafadura Is Nothing And Not mEns_numero = 0 Then
                mEnsarteZafadura = New EnsarteZafadura(OperadorDatos, mEns_numero, False)
            End If
            Return mEnsarteZafadura
        End Get
        Set(ByVal Value As EnsarteZafadura)
            If Value Is Nothing Then
                Throw New Exception("No se puede enlazar EnsarteZafadura")
            End If
            mEnsarteZafadura = Value
            mEns_numero = Value.Ens_numero
        End Set
    End Property

    <Infoware.Reportes.CampoReporteAtributo("Tarjeta", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Numero, 80, True)>
    Public Property Tarjeta() As Integer
        Get
            Return Ens_numero
        End Get
        Set(ByVal value As Integer)
            Ens_numero = value
            EsModificado = True
        End Set
    End Property

    <Infoware.Reportes.CampoReporteAtributo("Cujes", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Numero, 80, True)>
    Public Property Cujes() As Integer
        Get
            Return Curcorte_cujes
        End Get
        Set(ByVal value As Integer)
            Curcorte_cujes = value
            EsModificado = True
        End Set
    End Property

    <Infoware.Reportes.CampoReporteAtributo("Corte", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Numero, 150, True)>
    Public ReadOnly Property Corte() As String
        Get
            If EnsarteZafadura Is Nothing Then
                Return ""
            Else
                Return EnsarteZafadura.Corte.Cor_nombre
            End If
        End Get
    End Property
#End Region

#Region "Constructores de la clase"
    Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _nuevo As Boolean)
        If _OperadorDatos Is Nothing Then
            Throw New InvalidOperationException("El operador de datos es nulo")
        End If

        OperadorDatos = _OperadorDatos
        EsNuevo = _nuevo
    End Sub

    Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Curacion As Curacion, _Curcorte_secuencia As Integer, ByVal _Nuevo As Boolean)
        If _OperadorDatos Is Nothing Then
            Throw New InvalidOperationException("El operador de datos es nulo")
        End If
        OperadorDatos = _OperadorDatos
        Curacion = _Curacion
        Curcorte_secuencia = _Curcorte_secuencia
        EsNuevo = _Nuevo
        If Not _Nuevo Then
            If Not Me.Recargar Then
                Throw New Exception("El objeto no puede ser cargado")
            End If
        End If
    End Sub

    Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Cur_numero As Integer)
        If _OperadorDatos Is Nothing Then
            Throw New InvalidOperationException("El operador de datos es nulo")
        End If

        OperadorDatos = _OperadorDatos
        mCur_numero = _Cur_numero
        EsNuevo = True
    End Sub
#End Region

#Region "Implementación de los métodos de persistencia"
    Public Function Recargar() As Boolean
        Dim dsResult As New DataSet
        Dim bResult As Boolean

        With OperadorDatos
            .AgregarParametro("@accion", "C")
            .AgregarParametro("@Cur_numero", mCur_numero)
            .AgregarParametro("@Curcorte_secuencia", mCurcorte_secuencia)
            .Procedimiento = _Procedimiento
            bResult = .Ejecutar(dsResult)
            .LimpiarParametros()
        End With
        If bResult AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
            Me.MapearDataRowaObjeto(dsResult.Tables(0).Rows(0))
            Return True
        Else
            Return False
        End If
    End Function
#End Region

#Region "Métodos internos de la clase"
    Private Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
        mCur_numero = CInt(Fila("Cur_numero"))
        mCuracion = Nothing
        mCurcorte_secuencia = CInt(Fila("Curcorte_secuencia"))
        mCurcorte_cujes = CInt(Fila("Curcorte_cujes"))
        mEns_numero = CInt(Fila("Ens_numero"))
        mEnsarteZafadura = Nothing
    End Sub

    Public Function Guardar() As Boolean
        Dim dsResult As New DataSet
        Dim bReturn As Boolean
        Dim sAccion As String = String.Empty
        If EsNuevo Then
            sAccion = "I"
        Else
            sAccion = "M"
        End If
        With OperadorDatos
            .AgregarParametro("@accion", sAccion)
            .AgregarParametro("@Cur_numero", mCur_numero)
            .AgregarParametro("@Curcorte_secuencia", mCurcorte_secuencia)
            .AgregarParametro("@Curcorte_cujes", mCurcorte_cujes)
            .AgregarParametro("@Ens_numero", mEns_numero)
            .Procedimiento = _Procedimiento
            bReturn = .Ejecutar(dsResult)
            .LimpiarParametros()
            If bReturn Then
                Me.mCurcorte_secuencia = CInt(dsResult.Tables(0).Rows(0)(0))
                If Not OperadorDatos.EstaenTransaccion Then
                    AceptarCambios()
                End If
            End If
        End With
        Return bReturn
    End Function

    Public Overridable Sub AceptarCambios()
        EsNuevo = False
        EsModificado = False
    End Sub

    Public Function Eliminar() As Boolean
        Dim dsResult As New DataSet
        Dim bReturn As Boolean
        With OperadorDatos
            .AgregarParametro("@accion", "E")
            .AgregarParametro("@Cur_numero", mCur_numero)
            .AgregarParametro("@Curcorte_secuencia", mCurcorte_secuencia)
            .Procedimiento = _Procedimiento
            bReturn = .Ejecutar(dsResult)
            .LimpiarParametros()
        End With
        Return bReturn
    End Function
#End Region

#Region "Métodos compartidos"
    Public Shared Function RetornarCuracionCortesFiltro(ByVal _OperadorDatos As OperadorDatos, _Cur_numero As Integer) As CuracionCortesCollection
        Dim oResult As New CuracionCortesCollection
        Dim bReturn As Boolean
        Dim dsResult As New DataSet

        With _OperadorDatos
            .AgregarParametro("@accion", "F")
            .AgregarParametro("@Cur_numero", _Cur_numero)
            .Procedimiento = _Procedimiento
            bReturn = .Ejecutar(dsResult)
            .LimpiarParametros()
        End With
        If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
            For Each _dr As DataRow In dsResult.Tables(0).Rows
                Dim _obj As New CuracionCortes(_OperadorDatos, False)
                _obj.MapearDataRowaObjeto(_dr)
                oResult.Add(_obj)
            Next
        End If
        Return oResult
    End Function

#End Region
End Class

Public Class CuracionCortesCollection
    Inherits System.ComponentModel.BindingList(Of CuracionCortes)
    Public Sub New()
	End Sub

End Class
