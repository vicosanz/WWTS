'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas

Public Class Metereologia

#Region "Campos constantes"
    Private Const _Procedimiento As String = "proc_Metereologia"
#End Region

#Region "Campos variables"
    Private mTerreno As Terreno = Nothing
#End Region

#Region "Propiedades públicas de la clase"
    Public Property Terreno() As Terreno
        Get
            If mTerreno Is Nothing And Not mtrr_codigo = "" Then
                mTerreno = New Terreno(OperadorDatos, mtrr_codigo, False)
            End If
            Return mTerreno
        End Get
        Set(ByVal Value As Terreno)
            If Value Is Nothing Then
                Throw New Exception("No se puede enlazar Terreno")
            End If
            mTerreno = Value
            mtrr_codigo = Value.Trr_codigo
        End Set
    End Property

    <Infoware.Reportes.CampoReporteAtributo("Fecha", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Fecha, 100, True)>
    Public ReadOnly Property Fecha() As Date
        Get
            Return met_Fecha
        End Get
    End Property

    <Infoware.Reportes.CampoReporteAtributo("Hora", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 80, True)>
    Public ReadOnly Property Hora() As String
        Get
            Dim _hora As Integer = met_hora
            Dim _ampm As String = "AM"
            If (_hora >= 12 And _hora < 24) Then
                _ampm = "PM"
            End If
            If (_hora >= 13) Then
                _hora -= 12
            End If

            Return $"{_hora}:00 {_ampm}"
        End Get
    End Property

    <Infoware.Reportes.CampoReporteAtributo("Precipitación mm", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Decimales, 100, True)>
    Public Property Precipitacion() As Double
        Get
            Return met_precipitacionmm
        End Get
        Set(ByVal value As Double)
            met_precipitacionmm = value
            EsModificado = True
        End Set
    End Property

    <Infoware.Reportes.CampoReporteAtributo("Temperatura °C", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Decimales, 100, True)>
    Public Property Temperatura() As Double
        Get
            Return met_temperaturac
        End Get
        Set(ByVal value As Double)
            met_temperaturac = value
            EsModificado = True
        End Set
    End Property

    <Infoware.Reportes.CampoReporteAtributo("% Humedad", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Decimales, 100, True)>
    Public Property Humedad() As Double
        Get
            Return met_humedadporc
        End Get
        Set(ByVal value As Double)
            met_humedadporc = value
            EsModificado = True
        End Set
    End Property
#End Region

#Region "Constructores de la clase"
    Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _nuevo As Boolean)
        If _OperadorDatos Is Nothing Then
            Throw New InvalidOperationException("El operador de datos es nulo")
        End If

        OperadorDatos = _OperadorDatos
        EsNuevo = _nuevo
    End Sub

    Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _terreno As Terreno, ByVal _met_Fecha As DateTime, _met_hora As Integer, ByVal _Nuevo As Boolean)
        If _OperadorDatos Is Nothing Then
            Throw New InvalidOperationException("El operador de datos es nulo")
        End If
        OperadorDatos = _OperadorDatos
        Terreno = _terreno
        met_Fecha = _met_Fecha
        met_hora = _met_hora
        EsNuevo = _Nuevo
        If Not _Nuevo Then
            If Not Me.Recargar Then
                Throw New Exception("El objeto no puede ser cargado")
            End If
        End If
    End Sub
#End Region

#Region "Implementación de los métodos de persistencia"
    Public Function Recargar() As Boolean
        Dim dsResult As New DataSet
        Dim bResult As Boolean

        With OperadorDatos
            .AgregarParametro("@accion", "C")
            .AgregarParametro("@trr_codigo", mtrr_codigo)
            .AgregarParametro("@met_Fecha", mmet_Fecha)
            .AgregarParametro("@met_hora", mmet_hora)
            .Procedimiento = _Procedimiento
            bResult = .Ejecutar(dsResult)
            .LimpiarParametros()
        End With
        If bResult AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
            Me.MapearDataRowaObjeto(dsResult.Tables(0).Rows(0))
            Return True
        Else
            Return False
        End If
    End Function
#End Region

#Region "Métodos internos de la clase"
    Private Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
        mtrr_codigo = CStr(Fila("trr_codigo"))
        mmet_Fecha = CDate(Fila("met_Fecha"))
        mmet_hora = CInt(Fila("met_hora"))
        mmet_precipitacionmm = CDbl(Fila("met_precipitacionmm"))
        mmet_temperaturac = CDbl(Fila("met_temperaturac"))
        mmet_humedadporc = CDbl(Fila("met_humedadporc"))
    End Sub

    Public Function Guardar() As Boolean
        Dim dsResult As New DataSet
        Dim bReturn As Boolean

        Dim sAccion As String = String.Empty
        If EsNuevo Then
            sAccion = "I"
        Else
            sAccion = "M"
        End If
        With OperadorDatos
            .AgregarParametro("@accion", sAccion)
            .AgregarParametro("@trr_codigo", mtrr_codigo)
            .AgregarParametro("@met_Fecha", mmet_Fecha)
            .AgregarParametro("@met_hora", mmet_hora)
            .AgregarParametro("@met_precipitacionmm", mmet_precipitacionmm)
            .AgregarParametro("@met_temperaturac", mmet_temperaturac)
            .AgregarParametro("@met_humedadporc", mmet_humedadporc)
            .Procedimiento = _Procedimiento
            bReturn = .Ejecutar(dsResult)
            .LimpiarParametros()
            If bReturn Then
                If Not OperadorDatos.EstaenTransaccion Then
                    EsNuevo = False
                    EsModificado = False
                End If
            End If
        End With
        Return bReturn
    End Function

    Public Function Eliminar() As Boolean
        Dim dsResult As New DataSet
        Dim bReturn As Boolean
        With OperadorDatos
            .AgregarParametro("@accion", "E")
            .AgregarParametro("@trr_codigo", mtrr_codigo)
            .AgregarParametro("@met_Fecha", mmet_Fecha)
            .AgregarParametro("@met_hora", mmet_hora)
            .Procedimiento = _Procedimiento
            bReturn = .Ejecutar(dsResult)
            .LimpiarParametros()
        End With
        Return bReturn
    End Function
#End Region

#Region "Métodos compartidos"
    Public Shared Function RetornarMetereologiaFiltro(ByVal _OperadorDatos As OperadorDatos, ByVal _terreno As Terreno, ByVal _fecha As Date) As MetereologiaCollection
        Dim oResult As New MetereologiaCollection
        Dim bReturn As Boolean
        Dim dsResult As New DataSet

        With _OperadorDatos
            .AgregarParametro("@accion", "F")
            .AgregarParametro("@trr_codigo", _terreno.Trr_codigo)
            .AgregarParametro("@met_Fecha", _fecha)
            .Procedimiento = _Procedimiento
            bReturn = .Ejecutar(dsResult)
            .LimpiarParametros()
        End With
        If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Tables.Count > 0 AndAlso dsResult.Tables(0).Rows.Count > 0 Then
            For Each _dr As DataRow In dsResult.Tables(0).Rows
                Dim _obj As New Metereologia(_OperadorDatos, False)
                _obj.MapearDataRowaObjeto(_dr)
                oResult.Add(_obj)
            Next
        End If
        Return oResult
    End Function
#End Region
End Class

Public Class MetereologiaCollection
    Inherits System.ComponentModel.BindingList(Of Metereologia)
    Public Sub New()
	End Sub

End Class
