'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3082
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports Infoware.Reglas.General
Imports WWTS.General.Reglas


#Region "PatronoxUsuario"
Public Class PatronoxUsuario

  Const _Procedimiento As String = "proc_PatronoxUsuario"

  Private mUsuario As WWTSUsuario = Nothing

  Private mPatrono As Patrono = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Usuari_Codigo As String, ByVal _Patron_Codigo As Integer)
    Me.New(_OperadorDatos, False)
    Usuari_Codigo = _Usuari_Codigo
    Patron_Codigo = _Patron_Codigo
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto PatronoxUsuario")
    End If
  End Sub

  'Usuario
  Public Overridable Property Usuario() As WWTSUsuario
    Get
      If mUsuario Is Nothing AndAlso Usuari_Codigo > 0 Then
        mUsuario = New WWTSUsuario(OperadorDatos, Usuari_Codigo)
      End If
      Return Me.mUsuario
    End Get
    Set(ByVal value As WWTSUsuario)
      Me.mUsuario = value
      Usuari_Codigo = value.Usuari_Codigo
    End Set
  End Property

  'Parametrodet
  Public Overridable Overloads Property Patrono() As Patrono
    Get
      If mPatrono Is Nothing AndAlso Patron_Codigo > 0 Then
        mPatrono = New Patrono(OperadorDatos, Patron_Codigo)
      End If
      Return Me.mPatrono
    End Get
    Set(ByVal value As Patrono)
      Me.mPatrono = value
      Patron_Codigo = value.Patron_Codigo
    End Set
  End Property

  Public ReadOnly Property PatronoString() As String
    Get
      If Patrono Is Nothing Then
        Return String.Empty
      Else
        Return Patrono.NombreCompleto
      End If
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Usuari_Codigo = CType(Fila("Usuari_Codigo"), String)
    Patron_Codigo = CType(Fila("Patron_Codigo"), Integer)
    PatUsu_Activo = CType(Fila("PatUsu_Activo"), Boolean)
    mUsuario = Nothing
    mPatrono = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As System.Data.DataTable = New System.Data.DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Usuari_Codigo", Usuari_Codigo)
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Usuari_Codigo", Usuari_Codigo)
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.AgregarParametro("@PatUsu_Activo", PatUsu_Activo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If OperadorDatos.EstaenTransaccion Then
      Else
        Me.AceptarCambios()
      End If
    End If
    Return bReturn
  End Function

  Public Overridable Sub AceptarCambios()
    EsNuevo = False
    EsModificado = False
  End Sub

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Usuari_Codigo", Usuari_Codigo)
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "PatronoxUsuarioList"
Public Class PatronoxUsuarioList
  Inherits System.ComponentModel.BindingList(Of PatronoxUsuario)

  Public Shared Function ObtenerLista(ByVal _OperadorDatos As OperadorDatos, ByVal _Usuario As WWTSUsuario, ByVal _SoloActivos As Boolean, Optional ByVal _filtro As String = "") As PatronoxUsuarioList
    Dim oResult As PatronoxUsuarioList = New PatronoxUsuarioList
    Dim bReturn As Boolean
    Dim ds As New DataTable
    With _OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Usuari_Codigo", _Usuario.Usuari_Codigo)
      If _SoloActivos Then
        .AgregarParametro("@PatUsu_Activo", True)
      End If
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_PatronoxUsuario"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New PatronoxUsuario(_OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
