'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.832
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas

#Region "ImpuestoRenta"
Public Class ImpuestoRenta

  Const _Procedimiento As String = "proc_ImpuestoRenta"

  Private mPardetPais As WWTSParametroDet = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _PardetPais As WWTSParametroDet)
    Me.New(_OperadorDatos, True)
    PardetPais = _PardetPais
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Parame_Pais As Integer, ByVal _Pardet_Pais As Integer, ByVal _ImpRen_Secuencia As Integer)
    Me.New(_OperadorDatos, False)
    Parame_Pais = _Parame_Pais
    Pardet_Pais = _Pardet_Pais
    ImpRen_Secuencia = _ImpRen_Secuencia
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto ImpuestoRenta")
    End If
  End Sub

  'Parametrodet
  Public Overridable Property PardetPais() As WWTSParametroDet
    Get
      If mPardetPais Is Nothing AndAlso Pardet_Pais <> 0 Then
        mPardetPais = New WWTSParametroDet(OperadorDatos, Parame_Pais, Pardet_Pais)
      End If
      Return mPardetPais
    End Get
    Set(ByVal value As WWTSParametroDet)
      mPardetPais = value
      Parame_Pais = value.Parame_Codigo
      Pardet_Pais = value.Pardet_Secuencia
    End Set
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Parame_Pais = CType(Fila("Parame_Pais"), Integer)
    Pardet_Pais = CType(Fila("Pardet_Pais"), Integer)
    ImpRen_Secuencia = CType(Fila("ImpRen_Secuencia"), Integer)
    ImpRen_FechaDesde = CType(Fila("ImpRen_FechaDesde"), Date)
    ImpRen_FechaHasta = CType(Fila("ImpRen_FechaHasta"), Date)
    ImpRen_SueldoDesde = CType(Fila("ImpRen_SueldoDesde"), Decimal)
    ImpRen_SueldoHasta = CType(Fila("ImpRen_SueldoHasta"), Decimal)
    ImpRen_FraccionBasica = CType(Fila("ImpRen_FraccionBasica"), Decimal)
    ImpRen_PorcFraccionExcedente = CType(Fila("ImpRen_PorcFraccionExcedente"), Decimal)
    mPardetPais = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As New DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Parame_Pais", Parame_Pais)
    OperadorDatos.AgregarParametro("@Pardet_Pais", Pardet_Pais)
    OperadorDatos.AgregarParametro("@ImpRen_Secuencia", ImpRen_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Parame_Pais", Parame_Pais)
    OperadorDatos.AgregarParametro("@Pardet_Pais", Pardet_Pais)
    OperadorDatos.AgregarParametro("@ImpRen_Secuencia", ImpRen_Secuencia)
    OperadorDatos.AgregarParametro("@ImpRen_FechaDesde", ImpRen_FechaDesde)
    OperadorDatos.AgregarParametro("@ImpRen_FechaHasta", ImpRen_FechaHasta)
    OperadorDatos.AgregarParametro("@ImpRen_SueldoDesde", ImpRen_SueldoDesde)
    OperadorDatos.AgregarParametro("@ImpRen_SueldoHasta", ImpRen_SueldoHasta)
    OperadorDatos.AgregarParametro("@ImpRen_FraccionBasica", ImpRen_FraccionBasica)
    OperadorDatos.AgregarParametro("@ImpRen_PorcFraccionExcedente", ImpRen_PorcFraccionExcedente)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If OperadorDatos.EstaenTransaccion Then
      Else
        Me.AceptarCambios()
      End If
    End If
    Return bReturn
  End Function

  Public Overridable Sub AceptarCambios()
    EsNuevo = False
    EsModificado = False
  End Sub

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Parame_Pais", Parame_Pais)
    OperadorDatos.AgregarParametro("@Pardet_Pais", Pardet_Pais)
    OperadorDatos.AgregarParametro("@ImpRen_Secuencia", ImpRen_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "ImpuestoRentaList"
Public Class ImpuestoRentaList
  Inherits System.ComponentModel.BindingList(Of ImpuestoRenta)

  'Public Shared Function ObtenerLista(ByVal _Pais As WWTSParametroDet, ByVal _FechaActivo As DateTime) As ImpuestoRentaList
  Public Shared Function ObtenerLista(ByVal _Pais As WWTSParametroDet, ByVal _FechaActivo As Date) As ImpuestoRentaList
    Dim oResult As New ImpuestoRentaList
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    With _Pais.OperadorDatos
      .AgregarParametro("@accion", "F")
      .AgregarParametro("@Parame_Pais", _Pais.Parame_Codigo)
      .AgregarParametro("@Pardet_Pais", _Pais.Pardet_Secuencia)
      .AgregarParametro("@FechaActivo", _FechaActivo)
      .Procedimiento = "proc_ImpuestoRenta"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso dsResult IsNot Nothing AndAlso dsResult.Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Rows
        Dim _obj As New ImpuestoRenta(_Pais.OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function

  'Public Shared Function ObtenerLista(ByVal _Pais As WWTSParametroDet, ByVal _FechaActivo As DateTime, ByVal _fraccionbasica As Double) As ImpuestoRenta
  Public Shared Function ObtenerListaDividido12(ByVal _Pais As WWTSParametroDet, ByVal _FechaActivo As Date, ByVal _fraccionbasica As Double) As ImpuestoRenta
    Dim oResult As New ImpuestoRentaList
    oResult = ObtenerLista(_Pais, _FechaActivo)

    Dim result As ImpuestoRenta = Nothing
    Dim _desde As Double = 0
    For Each _paramir As ImpuestoRenta In oResult
      'If _fraccionbasica >= _paramir.ImpRen_SueldoDesde And _fraccionbasica < _paramir.ImpRen_SueldoHasta Then
      If _fraccionbasica >= (_paramir.ImpRen_SueldoDesde / 12) And _fraccionbasica < (_paramir.ImpRen_SueldoHasta / 12) Then
        result = _paramir
      End If
      _desde = _paramir.ImpRen_SueldoHasta
    Next
    Return result
  End Function

  Public Shared Function ObtenerLista(ByVal _Pais As WWTSParametroDet, ByVal _FechaActivo As Date, ByVal _fraccionbasica As Double) As ImpuestoRenta
    Dim oResult As New ImpuestoRentaList
    oResult = ObtenerLista(_Pais, _FechaActivo)

    Dim result As ImpuestoRenta = Nothing
    Dim _desde As Double = 0
    For Each _paramir As ImpuestoRenta In oResult
      If _fraccionbasica >= _paramir.ImpRen_SueldoDesde And _fraccionbasica < _paramir.ImpRen_SueldoHasta Then
        'If _fraccionbasica >= (_paramir.ImpRen_SueldoDesde / 12) And _fraccionbasica < (_paramir.ImpRen_SueldoHasta / 12) Then
        result = _paramir
      End If
      _desde = _paramir.ImpRen_SueldoHasta
    Next
    Return result
  End Function
End Class
#End Region
