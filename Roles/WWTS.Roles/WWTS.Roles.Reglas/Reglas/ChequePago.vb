'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas

#Region "ChequePago"
Public Class ChequePago

  Const _Procedimiento As String = "proc_ChequePago"

  Private mCuentabancaria As CuentaBancaria = Nothing

  Private mDetallelotepago As LotePagoVarioDetalle = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _CuentaBancaria As CuentaBancaria)
    Me.New(_OperadorDatos, True)
    Me.Cuentabancaria = _CuentaBancaria
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Empres_Codigo As Integer, ByVal _Parame_Banco As Integer, ByVal _Pardet_Banco As Integer, ByVal _CtaBan_Numero As String, ByVal _ChePag_Numero As Integer)
    Me.New(_OperadorDatos, False)
    Empres_Codigo = _Empres_Codigo
    Parame_Banco = _Parame_Banco
    Pardet_Banco = _Pardet_Banco
    CtaBan_Numero = _CtaBan_Numero
    ChePag_Numero = _ChePag_Numero
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto ChequePago")
    End If
  End Sub

  'Cuentabancaria
  Public Overridable Property Cuentabancaria() As CuentaBancaria
    Get
      If Me.mCuentabancaria Is Nothing AndAlso Pardet_Banco > 0 Then
        Me.mCuentabancaria = New CuentaBancaria(New Empresa(OperadorDatos, Empres_Codigo), New WWTSParametroDet(OperadorDatos, Parame_Banco, Pardet_Banco), CtaBan_Numero)
      End If
      Return Me.mCuentabancaria

    End Get
    Set(ByVal value As CuentaBancaria)
      Me.mCuentabancaria = value
      Empres_Codigo = value.Empres_Codigo
      Parame_Banco = value.Parame_Banco
      Pardet_Banco = value.Pardet_Banco
      CtaBan_Numero = value.CtaBan_Numero
    End Set
  End Property

  'Detallelotepago
  Public Overridable Property DetalleLotePago() As LotePagoVarioDetalle
    Get
      If Me.mDetallelotepago Is Nothing AndAlso DeLoPa_Secuencia > 0 Then
        Me.mDetallelotepago = New LotePagoVarioDetalle(OperadorDatos, LotPag_Codigo, DeLoPa_Secuencia)
      End If
      Return Me.mDetallelotepago

    End Get
    Set(ByVal value As LotePagoVarioDetalle)
      Me.mDetallelotepago = value
      LotPag_Codigo = value.LotPag_Secuencia
      DeLoPa_Secuencia = value.LoPaDe_Secuencia
    End Set
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Empres_Codigo = CType(Fila("Empres_Codigo"), Integer)
    Parame_Banco = CType(Fila("Parame_Banco"), Integer)
    Pardet_Banco = CType(Fila("Pardet_Banco"), Integer)
    CtaBan_Numero = CType(Fila("CtaBan_Numero"), String)
    ChePag_Numero = CType(Fila("ChePag_Numero"), Integer)
    LotPag_Codigo = CType(Fila("LotPag_Codigo"), Integer)
    DeLoPa_Secuencia = CType(Fila("DeLoPa_Secuencia"), Integer)
    ChePag_esAnulado = CType(Fila("ChePag_esAnulado"), Boolean)
    mCuentabancaria = Nothing
    mDetallelotepago = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As New DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Banco", Parame_Banco)
    OperadorDatos.AgregarParametro("@Pardet_Banco", Pardet_Banco)
    OperadorDatos.AgregarParametro("@CtaBan_Numero", CtaBan_Numero)
    OperadorDatos.AgregarParametro("@ChePag_Numero", ChePag_Numero)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Function Anular() As Boolean
    Dim dsResult As New DataTable
    Dim bReturn As Boolean
    With OperadorDatos
      .AgregarParametro("@accion", "M")
      .AgregarParametro("@CtaBan_Numero", CtaBan_Numero)
      .AgregarParametro("@Parame_Banco", Parame_Banco)
      .AgregarParametro("@Pardet_Banco", Pardet_Banco)
      .AgregarParametro("@ChePag_Numero", ChePag_Numero)
      .AgregarParametro("@LotPag_Codigo", LotPag_Codigo)
      .AgregarParametro("@DeLoPa_Secuencia", DeLoPa_Secuencia)
      .AgregarParametro("@Chv_anulado", True)
      .Procedimiento = _Procedimiento
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Banco", Parame_Banco)
    OperadorDatos.AgregarParametro("@Pardet_Banco", Pardet_Banco)
    OperadorDatos.AgregarParametro("@CtaBan_Numero", CtaBan_Numero)
    OperadorDatos.AgregarParametro("@ChePag_Numero", ChePag_Numero)
    OperadorDatos.AgregarParametro("@LotPag_Codigo", LotPag_Codigo)
    OperadorDatos.AgregarParametro("@DeLoPa_Secuencia", DeLoPa_Secuencia)
    OperadorDatos.AgregarParametro("@ChePag_esAnulado", ChePag_esAnulado)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      EsNuevo = False
      EsModificado = False
    End If
    Return bReturn
  End Function

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Banco", Parame_Banco)
    OperadorDatos.AgregarParametro("@Pardet_Banco", Pardet_Banco)
    OperadorDatos.AgregarParametro("@CtaBan_Numero", CtaBan_Numero)
    OperadorDatos.AgregarParametro("@ChePag_Numero", ChePag_Numero)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "ChequePagoList"
Public Class ChequePagoList
  Inherits System.ComponentModel.BindingList(Of ChequePago)

  Public Shared Function ObtenerLista(ByVal _OperadorDatos As OperadorDatos, ByVal _CuentaBancaria As CuentaBancaria, ByVal desde As Integer, ByVal hasta As Integer) As ChequePagoList
    Dim oResult As New ChequePagoList
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    With _OperadorDatos
      .AgregarParametro("@accion", "F")
      .AgregarParametro("@CtaBan_Numero", _CuentaBancaria.CtaBan_Numero)
      .AgregarParametro("@Parame_Banco", _CuentaBancaria.Parame_Banco)
      .AgregarParametro("@Pardet_Banco", _CuentaBancaria.Pardet_Banco)
      .AgregarParametro("@desde", desde)
      .AgregarParametro("@hasta", hasta)
      .Procedimiento = "proc_ChequePago"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso dsResult IsNot Nothing AndAlso dsResult.Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Rows
        Dim _obj As New ChequePago(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function InsertarAnulados(ByVal _operadorDatos As OperadorDatos, ByVal _CuentaBancaria As CuentaBancaria, ByVal antes As Boolean, ByVal desde As Integer, ByVal cantidad As Integer, ByVal _pagovario As LotePagoVarioDetalle) As Boolean
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    If cantidad <= 0 Then
      Return True
    End If
    With _operadorDatos
      .AgregarParametro("@accion", "N")
      .AgregarParametro("@CtaBan_Numero", _CuentaBancaria.CtaBan_Numero)
      .AgregarParametro("@Parame_Banco", _CuentaBancaria.Parame_Banco)
      .AgregarParametro("@Pardet_Banco", _CuentaBancaria.Pardet_Banco)
      .AgregarParametro("@LotPag_Codigo", _pagovario.LotPag_Secuencia)
      .AgregarParametro("@DeLoPa_Secuencia", _pagovario.LoPaDe_Secuencia)
      .AgregarParametro("@antes", antes)
      .AgregarParametro("@desde", desde)
      .AgregarParametro("@cantidad", cantidad)
      .Procedimiento = "proc_ChequePago"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    Return bReturn
  End Function

  Public Shared Function RetornarChequesPeriodo(ByVal _OperadorDatos As OperadorDatos, ByVal _persona As Empleado, ByVal _anio As Integer, ByVal _mes As Integer) As DataTable
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    With _OperadorDatos
      .AgregarParametro("@accion", "chp")
      .AgregarParametro("@Entida_Codigo", _persona.Entida_Codigo)
      .AgregarParametro("@anio", _anio)
      .AgregarParametro("@mes", _mes)
      .Procedimiento = "proc_ChequePago"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn Then
      Return dsResult
    End If
    Return Nothing
  End Function


  Public Sub New()
  End Sub
End Class
#End Region
