'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas
Imports Infoware.Reglas

#Region "AsistenciaDet"
Public Class AsistenciaDet

  Const _Procedimiento As String = "proc_AsistenciaDet"

  Private mPeriodopago As PeriodoPago = Nothing

  Private mPardetLicencia As WWTSParametroDet = Nothing

  Private mContrato As Contrato = Nothing

  Private mAsistencia As Asistencia = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Contrato As Contrato, ByVal _Periodopago As PeriodoPago, ByVal _AsiDet_Secuencia As Integer)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos

    Me.Contrato = _Contrato
    Me.Periodopago = _Periodopago
    'AsiDet_Secuencia = _AsiDet_Secuencia
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto AsistenciaDet")
    End If
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Asistencia As Asistencia)
    If _OperadorDatos Is Nothing Then
      Throw New InvalidOperationException("El operador de datos es nulo")
    End If

    OperadorDatos = _OperadorDatos

    Entida_Codigo = _Asistencia.Entida_Codigo
    Patron_Codigo = _Asistencia.Patron_Codigo
    PerPag_FechaDesde = _Asistencia.PerPag_FechaDesde
    Parame_PeriodoPago = _Asistencia.Parame_PeriodoPago
    Pardet_PeriodoPago = _Asistencia.Pardet_PeriodoPago

    'AsiDet_Secuencia = _AsiDet_Secuencia
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto AsistenciaDet")
    End If
  End Sub

  'PardetLicencia
  Public Overridable Property PardetLicencia() As WWTSParametroDet
    Get
      If Me.mPardetLicencia Is Nothing AndAlso Pardet_Licencia > 0 Then
        Me.mPardetLicencia = New WWTSParametroDet(OperadorDatos, Parame_Licencia, Pardet_Licencia)
      End If
      Return Me.mPardetLicencia
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetLicencia = value
      If value Is Nothing Then
        Parame_Licencia = 0
        Pardet_Licencia = 0
      Else
        Parame_Licencia = value.Parame_Codigo
        Pardet_Licencia = value.Pardet_Secuencia
      End If
    End Set
  End Property

  'Periodopago
  Public Overridable Property Periodopago() As PeriodoPago
    Get
      If Me.mPeriodopago Is Nothing AndAlso Pardet_PeriodoPago > 0 Then
        Me.mPeriodopago = New PeriodoPago(OperadorDatos, PerPag_FechaDesde, Parame_PeriodoPago, Pardet_PeriodoPago)
      End If
      Return Me.mPeriodopago

    End Get
    Set(ByVal value As PeriodoPago)
      Me.mPeriodopago = value
      PerPag_FechaDesde = value.PerPag_FechaDesde
      Pardet_PeriodoPago = value.Pardet_PeriodoPago
      Parame_PeriodoPago = value.Parame_PeriodoPago
    End Set
  End Property

  Public Property Contrato() As Contrato
    Get
      If mContrato Is Nothing And Patron_Codigo <> 0 And Entida_Codigo <> 0 And AsiDet_Secuencia > 0 Then
        mContrato = New Contrato(Me.OperadorDatos, Entida_Codigo, Patron_Codigo, AsiDet_Secuencia)
      End If
      Return mContrato
    End Get
    Set(ByVal Value As Contrato)
      Me.mContrato = Value
      If Value Is Nothing Then
        Me.Entida_Codigo = 0
        Me.Patron_Codigo = 0
      Else
        Me.Entida_Codigo = Value.Entida_Codigo
        Me.Patron_Codigo = Value.Patron_Codigo
      End If
    End Set
  End Property

  Public Property Asistencia() As Asistencia
    Get
      If mAsistencia Is Nothing And Patron_Codigo <> 0 And Entida_Codigo <> 0 And AsiDet_Secuencia > 0 Then
        mAsistencia = New Asistencia(Me.OperadorDatos, Contrato, Periodopago)
      End If
      Return mAsistencia
    End Get
    Set(ByVal Value As Asistencia)
      Me.mAsistencia = Value
      If Value Is Nothing Then
        Me.Entida_Codigo = 0
        Me.Patron_Codigo = 0
        Me.PerPag_FechaDesde = Now.Date
        Me.Parame_PeriodoPago = 0
        Me.Pardet_PeriodoPago = 0
      Else
        Me.Entida_Codigo = Value.Entida_Codigo
        Me.Patron_Codigo = Value.Patron_Codigo
        Me.PerPag_FechaDesde = Value.PerPag_FechaDesde
        Me.Parame_PeriodoPago = Value.Parame_PeriodoPago
        Me.Pardet_PeriodoPago = Value.Pardet_PeriodoPago
      End If
    End Set
  End Property

  Public ReadOnly Property PardetLicenciaString() As String
    Get
      If PardetLicencia Is Nothing Then
        Return String.Empty
      Else
        Return PardetLicencia.Pardet_Descripcion
      End If
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Entida_Codigo = CType(Fila("Entida_Codigo"), Integer)
    Patron_Codigo = CType(Fila("Patron_Codigo"), Integer)
    PerPag_FechaDesde = CType(Fila("PerPag_FechaDesde"), Date)
    Parame_PeriodoPago = CType(Fila("Parame_PeriodoPago"), Integer)
    Pardet_PeriodoPago = CType(Fila("Pardet_PeriodoPago"), Integer)
    AsiDet_Secuencia = CType(Fila("AsiDet_Secuencia"), Integer)
    Parame_Licencia = CType(Fila("Parame_Licencia"), Integer)
    Pardet_Licencia = CType(Fila("Pardet_Licencia"), Integer)
    AsiDet_LicenciaDias = CType(Fila("AsiDet_LicenciaDias"), Integer)

    mPeriodopago = Nothing
    mContrato = Nothing
    mPardetLicencia = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As New DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.AgregarParametro("@PerPag_FechaDesde", PerPag_FechaDesde)
    OperadorDatos.AgregarParametro("@Parame_PeriodoPago", Parame_PeriodoPago)
    OperadorDatos.AgregarParametro("@Pardet_PeriodoPago", Pardet_PeriodoPago)
    OperadorDatos.AgregarParametro("@AsiDet_Secuencia", AsiDet_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If

    Dim _EstasEnTransaccion As Boolean = OperadorDatos.EstaenTransaccion()

    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.AgregarParametro("@PerPag_FechaDesde", PerPag_FechaDesde)
    OperadorDatos.AgregarParametro("@Parame_PeriodoPago", Parame_PeriodoPago)
    OperadorDatos.AgregarParametro("@Pardet_PeriodoPago", Pardet_PeriodoPago)
    OperadorDatos.AgregarParametro("@AsiDet_Secuencia", AsiDet_Secuencia)
    OperadorDatos.AgregarParametro("@Parame_Licencia", Parame_Licencia)
    OperadorDatos.AgregarParametro("@Pardet_Licencia", Pardet_Licencia)
    OperadorDatos.AgregarParametro("@AsiDet_LicenciaDias", AsiDet_LicenciaDias)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If Not _EstasEnTransaccion Then
        AceptarCambios()
      End If
    End If
    Return bReturn
  End Function

  Public Overridable Sub AceptarCambios()
    EsNuevo = False
    EsModificado = False
  End Sub

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.AgregarParametro("@PerPag_FechaDesde", PerPag_FechaDesde)
    OperadorDatos.AgregarParametro("@Parame_PeriodoPago", Parame_PeriodoPago)
    OperadorDatos.AgregarParametro("@Pardet_PeriodoPago", Pardet_PeriodoPago)
    OperadorDatos.AgregarParametro("@AsiDet_Secuencia", AsiDet_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "AsistenciaDetList"
Public Class AsistenciaDetList
  Inherits System.ComponentModel.BindingList(Of AsistenciaDet)

  Public Shared Function ObtenerLista(ByVal _OperadorDatos As OperadorDatos, ByVal _Contrato As Contrato, ByVal _Periodo As PeriodoPago) As AsistenciaDetList
    Dim oResult As New AsistenciaDetList
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    With _OperadorDatos
      .AgregarParametro("@accion", "F")
      .AgregarParametro("@Entida_Codigo", _Contrato.Entida_Codigo)
      .AgregarParametro("@Patron_Codigo", _Contrato.Patron_Codigo)
      .AgregarParametro("@PerPag_FechaDesde", _Periodo.PerPag_FechaDesde)
      .AgregarParametro("@Parame_PeriodoPago", _Periodo.Parame_PeriodoPago)
      .AgregarParametro("@Pardet_PeriodoPago", _Periodo.Pardet_PeriodoPago)
      .Procedimiento = "proc_AsistenciaDet"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso dsResult IsNot Nothing AndAlso dsResult.Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Rows
        Dim _obj As New AsistenciaDet(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function ObtenerLista(ByVal _OperadorDatos As OperadorDatos, ByVal _Asistencia As Asistencia) As AsistenciaDetList
    Dim oResult As New AsistenciaDetList
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    With _OperadorDatos
      .AgregarParametro("@accion", "F")
      .AgregarParametro("@Entida_Codigo", _Asistencia.Entida_Codigo)
      .AgregarParametro("@Patron_Codigo", _Asistencia.Patron_Codigo)
      .AgregarParametro("@PerPag_FechaDesde", _Asistencia.PerPag_FechaDesde)
      .AgregarParametro("@Parame_PeriodoPago", _Asistencia.Parame_PeriodoPago)
      .AgregarParametro("@Pardet_PeriodoPago", _Asistencia.Pardet_PeriodoPago)
      .Procedimiento = "proc_AsistenciaDet"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso dsResult IsNot Nothing AndAlso dsResult.Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Rows
        Dim _obj As New AsistenciaDet(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function ObtenerVacacion(ByVal _OperadorDatos As OperadorDatos, ByVal _Asistencia As Asistencia, ByVal _FechaHasta As Date, ByVal _secuencia As Integer) As AsistenciaDetList
    Dim oResult As New AsistenciaDetList
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    With _OperadorDatos
      .AgregarParametro("@accion", "V")
      .AgregarParametro("@Entida_Codigo", _Asistencia.Entida_Codigo)
      .AgregarParametro("@Patron_Codigo", _Asistencia.Patron_Codigo)
      .AgregarParametro("@PerPag_FechaDesde", _Asistencia.PerPag_FechaDesde)
      .AgregarParametro("@Parame_PeriodoPago", _Asistencia.Parame_PeriodoPago)
      .AgregarParametro("@Pardet_PeriodoPago", _Asistencia.Pardet_PeriodoPago)
      .AgregarParametro("@hasta", _FechaHasta)
      .AgregarParametro("@secuencia", _secuencia)
      .Procedimiento = "proc_AsistenciaDet"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso dsResult IsNot Nothing AndAlso dsResult.Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Rows
        Dim _obj As New AsistenciaDet(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
