'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas

#Region "LotePagoVarioDetalle"
Public Class LotePagoVarioDetalle

  Const _Procedimiento As String = "proc_LotePagoVarioDetalle"

  Private mLotepago As LotePago = Nothing

  Private mPardetTipoPagoNomina As WWTSParametroDet = Nothing

  Private mEmpleado As Empleado = Nothing

  Public Sub New(ByVal _LotePago As LotePago, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _LotePago.OperadorDatos
    Lotepago = _LotePago
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _LotePago As LotePago)
    Me.New(_LotePago, True)
  End Sub

  Public Sub New(_LotePago As LotePago, ByVal _LoPaDe_Secuencia As Integer)
    Me.New(_LotePago, False)
    LoPaDe_Secuencia = _LoPaDe_Secuencia
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto LotePagoVarioDetalle")
    End If
  End Sub

  'Lotepago
  Public Overridable Property Lotepago() As LotePago
    Get
      If Me.mLotepago Is Nothing AndAlso LotPag_Secuencia > 0 Then
        Me.mLotepago = New LotePago(New Patrono(OperadorDatos, Patron_Codigo), LotPag_Secuencia)
      End If
      Return Me.mLotepago
    End Get
    Set(ByVal value As LotePago)
      Me.mLotepago = value
      Patron_Codigo = value.Patron_Codigo
      LotPag_Secuencia = value.LotPag_Secuencia
    End Set
  End Property

  Public Overridable Property PardetTipoPagoNomina() As WWTSParametroDet
    Get
      If mPardetTipoPagoNomina Is Nothing AndAlso Pardet_TipoPagoNomina <> 0 Then
        mPardetTipoPagoNomina = New WWTSParametroDet(OperadorDatos, Parame_TipoPagoNomina, Pardet_TipoPagoNomina)
      End If
      Return mPardetTipoPagoNomina
    End Get
    Set(ByVal value As WWTSParametroDet)
      mPardetTipoPagoNomina = value
      Parame_TipoPagoNomina = value.Parame_Codigo
      Pardet_TipoPagoNomina = value.Pardet_Secuencia
    End Set
  End Property

  'Empleado
  Public Overridable Property Empleado() As Empleado
    Get
      If Me.mEmpleado Is Nothing AndAlso Entida_Codigo > 0 Then
        Me.mEmpleado = New Empleado(OperadorDatos, Entida_Codigo)
      End If
      Return Me.mEmpleado
    End Get
    Set(ByVal value As Empleado)
      Me.mEmpleado = value
      If value Is Nothing Then
        Entida_Codigo = 0
      Else
        Entida_Codigo = value.Entida_Codigo
      End If
    End Set
  End Property

  Public ReadOnly Property Beneficiario As String
    Get
      If Empleado Is Nothing Then
        Return LoPaDe_Beneficiario
      Else
        Return Empleado.NombreCompleto
      End If
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Patron_Codigo = CType(Fila("Patron_Codigo"), Integer)
    LotPag_Secuencia = CType(Fila("LotPag_Secuencia"), Integer)
    LoPaDe_Secuencia = CType(Fila("LoPaDe_Secuencia"), Integer)
    Parame_TipoPagoNomina = CType(Fila("Parame_TipoPagoNomina"), Integer)
    Pardet_TipoPagoNomina = CType(Fila("Pardet_TipoPagoNomina"), Integer)
    LoPaDe_ValorPago = CType(Fila("LoPaDe_ValorPago"), Decimal)
    LoPaDe_FechaPago = CType(Fila("LoPaDe_FechaPago"), Date)
    If TypeOf Fila("LoPaDe_Beneficiario") Is DBNull Then
      LoPaDe_Beneficiario = String.Empty
    Else
      LoPaDe_Beneficiario = CType(Fila("LoPaDe_Beneficiario"), String)
    End If
    If TypeOf Fila("Entida_Codigo") Is DBNull Then
      Entida_Codigo = 0
    Else
      Entida_Codigo = CInt(Fila("Entida_Codigo"))
    End If
    LoPaDe_Observacion = CStr(Fila("LoPaDe_Observacion"))
    LoPaDe_MostrarEnProvisiones = CBool(Fila("LoPaDe_MostrarEnProvisiones"))
    mLotepago = Nothing
    mPardetTipoPagoNomina = Nothing
    mEmpleado = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As New DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.AgregarParametro("@LotPag_Secuencia", LotPag_Secuencia)
    OperadorDatos.AgregarParametro("@LoPaDe_Secuencia", LoPaDe_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.AgregarParametro("@LotPag_Secuencia", LotPag_Secuencia)
    OperadorDatos.AgregarParametro("@LoPaDe_Secuencia", LoPaDe_Secuencia)
    OperadorDatos.AgregarParametro("@Parame_TipoPagoNomina", Parame_TipoPagoNomina)
    OperadorDatos.AgregarParametro("@Pardet_TipoPagoNomina", Pardet_TipoPagoNomina)
    OperadorDatos.AgregarParametro("@LoPaDe_ValorPago", LoPaDe_ValorPago)
    OperadorDatos.AgregarParametro("@LoPaDe_FechaPago", LoPaDe_FechaPago)
    If Entida_Codigo > 0 Then
      OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    Else
      OperadorDatos.AgregarParametro("@LoPaDe_Beneficiario", LoPaDe_Beneficiario)
    End If
    OperadorDatos.AgregarParametro("@LoPaDe_Observacion", LoPaDe_Observacion)
    OperadorDatos.AgregarParametro("@LoPaDe_MostrarEnProvisiones", LoPaDe_MostrarEnProvisiones)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      EsNuevo = False
      EsModificado = False
    End If
    Return bReturn
  End Function

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.AgregarParametro("@LotPag_Secuencia", LotPag_Secuencia)
    OperadorDatos.AgregarParametro("@LoPaDe_Secuencia", LoPaDe_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "LotePagoVarioDetalleList"
Public Class LotePagoVarioDetalleList
  Inherits System.ComponentModel.BindingList(Of LotePagoVarioDetalle)

  Public Shared Function ObtenerLista(ByVal _LotePagoVario As LotePago) As LotePagoVarioDetalleList
    Dim oResult As New LotePagoVarioDetalleList
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    With _LotePagoVario.OperadorDatos
      .AgregarParametro("@accion", "f")
      .AgregarParametro("@Patron_Codigo", _LotePagoVario.Patron_Codigo)
      .AgregarParametro("@LotPag_Secuencia", _LotePagoVario.LotPag_Secuencia)
      .Procedimiento = "proc_LotePagoVarioDetalle"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso dsResult IsNot Nothing AndAlso dsResult.Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Rows
        Dim _obj As New LotePagoVarioDetalle(_LotePagoVario, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function

  Public Sub New()
  End Sub
End Class
#End Region
