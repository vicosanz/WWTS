'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas
Imports Infoware.Reportes

#Region "SueldoMensual"
Public Class SueldoMensual

  Const _Procedimiento As String = "proc_SueldoMensual"

  Private mContrato As Contrato = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _contrato As Contrato, ByVal _anio As Integer, ByVal _mes As Integer)
    Me.New(_OperadorDatos, False)

    Me.Contrato = _contrato
    Me.SueMen_Anio = _anio
    Me.SueMen_Mes = _mes
    If Not Me.Recargar Then
      EsNuevo = True
      'Throw New Exception("El objeto no puede ser cargado")
    End If
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Entida_Codigo As Integer, ByVal _Patron_Codigo As Integer, ByVal _Contra_Secuencia As Integer, ByVal _SueMen_Anio As Integer, ByVal _SueMen_Mes As Integer)
    Me.New(_OperadorDatos, False)
    Entida_Codigo = _Entida_Codigo
    Patron_Codigo = _Patron_Codigo
    Contra_Secuencia = _Contra_Secuencia
    SueMen_Anio = _SueMen_Anio
    SueMen_Mes = _SueMen_Mes
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto SueldoMensual")
    End If
  End Sub

  'Contrato
  Public Overridable Property Contrato() As Contrato
    Get
      If Me.mContrato Is Nothing AndAlso Patron_Codigo > 0 Then
        Me.mContrato = New Contrato(OperadorDatos, Entida_Codigo, Patron_Codigo, Contra_Secuencia)
      End If
      Return Me.mContrato
    End Get
    Set(ByVal value As Contrato)
      Me.mContrato = value
      Entida_Codigo = value.Entida_Codigo
      Patron_Codigo = value.Patron_Codigo
      Contra_Secuencia = value.Contra_Secuencia
    End Set
  End Property

#Region "IESS"
  Public ReadOnly Property IESSPersonal() As Decimal
    Get
      If Contrato.Tipocontrato.Pardet_TipoContratoEnum = Enumerados.enumTipoContrato.PorHoras Or Contrato.Tipocontrato.Pardet_TipoContratoEnum = Enumerados.enumTipoContrato.Destajo Then
        Return 0
      Else
        Return (mSueMen_Sueldo + mSueMen_Antiguedad) * mSueMen_PorcIESS / 100
      End If
    End Get
  End Property
  Public ReadOnly Property IESSPatronal() As Decimal
    Get
      Dim config As ConfigRoles
      config = New ConfigRoles(OperadorDatos, Contrato.Patrono.Pais, False)

      If Contrato.Tipocontrato.Pardet_TipoContratoEnum = Enumerados.enumTipoContrato.PorHoras Then
        Return (mSueMen_Sueldo + mSueMen_Antiguedad) * config.Cnfrol_porciessporhora / 100
      ElseIf Contrato.Tipocontrato.Pardet_TipoContratoEnum = Enumerados.enumTipoContrato.Destajo Then
        Return 0
      Else
        Return (mSueMen_Sueldo + mSueMen_Antiguedad) * config.Cnfrol_porciesspatronal / 100
      End If
    End Get
  End Property
#End Region

  <Infoware.Reportes.CampoReporteAtributo("Año", CampoReporteAtributo.EnumTipoDato.Numero, 50, True)> _
  Public ReadOnly Property Anio() As Integer
    Get
      Return SueMen_Anio
    End Get
  End Property
  <Infoware.Reportes.CampoReporteAtributo("Mes", CampoReporteAtributo.EnumTipoDato.Numero, 50, True)> _
  Public ReadOnly Property Mes() As Integer
    Get
      Return SueMen_Mes
    End Get
  End Property
  <Infoware.Reportes.CampoReporteAtributo("Dias Trab", CampoReporteAtributo.EnumTipoDato.Numero, 50, True)> _
  Public ReadOnly Property DiasTrab() As Integer
    Get
      Return SueMen_DiasTrab
    End Get
  End Property
  <Infoware.Reportes.CampoReporteAtributo("Dias Vac", CampoReporteAtributo.EnumTipoDato.Numero, 50, True)> _
  Public ReadOnly Property DiasVac() As Integer
    Get
      Return SueMen_DiasVac
    End Get
  End Property
  <Infoware.Reportes.CampoReporteAtributo("Sueldo", CampoReporteAtributo.EnumTipoDato.Decimales, 50, True)> _
  Public ReadOnly Property Sueldo() As Decimal
    Get
      Return SueMen_Sueldo
    End Get
  End Property
  <Infoware.Reportes.CampoReporteAtributo("Sobretiempo", CampoReporteAtributo.EnumTipoDato.Decimales, 50, True)> _
  Public ReadOnly Property Sobretiempo() As Decimal
    Get
      Return SueMen_Sobretiempo
    End Get
  End Property
  <Infoware.Reportes.CampoReporteAtributo("Vacaciones", CampoReporteAtributo.EnumTipoDato.Decimales, 50, True)> _
  Public ReadOnly Property Vacaciones() As Decimal
    Get
      Return SueMen_Vacaciones
    End Get
  End Property


#Region "Pagado"
  <Infoware.Reportes.CampoReporteAtributo("D3", CampoReporteAtributo.EnumTipoDato.Logico, 50, True)> _
  Public ReadOnly Property EstaPagadoD3() As Boolean
    Get
      Return Not mSueMen_PagadoD3 = Nothing
    End Get
  End Property
  <Infoware.Reportes.CampoReporteAtributo("D4", CampoReporteAtributo.EnumTipoDato.Logico, 50, True)> _
  Public ReadOnly Property EstaPagadoD4() As Boolean
    Get
      Return Not mSueMen_PagadoD4 = Nothing
    End Get
  End Property
  <Infoware.Reportes.CampoReporteAtributo("Vac", CampoReporteAtributo.EnumTipoDato.Logico, 50, True)> _
  Public ReadOnly Property EstaPagadoVac() As Boolean
    Get
      Return Not mSueMen_PagadoVAC = Nothing
    End Get
  End Property
  <Infoware.Reportes.CampoReporteAtributo("Uti", CampoReporteAtributo.EnumTipoDato.Logico, 50, True)> _
  Public ReadOnly Property EstaPagadoUti() As Boolean
    Get
      Return Not mSueMen_PagadoUTI = Nothing
    End Get
  End Property
#End Region

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Entida_Codigo = CType(Fila("Entida_Codigo"), Integer)
    Patron_Codigo = CType(Fila("Patron_Codigo"), Integer)
    Contra_Secuencia = CType(Fila("Contra_Secuencia"), Integer)
    SueMen_Anio = CType(Fila("SueMen_Anio"), Integer)
    SueMen_Mes = CType(Fila("SueMen_Mes"), Integer)
    SueMen_DiasTrab = CType(Fila("SueMen_DiasTrab"), Decimal)
    SueMen_DiasVac = CType(Fila("SueMen_DiasVac"), Decimal)
    SueMen_Sueldo = CType(Fila("SueMen_Sueldo"), Decimal)
    If TypeOf Fila("SueMen_Sobretiempo") Is DBNull Then
      SueMen_Sobretiempo = 0
    Else
      SueMen_Sobretiempo = CDec(Fila("SueMen_Sobretiempo"))
    End If
    SueMen_Vacaciones = CType(Fila("SueMen_Vacaciones"), Decimal)
    SueMen_PorcIESS = CType(Fila("SueMen_PorcIESS"), Decimal)
    Try
      SueMen_PagadoD3 = CType(Fila("SueMen_PagadoD3"), Date)
    Catch ex As Exception
      SueMen_PagadoD3 = Nothing
    End Try
    Try
      SueMen_PagadoD4 = CType(Fila("SueMen_PagadoD4"), Date)
    Catch ex As Exception
      SueMen_PagadoD4 = Nothing
    End Try
    Try
      SueMen_PagadoVAC = CType(Fila("SueMen_PagadoVAC"), Date)
    Catch ex As Exception
      SueMen_PagadoVAC = Nothing
    End Try
    Try
      SueMen_PagadoUTI = CType(Fila("SueMen_PagadoUTI"), Date)
    Catch ex As Exception
      SueMen_PagadoUTI = Nothing
    End Try
    SueMen_Antiguedad = CType(Fila("SueMen_Antiguedad"), Decimal)
    mContrato = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As New DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.AgregarParametro("@Contra_Secuencia", Contra_Secuencia)
    OperadorDatos.AgregarParametro("@SueMen_Anio", SueMen_Anio)
    OperadorDatos.AgregarParametro("@SueMen_Mes", SueMen_Mes)
    OperadorDatos.Procedimiento = "proc_SueldoMensual"
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.AgregarParametro("@Contra_Secuencia", Contra_Secuencia)
    OperadorDatos.AgregarParametro("@SueMen_Anio", SueMen_Anio)
    OperadorDatos.AgregarParametro("@SueMen_Mes", SueMen_Mes)
    OperadorDatos.AgregarParametro("@SueMen_DiasTrab", SueMen_DiasTrab)
    OperadorDatos.AgregarParametro("@SueMen_DiasVac", SueMen_DiasVac)
    OperadorDatos.AgregarParametro("@SueMen_Sueldo", SueMen_Sueldo)
    OperadorDatos.AgregarParametro("@SueMen_Antiguedad", SueMen_Antiguedad)
    OperadorDatos.AgregarParametro("@SueMen_Vacaciones", SueMen_Vacaciones)
    OperadorDatos.AgregarParametro("@SueMen_PorcIESS", SueMen_PorcIESS)
    If Not SueMen_PagadoD3 = Nothing Then
      OperadorDatos.AgregarParametro("@SueMen_PagadoD3", SueMen_PagadoD3)
    End If
    If Not SueMen_PagadoD4 = Nothing Then
      OperadorDatos.AgregarParametro("@SueMen_PagadoD4", SueMen_PagadoD4)
    End If
    If Not SueMen_PagadoVAC = Nothing Then
      OperadorDatos.AgregarParametro("@SueMen_PagadoVAC", SueMen_PagadoVAC)
    End If
    If Not SueMen_PagadoUTI = Nothing Then
      OperadorDatos.AgregarParametro("@SueMen_PagadoUTI", SueMen_PagadoUTI)
    End If
    OperadorDatos.Procedimiento = "proc_SueldoMensual"
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      EsNuevo = False
      EsModificado = False
    End If
    Return bReturn
  End Function

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.AgregarParametro("@Contra_Secuencia", Contra_Secuencia)
    OperadorDatos.AgregarParametro("@SueMen_Anio", SueMen_Anio)
    OperadorDatos.AgregarParametro("@SueMen_Mes", SueMen_Mes)
    OperadorDatos.Procedimiento = "proc_SueldoMensual"
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "SueldoMensualList"
Public Class SueldoMensualList
  Inherits System.ComponentModel.BindingList(Of SueldoMensual)
  Public Shared Function ObtenerLista(ByVal _OperadorDatos As OperadorDatos, ByVal _Contrato As Contrato, Optional ByVal _filtro As String = "") As SueldoMensualList
    Dim oResult As SueldoMensualList = New SueldoMensualList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Entida_Codigo", _Contrato.Entida_Codigo)
      .AgregarParametro("@Patron_Codigo", _Contrato.Patron_Codigo)
      .AgregarParametro("@Contra_Secuencia", _Contrato.Contra_Secuencia)
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_SueldoMensual"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso ds IsNot Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New SueldoMensual(_OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

#Region "Sueldos"
  Public Shared Function RetornarSueldoMensuales(ByVal _OperadorDatos As OperadorDatos, Optional ByVal _contrato As Contrato = Nothing) As SueldoMensualList
    Dim oResult As New SueldoMensualList
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    With _OperadorDatos
      If _contrato Is Nothing Then
        .AgregarParametro("@accion", "G")
      Else
        .AgregarParametro("@accion", "F")
        .AgregarParametro("@Entida_Codigo", _contrato.Entida_Codigo)
        .AgregarParametro("@Patron_Codigo", _contrato.Patron_Codigo)
        .AgregarParametro("@Empres_Codigo", _contrato.Empres_Codigo)
        .AgregarParametro("@Contra_Secuencia", _contrato.Contra_Secuencia)
      End If
      .Procedimiento = "proc_SueldoMensual"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso dsResult IsNot Nothing AndAlso dsResult.Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Rows
        Dim _obj As New SueldoMensual(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function RetornarSueldoMensuales(ByVal _OperadorDatos As OperadorDatos, ByVal _patrono As Patrono, ByVal _tipocontrato As TipoContrato, ByVal _anio As Integer, ByVal _mes As Integer) As SueldoMensualList
    Dim oResult As New SueldoMensualList
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    With _OperadorDatos
      .AgregarParametro("@accion", "mm")
      .AgregarParametro("@Patron_Codigo", _patrono.Patron_Codigo)
      .AgregarParametro("@TipCon_Codigo", _tipocontrato.TipCon_Codigo)
      .AgregarParametro("@SueMen_anio", _anio)
      .AgregarParametro("@SueMen_mes", _mes)
      .Procedimiento = "proc_SueldoMensual"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso dsResult IsNot Nothing AndAlso dsResult.Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Rows
        Dim _SueldoMensual As New SueldoMensual(_OperadorDatos, False)
        _SueldoMensual.MapearDataRowaObjeto(_dr)
        oResult.Add(_SueldoMensual)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function RetornarSueldoMensualesRecalculados(ByVal _OperadorDatos As OperadorDatos, ByVal _empleado As Empleado, ByVal _patrono As Patrono, ByVal _tipocontrato As TipoContrato, ByVal _anio As Integer, ByVal _mes As Integer) As SueldoMensualList
    Dim desde As Date
    Dim hasta As Date
    desde = DateSerial(_anio, _mes, 1)
    hasta = DateSerial(IIf(_mes + 1 > 12, _anio + 1, _anio), IIf(_mes + 1 > 12, 1, _mes + 1), 1)
    hasta = hasta.AddDays(-1)
    Return RetornarSueldoMensualesRecalculados(_OperadorDatos, _empleado, _patrono, _tipocontrato, desde, hasta)
  End Function

  Public Shared Function RetornarSueldoMensualesRecalculados(ByVal _OperadorDatos As OperadorDatos, ByVal _empleado As Empleado, ByVal _patrono As Patrono, ByVal _tipocontrato As TipoContrato, ByVal _desde As DateTime, ByVal _hasta As DateTime) As SueldoMensualList
    Dim oResult As New SueldoMensualList
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    With _OperadorDatos
      .AgregarParametro("@accion", "IESS")
      If Not _empleado Is Nothing Then
        .AgregarParametro("@Entida_Codigo", _empleado.Entida_Codigo)
      End If
      .AgregarParametro("@Patron_Codigo", _patrono.Patron_Codigo)
      .AgregarParametro("@TipCon_Codigo", _tipocontrato.TipCon_Codigo)
      .AgregarParametro("@desde", _desde)
      .AgregarParametro("@hasta", _hasta)
      .Procedimiento = "proc_SueldoMensual"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso dsResult IsNot Nothing AndAlso dsResult.Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Rows
        Dim _percod As Integer = CInt(_dr("Entida_Codigo"))
        Dim _patcod As Integer = CInt(_dr("Patron_Codigo"))
        Dim _concod As Integer = CInt(_dr("Contra_Secuencia"))
        Dim _contrato As Contrato = New Contrato(_OperadorDatos, _percod, _patcod, _concod)

        Dim _sueldobase As Decimal = CDec(_dr("sueldobase"))
        Dim _adicionalm As Decimal = CDec(_dr("adicionalm"))

        Dim _diasasis As Decimal = CDec(_dr("asistencia"))
        _diasasis = IIf(_diasasis > 30, 30, _diasasis)

        Dim _diasfaltas As Decimal = CDec(_dr("faltas"))
        Dim _diastrab As Decimal

        Dim _diasvac As Decimal = CDec(_dr("vacaciones"))
        Dim _sobretiempo As Decimal = CDec(_dr("sobretiempo"))

        Dim _dateaux As DateTime = _desde.AddDays(32 - _desde.Day)
        _dateaux = _dateaux.AddDays(-_dateaux.Day)
        Dim _diasmes As Integer = _dateaux.Day
        _diasmes = IIf(_diasmes > 30, 30, _diasmes)

        'If Math.Abs((_diasmes - _diasfaltas) - _diasasis) >= 5 Then
        _diastrab = _diasasis
        'Else
        '_diastrab = _diasmes - _diasfaltas
        'End If

        Dim _SueldoMensual As New SueldoMensual(_OperadorDatos, _contrato, _desde.Year, _desde.Month)

        _SueldoMensual.SueMen_DiasTrab = _diastrab
        _SueldoMensual.SueMen_DiasVac = IIf(_diastrab + _diasvac > 30, _diasvac + (30 - (_diastrab + _diasvac)), _diasvac)
        _SueldoMensual.SueMen_Sueldo = (_sueldobase / _diasmes * _diastrab) + _sobretiempo
        _SueldoMensual.SueMen_Antiguedad = _adicionalm / _diasmes * _diastrab
        _SueldoMensual.SueMen_Vacaciones = _sueldobase / _diasmes * _diasvac
        _SueldoMensual.SueMen_PorcIESS = CDec(_dr("porciess"))

        Select Case _tipocontrato.Pardet_TipoContratoEnum
          Case Enumerados.enumTipoContrato.PorHoras
            _SueldoMensual.SueMen_PagadoD3 = _hasta
            _SueldoMensual.SueMen_PagadoD4 = _hasta
            _SueldoMensual.SueMen_PagadoVAC = _hasta
          Case Enumerados.enumTipoContrato.Destajo
            _SueldoMensual.SueMen_PagadoD3 = _hasta
            _SueldoMensual.SueMen_PagadoD4 = _hasta
            _SueldoMensual.SueMen_PagadoUTI = _hasta
            _SueldoMensual.SueMen_PagadoVAC = _hasta
          Case Enumerados.enumTipoContrato.Temporada
            _SueldoMensual.SueMen_PagadoD3 = _hasta
            _SueldoMensual.SueMen_PagadoVAC = _hasta
        End Select
        oResult.Add(_SueldoMensual)
      Next
    End If
    Return oResult
  End Function
#End Region

  Public Sub New()
  End Sub
End Class
#End Region
