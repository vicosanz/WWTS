'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports Infoware.Reportes
Imports WWTS.General.Reglas


#Region "LlamadaAtencion"
Public Class LlamadaAtencion

  Const _Procedimiento As String = "proc_LlamadaAtencion"

  Private mContrato As Contrato = Nothing

  Private mPardetTipoLlamado As WWTSParametroDet = Nothing

  Private mPardetGravedadLlamado As WWTSParametroDet = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Entida_Codigo As Integer, ByVal _Patron_Codigo As Integer, ByVal _Contra_Secuencia As Integer, ByVal _Llamad_Secuencia As Integer)
    Me.New(_OperadorDatos, False)
    Entida_Codigo = _Entida_Codigo
    Patron_Codigo = _Patron_Codigo
    Contra_Secuencia = _Contra_Secuencia

    Llamad_Secuencia = _Llamad_Secuencia
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto LlamadaAtencion")
    End If
  End Sub

  Public Sub New(ByVal _Contrato As Contrato)
    Me.New(_Contrato.OperadorDatos, True)
    Contrato = _Contrato
  End Sub

  'Contrato
  Public Overridable Property Contrato() As Contrato
    Get
      If Me.mContrato Is Nothing AndAlso Entida_Codigo > 0 Then
        Me.mContrato = New Contrato(OperadorDatos, Entida_Codigo, Patron_Codigo, Contra_Secuencia)
      End If
      Return Me.mContrato
    End Get
    Set(ByVal value As Contrato)
      Me.mContrato = value
      Entida_Codigo = value.Entida_Codigo
      Patron_Codigo = value.Patron_Codigo
      Contra_Secuencia = value.Contra_Secuencia
    End Set
  End Property

  Public Property PardetTipoLlamado() As WWTSParametroDet
    Get
      If mPardetTipoLlamado Is Nothing AndAlso Pardet_TipoLlamado <> 0 Then
        mPardetTipoLlamado = New WWTSParametroDet(OperadorDatos, Parame_TipoLlamado, Pardet_TipoLlamado)
      End If
      Return mPardetTipoLlamado
    End Get
    Set(ByVal value As WWTSParametroDet)
      mPardetTipoLlamado = value
      Parame_TipoLlamado = value.Parame_Codigo
      Pardet_TipoLlamado = value.Pardet_Secuencia
    End Set
  End Property

  Public Property PardetGravedadLlamado() As WWTSParametroDet
    Get
      If mPardetGravedadLlamado Is Nothing AndAlso Pardet_GravedadLlamado <> 0 Then
        mPardetGravedadLlamado = New WWTSParametroDet(OperadorDatos, Parame_GravedadLlamado, Pardet_GravedadLlamado)
      End If
      Return mPardetGravedadLlamado
    End Get
    Set(ByVal value As WWTSParametroDet)
      mPardetGravedadLlamado = value
      Parame_GravedadLlamado = value.Parame_Codigo
      Pardet_GravedadLlamado = value.Pardet_Secuencia
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Fecha", CampoReporteAtributo.EnumTipoDato.Fecha, 100, True)> _
  Public ReadOnly Property Fecha() As Date
    Get
      Return Llamad_Fecha
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Tipo Llamado", CampoReporteAtributo.EnumTipoDato.Texto, 250, True)> _
  Public ReadOnly Property PardetTipoLlamadoString() As String
    Get
      If PardetTipoLlamado Is Nothing Then
        Return String.Empty
      Else
        Return Me.PardetTipoLlamado.Pardet_Descripcion
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Descripción", CampoReporteAtributo.EnumTipoDato.Texto, 250, True)> _
  Public ReadOnly Property Descripcion() As String
    Get
      Return Llamad_Descripcion
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Gravedad Llamado", CampoReporteAtributo.EnumTipoDato.Texto, 70, True)> _
  Public ReadOnly Property PardetGravedadLlamadoString() As String
    Get
      If PardetGravedadLlamado Is Nothing Then
        Return String.Empty
      Else
        Return Me.PardetGravedadLlamado.Pardet_Descripcion
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Sancionado", CampoReporteAtributo.EnumTipoDato.Logico, 70, True)> _
  Public ReadOnly Property Sancionado() As Boolean
    Get
      Return Llamad_Sancionado
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Entida_Codigo = CType(Fila("Entida_Codigo"), Integer)
    Patron_Codigo = CType(Fila("Patron_Codigo"), Integer)
    Contra_Secuencia = CType(Fila("Contra_Secuencia"), Integer)
    Llamad_Secuencia = CType(Fila("Llamad_Secuencia"), Integer)
    Llamad_Fecha = CType(Fila("Llamad_Fecha"), Date)
    Llamad_Descripcion = CType(Fila("Llamad_Descripcion"), String)
    Parame_TipoLlamado = CType(Fila("Parame_TipoLlamado"), Integer)
    Pardet_TipoLlamado = CType(Fila("Pardet_TipoLlamado"), Integer)
    Parame_GravedadLlamado = CType(Fila("Parame_GravedadLlamado"), Integer)
    Pardet_GravedadLlamado = CType(Fila("Pardet_GravedadLlamado"), Integer)
    Llamad_Sancionado = CType(Fila("Llamad_Sancionado"), Boolean)
    mContrato = Nothing
    mPardetTipoLlamado = Nothing
    mPardetGravedadLlamado = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As New DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.AgregarParametro("@Contra_Secuencia", Contra_Secuencia)
    OperadorDatos.AgregarParametro("@Llamad_Secuencia", Llamad_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.AgregarParametro("@Contra_Secuencia", Contra_Secuencia)
    OperadorDatos.AgregarParametro("@Llamad_Secuencia", Llamad_Secuencia)
    OperadorDatos.AgregarParametro("@Llamad_Fecha", Llamad_Fecha)
    OperadorDatos.AgregarParametro("@Llamad_Descripcion", Llamad_Descripcion)
    OperadorDatos.AgregarParametro("@Parame_TipoLlamado", Parame_TipoLlamado)
    OperadorDatos.AgregarParametro("@Pardet_TipoLlamado", Pardet_TipoLlamado)
    OperadorDatos.AgregarParametro("@Parame_GravedadLlamado", Parame_GravedadLlamado)
    OperadorDatos.AgregarParametro("@Pardet_GravedadLlamado", Pardet_GravedadLlamado)
    OperadorDatos.AgregarParametro("@Llamad_Sancionado", Llamad_Sancionado)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If EsNuevo Then
        Llamad_Secuencia = Result
      End If
      EsNuevo = False
      EsModificado = False
    End If
    Return bReturn
  End Function

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.AgregarParametro("@Contra_Secuencia", Contra_Secuencia)
    OperadorDatos.AgregarParametro("@Llamad_Secuencia", Llamad_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "LlamadaAtencionList"
Public Class LlamadaAtencionList
  Inherits System.ComponentModel.BindingList(Of LlamadaAtencion)

  Public Shared Function ObtenerLista(ByVal _OperadorDatos As OperadorDatos, ByVal _Contrato As Contrato) As LlamadaAtencionList
    Dim oResult As New LlamadaAtencionList
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    With _OperadorDatos
      .AgregarParametro("@accion", "F")
      .AgregarParametro("@Entida_Codigo", _Contrato.Entida_Codigo)
      .AgregarParametro("@Patron_Codigo", _Contrato.Patron_Codigo)
      .AgregarParametro("@Contra_Secuencia", _Contrato.Contra_Secuencia)
      .Procedimiento = "proc_LlamadaAtencion"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso dsResult IsNot Nothing AndAlso dsResult.Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Rows
        Dim _obj As New LlamadaAtencion(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        _obj.Recargar()
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function

  Public Sub New()
  End Sub
End Class
#End Region
