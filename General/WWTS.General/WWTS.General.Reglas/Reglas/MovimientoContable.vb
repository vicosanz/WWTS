'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas

#Region "MovimientoContable"
Public Class MovimientoContable
  Implements ICloneable

  Const _Procedimiento As String = "proc_MovimientoContable"

  Private mRegistroContable As RegistroContable = Nothing

  Private mEmpresa As Empresa = Nothing

  Private mPardetTipoCompte As WWTSParametroDet = Nothing

  Public Sub New(ByVal _Empresa As Empresa, ByVal _RegistroContable As RegistroContable, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _RegistroContable.OperadorDatos
    Empresa = _Empresa
    RegistroContable = _RegistroContable
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _Empresa As Empresa, ByVal _RegistroContable As RegistroContable, ByVal _PardetTipoCompte As WWTSParametroDet, ByVal _MovCtb_Secuencia As Integer)
    Me.New(_Empresa, _RegistroContable, False)
    PardetTipoCompte = _PardetTipoCompte
    MovCtb_Secuencia = _MovCtb_Secuencia
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto MovimientoContable")
    End If
  End Sub

  'RegistroContable
  Public Overridable Property RegistroContable() As RegistroContable
    Get
      If Me.mRegistroContable Is Nothing AndAlso Not RegCtb_Secuencia = 0 Then
        Me.mRegistroContable = New RegistroContable(OperadorDatos, Me.RegCtb_Secuencia)
      End If
      Return Me.mRegistroContable
    End Get
    Set(ByVal value As RegistroContable)
      Me.mRegistroContable = value
      RegCtb_Secuencia = Me.mRegistroContable.RegCtb_Secuencia
    End Set
  End Property

  'Empresa
  Public Overridable Property Empresa() As Empresa
    Get
      If Me.mEmpresa Is Nothing AndAlso Not Empres_Codigo = 0 Then
        Me.mEmpresa = New Empresa(OperadorDatos, Empres_Codigo)
      End If
      Return Me.mEmpresa
    End Get
    Set(ByVal value As Empresa)
      Me.mEmpresa = value
      Empres_Codigo = Me.mEmpresa.Empres_Codigo
    End Set
  End Property

  'Parametrodet
  Public Overridable Property PardetTipoCompte() As WWTSParametroDet
    Get
      If Me.mPardetTipoCompte Is Nothing AndAlso Pardet_TipoCompte > 0 Then
        Me.mPardetTipoCompte = New WWTSParametroDet(OperadorDatos, Parame_TipoCompte, Pardet_TipoCompte)
      End If
      Return Me.mPardetTipoCompte
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetTipoCompte = value
      Parame_TipoCompte = value.Parame_Codigo
      Pardet_TipoCompte = value.Pardet_Secuencia
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Tipo comprobante", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 165, True)> _
  Public Overridable ReadOnly Property PardetTipoCompteString() As String
    Get
      If PardetTipoCompte Is Nothing Then
        Return String.Empty
      Else
        Return mPardetTipoCompte.Pardet_Descripcion
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Número", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Numero, 70, True)> _
  Public ReadOnly Property Secuencia() As Integer
    Get
      Return Me.mMovCtb_Secuencia
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Fecha", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Fecha, 85, True)> _
  Public ReadOnly Property Fecha() As Date
    Get
      Return Me.mMovCtb_Fecha
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Observación", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 280, True)> _
  Public ReadOnly Property Observacion() As String
    Get
      Return Me.mMovCtb_Observacion
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Mayorizado", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Logico, 70, True)> _
  Public ReadOnly Property esMayorizado() As Boolean
    Get
      Return Me.mMovCtb_esMayorizado
    End Get
  End Property

  Private WithEvents mDetalles As MovimientoContableDetList = Nothing
  Public Property Detalles() As MovimientoContableDetList
    Get
      If mDetalles Is Nothing Then
        mDetalles = MovimientoContableDetList.ObtenerLista(Me)
        mDetallesEliminados = New MovimientoContableDetList
      End If
      Return mDetalles
    End Get
    Set(ByVal value As MovimientoContableDetList)
      mDetalles = value
    End Set
  End Property

  Private WithEvents mDetallesEliminados As New MovimientoContableDetList
  Public ReadOnly Property DetallesEliminados() As MovimientoContableDetList
    Get
      Return mDetallesEliminados
    End Get
  End Property

  Public ReadOnly Property Cheques() As MovimientoBancarioList
    Get
      Dim _cheques As New MovimientoBancarioList
      For Each _detalle As MovimientoContableDet In Detalles
        If _detalle.MovimientoBancario IsNot Nothing AndAlso Not _detalle.MovimientoBancario.EsNuevo AndAlso _detalle.MovimientoBancario.Pardet_TipoMovBanEnum = Enumerados.enumTipoMovimientoBancario.Cheque Then
          _cheques.Add(_detalle.MovimientoBancario)
        End If
      Next
      Return _cheques
    End Get
  End Property

  Private WithEvents mEnlaces As MovimientoInventarioList = Nothing
  Public Property Enlaces() As MovimientoInventarioList
    Get
      If mEnlaces Is Nothing Then
        mEnlaces = MovimientoContableList.ObtenerMovimientoInventarios(Me)
      End If
      Return mEnlaces
    End Get
    Set(ByVal value As MovimientoInventarioList)
      mEnlaces = value
    End Set
  End Property

  Private Sub mDetalles_AddingNew(ByVal sender As Object, ByVal e As System.ComponentModel.AddingNewEventArgs) Handles mDetalles.AddingNew
    Dim _movdet As New MovimientoContableDet(Me, True)
    e.NewObject = _movdet
  End Sub

  Public ReadOnly Property EstaCuadrado() As Boolean
    Get
      Return Diferencia = 0
    End Get
  End Property

  Public ReadOnly Property Diferencia() As Decimal
    Get
      Dim _valor As Decimal = 0
      For Each _detalle As MovimientoContableDet In Detalles
        _valor += _detalle.MoCtde_Valor
      Next
      Return _valor
    End Get
  End Property

  Public ReadOnly Property Debe() As Decimal
    Get
      Dim _valor As Decimal = 0
      For Each _detalle As MovimientoContableDet In Detalles
        If _detalle.MoCtde_Valor > 0 Then
          _valor += _detalle.MoCtde_Valor
        End If
      Next
      Return _valor
    End Get
  End Property

  Public ReadOnly Property Haber() As Decimal
    Get
      Dim _valor As Decimal = 0
      For Each _detalle As MovimientoContableDet In Detalles
        If _detalle.MoCtde_Valor < 0 Then
          _valor += _detalle.MoCtde_Valor
        End If
      Next
      Return Math.Abs(_valor)
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Valor cheque", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Decimales, 200, False)> _
  Public ReadOnly Property ValorCheque() As Decimal
    Get
      If Cheques Is Nothing OrElse Cheques.Count = 0 Then
        Return 0
      Else
        Return Cheques(0).Valor
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Valor cheque en letras", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 200, False)> _
  Public ReadOnly Property ValorChequeenLetras() As String
    Get
      If Cheques Is Nothing OrElse Cheques.Count = 0 Then
        Return String.Empty
      Else
        Return Cheques(0).ValorenLetras
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Banco", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 200, True)> _
  Public ReadOnly Property BancoString() As String
    Get
      If Cheques Is Nothing OrElse Cheques.Count = 0 Then
        Return String.Empty
      Else
        Return Cheques(0).PardetBancoString
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Beneficiario", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 200, True)> _
  Public ReadOnly Property BeneficiarioString() As String
    Get
      If Cheques Is Nothing OrElse Cheques.Count = 0 Then
        Return String.Empty
      Else
        Return Cheques(0).BeneficiarioString
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Fecha cheque en letras", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 200, False)> _
  Public ReadOnly Property FechaChequeenLetras() As String
    Get
      If Cheques Is Nothing OrElse Cheques.Count = 0 Then
        Return String.Empty
      Else
        Return Cheques(0).FechaenLetras
      End If
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Empres_Codigo = CType(Fila("Empres_Codigo"), Integer)
    RegCtb_Secuencia = CType(Fila("RegCtb_Secuencia"), Integer)
    Parame_TipoCompte = CType(Fila("Parame_TipoCompte"), Integer)
    Pardet_TipoCompte = CType(Fila("Pardet_TipoCompte"), Integer)
    MovCtb_Secuencia = CType(Fila("MovCtb_Secuencia"), Integer)
    MovCtb_Fecha = CType(Fila("MovCtb_Fecha"), Date)
    MovCtb_Observacion = CType(Fila("MovCtb_Observacion"), String)
    MovCtb_esMayorizado = CBool(Fila("MovCtb_esMayorizado"))
    mRegistroContable = Nothing
    mPardetTipoCompte = Nothing
    mEmpresa = Nothing
    mDetalles = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As New DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@RegCtb_Secuencia", RegCtb_Secuencia)
    OperadorDatos.AgregarParametro("@Parame_TipoCompte", Parame_TipoCompte)
    OperadorDatos.AgregarParametro("@Pardet_TipoCompte", Pardet_TipoCompte)
    OperadorDatos.AgregarParametro("@MovCtb_Secuencia", MovCtb_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True

    If Not EstaCuadrado Then
      Throw New Exception("No se puede guardar un movimiento contable descuadrado")
    End If

    OperadorDatos.ComenzarTransaccion()
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@RegCtb_Secuencia", RegCtb_Secuencia)
    OperadorDatos.AgregarParametro("@Parame_TipoCompte", Parame_TipoCompte)
    OperadorDatos.AgregarParametro("@Pardet_TipoCompte", Pardet_TipoCompte)
    OperadorDatos.AgregarParametro("@MovCtb_Secuencia", MovCtb_Secuencia)
    OperadorDatos.AgregarParametro("@MovCtb_Fecha", MovCtb_Fecha.Date)
    OperadorDatos.AgregarParametro("@MovCtb_Observacion", MovCtb_Observacion)
    OperadorDatos.AgregarParametro("@MovCtb_esMayorizado", MovCtb_esMayorizado)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If EsNuevo Then
        MovCtb_Secuencia = Result
      End If

      For Each _detalle As MovimientoContableDet In Detalles
        _detalle.Movimientocontable = Me
        If _detalle.MoCtde_Valor <> 0 Then
          If Not _detalle.Guardar() Then
            bReturn = False
            Exit For
          End If
        End If
      Next

      For Each _detalle As MovimientoContableDet In DetallesEliminados
        _detalle.Movimientocontable = Me
        If Not _detalle.Eliminar Then
          bReturn = False
          Exit For
        End If
      Next
      mDetallesEliminados = New MovimientoContableDetList

      If Not OperadorDatos.EstaenTransaccion Then
        EsNuevo = False
        EsModificado = False
      End If
    End If
    If bReturn Then
      OperadorDatos.TerminarTransaccion()
      AceptarCambios()
    Else
      OperadorDatos.CancelarTransaccion()
    End If
    Return bReturn
  End Function

  Public Overridable Function AceptarCambios() As Boolean
    EsNuevo = False
    EsModificado = False

    For Each _detalle As MovimientoContableDet In Detalles
      _detalle.AceptarCambios()
    Next
  End Function

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@RegCtb_Secuencia", RegCtb_Secuencia)
    OperadorDatos.AgregarParametro("@Parame_TipoCompte", Parame_TipoCompte)
    OperadorDatos.AgregarParametro("@Pardet_TipoCompte", Pardet_TipoCompte)
    OperadorDatos.AgregarParametro("@MovCtb_Secuencia", MovCtb_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function

  Public Function Clone() As Object Implements System.ICloneable.Clone
    Dim _objeto As New MovimientoContable(Empresa, RegistroContable, True)
    _objeto.Empres_Codigo = Empres_Codigo
    _objeto.RegCtb_Secuencia = RegCtb_Secuencia
    _objeto.Parame_TipoCompte = Parame_TipoCompte
    _objeto.Pardet_TipoCompte = Pardet_TipoCompte
    _objeto.MovCtb_Secuencia = MovCtb_Secuencia
    _objeto.MovCtb_Fecha = MovCtb_Fecha
    _objeto.MovCtb_Observacion = MovCtb_Observacion
    _objeto.Detalles = New MovimientoContableDetList

    For Each _movdet As MovimientoContableDet In Detalles
      Dim _objetodet As MovimientoContableDet
      _objetodet = _movdet.Clone
      _objetodet.Movimientocontable = _objeto
      _objeto.Detalles.Add(_objetodet)
    Next
    Return _objeto
  End Function
End Class
#End Region

#Region "MovimientoContableList"
Public Class MovimientoContableList
  Inherits System.ComponentModel.BindingList(Of MovimientoContable)

  Public Shared Function ObtenerLista(ByVal _Empresa As Empresa, ByVal _RegistroContable As RegistroContable, Optional ByVal _filtro As String = "") As MovimientoContableList
    Dim oResult As MovimientoContableList = New MovimientoContableList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _RegistroContable.OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Empres_Codigo", _Empresa.Empres_Codigo)
      .AgregarParametro("@RegCtb_Secuencia", _RegistroContable.RegCtb_Secuencia)
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_MovimientoContable"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New MovimientoContable(_Empresa, _RegistroContable, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function ObtenerMovimientoInventarios(ByVal _MovimientoContable As MovimientoContable) As MovimientoInventarioList
    Dim oResult As MovimientoInventarioList = New MovimientoInventarioList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _MovimientoContable.OperadorDatos
      .AgregarParametro("@Accion", "FP")
      .AgregarParametro("@Empres_Codigo", _MovimientoContable.Empres_Codigo)
      .AgregarParametro("@RegCtb_Secuencia", _MovimientoContable.RegCtb_Secuencia)
      .AgregarParametro("@Parame_TipoCompte", _MovimientoContable.Parame_TipoCompte)
      .AgregarParametro("@Pardet_TipoCompte", _MovimientoContable.Pardet_TipoCompte)
      .AgregarParametro("@MovCtb_Secuencia", _MovimientoContable.MovCtb_Secuencia)
      .Procedimiento = "proc_MovimientoContableDet"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New MovimientoInventario()
        _fila.OperadorDatos = _MovimientoContable.OperadorDatos
        _fila.EsNuevo = False
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
