'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports Infoware.Reglas.General
Imports WWTS.General.Reglas


#Region "ChequeDetalle"
Public Class ChequeDetalle
  Const _Procedimiento As String = "proc_ChequeDetalle"

  Private mCheque As Cheque = Nothing
  Private mMovimientoInventario As MovimientoInventario = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _Cheque As Cheque, ByVal _EsNuevo As Boolean)
    Me.New(_Cheque.OperadorDatos, True)
    Cheque = _Cheque
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _Cheque As Cheque, ByVal _MovimientoInventario As MovimientoInventario)
    Me.New(_Cheque, False)
    MovimientoInventario = _MovimientoInventario
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto ChequeDetalle")
    End If
  End Sub

  'Cheque
  Public Overridable Property Cheque() As Cheque
    Get
      If Me.mCheque Is Nothing AndAlso Not Cheque_Numero = 0 Then
        Me.mCheque = New Cheque(New CuentaBancaria(New Empresa(OperadorDatos, Empres_Codigo), New WWTSParametroDet(OperadorDatos, Parame_Banco, Pardet_Banco), CtaBan_Numero), Cheque_Numero)
      End If
      Return Me.mCheque
    End Get
    Set(ByVal value As Cheque)
      Me.mCheque = value
      Me.Empres_Codigo = value.Empres_Codigo
      Me.Parame_Banco = value.Parame_Banco
      Me.Pardet_Banco = value.Pardet_Banco
      Me.CtaBan_Numero = value.CtaBan_Numero
      Me.Cheque_Numero = value.Cheque_Numero
    End Set
  End Property

  'MovimientoInventario
  Public Overridable Property MovimientoInventario() As MovimientoInventario
    Get
      If Me.mMovimientoInventario Is Nothing AndAlso Movinv_Secuencia > 0 Then
        Me.mMovimientoInventario = New MovimientoInventario(New Sucursal(New Empresa(OperadorDatos, Empres_Bodega), Sucurs_Bodega), Enumerados.enumTipoMovInv.Compra, Movinv_Secuencia)
      End If
      Return Me.mMovimientoInventario
    End Get
    Set(ByVal value As MovimientoInventario)
      Me.mMovimientoInventario = value
      Parame_Tipomovinv = value.Parame_Tipomovinv
      Pardet_TipoMovinv = value.Pardet_Tipomovinv
      Empres_Bodega = value.Empres_Bodega
      Sucurs_Bodega = value.Sucurs_Bodega
      Movinv_Secuencia = value.Movinv_Secuencia
    End Set
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Empres_Codigo = CType(Fila("Empres_Codigo"), Integer)
    Parame_Banco = CType(Fila("Parame_Banco"), Integer)
    Pardet_Banco = CType(Fila("Pardet_Banco"), Integer)
    CtaBan_Numero = CType(Fila("CtaBan_Numero"), Integer)
    Cheque_Numero = CType(Fila("Cheque_Numero"), Integer)
    mCheque = Nothing
    Parame_Tipomovinv = CType(Fila("Parame_Tipomovinv"), Integer)
    Pardet_Tipomovinv = CType(Fila("Pardet_Tipomovinv"), Integer)
    Empres_Bodega = CType(Fila("Empres_Bodega"), Integer)
    Sucurs_Bodega = CType(Fila("Sucurs_Bodega"), Integer)
    Movinv_Secuencia = CType(Fila("Movinv_Secuencia"), Integer)
    mMovimientoInventario = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As New DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Banco", Parame_Banco)
    OperadorDatos.AgregarParametro("@Pardet_Banco", Pardet_Banco)
    OperadorDatos.AgregarParametro("@CtaBan_Numero", CtaBan_Numero)
    OperadorDatos.AgregarParametro("@Cheque_Numero", Cheque_Numero)
    OperadorDatos.AgregarParametro("@Parame_Tipomovinv", Parame_Tipomovinv)
    OperadorDatos.AgregarParametro("@Pardet_Tipomovinv", Pardet_Tipomovinv)
    OperadorDatos.AgregarParametro("@Empres_Bodega", Empres_Bodega)
    OperadorDatos.AgregarParametro("@Sucurs_Bodega", Sucurs_Bodega)
    OperadorDatos.AgregarParametro("@Movinv_Secuencia", Movinv_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    'If Not EsNuevo And Not EsModificado Then
    '  Return True
    'End If
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True

    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Banco", Parame_Banco)
    OperadorDatos.AgregarParametro("@Pardet_Banco", Pardet_Banco)
    OperadorDatos.AgregarParametro("@CtaBan_Numero", CtaBan_Numero)
    OperadorDatos.AgregarParametro("@Cheque_Numero", Cheque_Numero)
    OperadorDatos.AgregarParametro("@Parame_Tipomovinv", Parame_Tipomovinv)
    OperadorDatos.AgregarParametro("@Pardet_Tipomovinv", Pardet_Tipomovinv)
    OperadorDatos.AgregarParametro("@Empres_Bodega", Empres_Bodega)
    OperadorDatos.AgregarParametro("@Sucurs_Bodega", Sucurs_Bodega)
    OperadorDatos.AgregarParametro("@Movinv_Secuencia", Movinv_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If Not OperadorDatos.EstaenTransaccion Then
        EsNuevo = False
        EsModificado = False
      End If
    End If
    If bReturn Then
      AceptarCambios()
    End If
    Return bReturn
  End Function

  Public Overridable Function AceptarCambios() As Boolean
    EsNuevo = False
    EsModificado = False
  End Function

  Public Overridable Function Eliminar() As Boolean
    If EsNuevo Then
      Return True
    End If

    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Banco", Parame_Banco)
    OperadorDatos.AgregarParametro("@Pardet_Banco", Pardet_Banco)
    OperadorDatos.AgregarParametro("@CtaBan_Numero", CtaBan_Numero)
    OperadorDatos.AgregarParametro("@Cheque_Numero", Cheque_Numero)
    OperadorDatos.AgregarParametro("@Parame_Tipomovinv", Parame_Tipomovinv)
    OperadorDatos.AgregarParametro("@Pardet_Tipomovinv", Pardet_Tipomovinv)
    OperadorDatos.AgregarParametro("@Empres_Bodega", Empres_Bodega)
    OperadorDatos.AgregarParametro("@Sucurs_Bodega", Sucurs_Bodega)
    OperadorDatos.AgregarParametro("@Movinv_Secuencia", Movinv_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function

End Class
#End Region

#Region "ChequeDetalleList"
Public Class ChequeDetalleList
  Inherits System.ComponentModel.BindingList(Of ChequeDetalle)

  Public Shared Function ObtenerLista(ByVal _Cheque As Cheque, Optional ByVal _filtro As String = "") As ChequeDetalleList
    Dim oResult As ChequeDetalleList = New ChequeDetalleList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _Cheque.OperadorDatos
      .AgregarParametro("@Empres_Codigo", _Cheque.Empres_Codigo)
      .AgregarParametro("@Parame_Banco", _Cheque.Parame_Banco)
      .AgregarParametro("@Pardet_Banco", _Cheque.Pardet_Banco)
      .AgregarParametro("@CtaBan_Numero", _Cheque.CtaBan_Numero)
      .AgregarParametro("@Cheque_Numero", _Cheque.Cheque_Numero)

      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_Cheque"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New ChequeDetalle(_Cheque, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  'Public Shared Function ObtenerLista(ByVal _CuentaBancaria As MovimientoInventario, Optional ByVal _filtro As String = "") As ChequeList
  '  Dim oResult As ChequeList = New ChequeList
  '  Dim bReturn As Boolean
  '  Dim ds As New DataTable
  '  With _CuentaBancaria.OperadorDatos
  '    .AgregarParametro("@Accion", "F")
  '    .AgregarParametro("@Empres_Codigo", _CuentaBancaria.Empres_Codigo)
  '    .AgregarParametro("@Parame_Banco", _CuentaBancaria.Parame_Banco)
  '    .AgregarParametro("@Pardet_Banco", _CuentaBancaria.Pardet_Banco)
  '    .AgregarParametro("@CtaBan_Numero", _CuentaBancaria.CtaBan_Numero)
  '    .AgregarParametro("@filtro", _filtro)
  '    .Procedimiento = "proc_Cheque"
  '    bReturn = .Ejecutar(ds)
  '    .LimpiarParametros()
  '  End With
  '  If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
  '    For Each _dr As DataRow In ds.Rows
  '      Dim _fila As New ChequeDetalle(_CuentaBancaria, False)
  '      _fila.MapearDataRowaObjeto(_dr)
  '      oResult.Add(_fila)
  '    Next
  '  End If
  '  Return oResult
  'End Function
End Class
#End Region
