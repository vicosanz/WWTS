'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas

#Region "MovimientoContableDet"
Public Class MovimientoContableDet
  Implements ICloneable

  Const _Procedimiento As String = "proc_MovimientoContableDet"

  Private mCuentacontable As CuentaContable = Nothing

  Private mSubcuentacontable As WWTSParametroDet = Nothing

  Private mMovimientocontable As MovimientoContable = Nothing

  Private mMovimientoBancario As MovimientoBancario = Nothing

  Private mParameAdjunto As WWTSParametroDet = Nothing

  Private mPagosDet As PagosDet = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _MovimientoContable As MovimientoContable, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _MovimientoContable.OperadorDatos
    Movimientocontable = _MovimientoContable
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _MovimientoContable As MovimientoContable, ByVal _MoCtde_Secuencia As Integer)
    Me.New(_MovimientoContable, False)
    MoCtde_Secuencia = _MoCtde_Secuencia
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto MovimientoContableDet")
    End If
  End Sub

  'Cuentacontable
  Public Overridable Property CuentaContable() As CuentaContable
    Get
      If mCuentacontable Is Nothing AndAlso Not CtaCtb_Codigo = String.Empty Then
        mCuentacontable = New CuentaContable(OperadorDatos, Me.CtaCtb_Codigo)
      End If
      Return Me.mCuentacontable
    End Get
    Set(ByVal value As CuentaContable)
      Me.mCuentacontable = value
      Me.CtaCtb_Codigo = value.CtaCtb_Codigo
    End Set
  End Property

  Public Overridable ReadOnly Property CuentaContableString() As String
    Get
      If CuentaContable Is Nothing Then
        Return String.Empty
      Else
        Return mCuentacontable.CtaCtb_Descripcion
      End If
    End Get
  End Property

  'Subcuentacontable
  Public Overridable Property SubCuentaContable() As WWTSParametroDet
    Get
      If mSubcuentacontable Is Nothing AndAlso Pardet_SubCuenta > 0 Then
        mSubcuentacontable = New WWTSParametroDet(OperadorDatos, Me.Parame_SubCuenta, Me.Pardet_SubCuenta)
      End If
      Return Me.mSubcuentacontable
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mSubcuentacontable = value
      If value Is Nothing Then
        Me.Pardet_SubCuenta = 0
      Else
        Me.Parame_SubCuenta = value.Parame_Codigo
        Me.Pardet_SubCuenta = value.Pardet_Secuencia
      End If
    End Set
  End Property

  Public Overridable ReadOnly Property SubCuentaContableString() As String
    Get
      If SubCuentaContable Is Nothing Then
        Return String.Empty
      Else
        Return mSubcuentacontable.Pardet_Descripcion
      End If
    End Get
  End Property

  'Movimientocontable
  Public Overridable Property Movimientocontable() As MovimientoContable
    Get
      If mMovimientocontable Is Nothing AndAlso MovCtb_Secuencia > 0 Then
        mMovimientocontable = New MovimientoContable(New Empresa(OperadorDatos, Me.Empres_Codigo), New RegistroContable(OperadorDatos, Me.RegCtb_Secuencia), New WWTSParametroDet(OperadorDatos, Parame_TipoCompte, Pardet_TipoCompte), Me.MovCtb_Secuencia)
      End If
      Return Me.mMovimientocontable
    End Get
    Set(ByVal value As MovimientoContable)
      Me.mMovimientocontable = value
      Me.Empres_Codigo = value.Empres_Codigo
      Me.RegCtb_Secuencia = value.RegCtb_Secuencia
      Me.Parame_TipoCompte = value.Parame_TipoCompte
      Me.Pardet_TipoCompte = value.Pardet_TipoCompte
      Me.MovCtb_Secuencia = value.MovCtb_Secuencia
    End Set
  End Property

  Public Property Debe() As String
    Get
      If MoCtde_Valor >= 0 Then
        Return MoCtde_Valor.ToString("N2")
      Else
        Return Nothing
      End If
    End Get
    Set(ByVal value As String)
      MoCtde_Valor = CDec(value)
    End Set
  End Property

  Public Property Haber() As String
    Get
      If MoCtde_Valor < 0 Then
        Return Math.Abs(MoCtde_Valor).ToString("N2")
      Else
        Return Nothing
      End If
    End Get
    Set(ByVal value As String)
      MoCtde_Valor = -CDec(value)
    End Set
  End Property

  'MovimientoBancario
  Public Overridable Property MovimientoBancario() As MovimientoBancario
    Get
      If mMovimientoBancario Is Nothing Then
        mMovimientoBancario = New MovimientoBancario(Me)
      End If
      Return Me.mMovimientoBancario
    End Get
    Set(ByVal value As MovimientoBancario)
      Me.mMovimientoBancario = value
    End Set
  End Property

  Public ReadOnly Property CantidadenLetras() As String
    Get
      Return Utilerias.NumaLetras(Math.Abs(MoCtde_Valor)) & " -------------------------------"
    End Get
  End Property

  Public Property PagosDet() As PagosDet
    Get
      If mPagosDet Is Nothing AndAlso Pagdet_Secuencia > 0 Then
        mPagosDet = New PagosDet(New MovimientoInventario(New Sucursal(New Empresa(OperadorDatos, Empres_Codigo), Me.Sucurs_Bodega), New WWTSParametroDet(OperadorDatos, Me.Parame_Tipomovinv, Me.Pardet_Tipomovinv), Me.Movinv_Secuencia), Me.Pagdet_Secuencia)
      End If
      Return mPagosDet
    End Get
    Set(ByVal value As PagosDet)
      mPagosDet = value
      If value Is Nothing Then
        Parame_Tipomovinv = 0
        Pardet_Tipomovinv = 0
        Sucurs_Bodega = 0
        Movinv_Secuencia = 0
        Pagdet_Secuencia = 0
      Else
        Parame_Tipomovinv = value.Parame_Tipomovinv
        Pardet_Tipomovinv = value.Pardet_Tipomovinv
        Sucurs_Bodega = value.Sucurs_Bodega
        Movinv_Secuencia = value.Movinv_Secuencia
        Pagdet_Secuencia = value.Pagdet_Secuencia
      End If
    End Set
  End Property

#Region "Libro Mayor"
  <Infoware.Reportes.CampoReporteAtributo("Fecha", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Fecha, 80, True)> _
  Public ReadOnly Property Fecha() As Date
    Get
      If Pardet_TipoCompte = -1 OrElse Movimientocontable Is Nothing Then
        Return Now.Date
      Else
        Return mMovimientocontable.MovCtb_Fecha
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Documento", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 100, True)> _
  Public ReadOnly Property Documento() As String
    Get
      If Pardet_TipoCompte = -1 OrElse Movimientocontable Is Nothing Then
        Return String.Empty
      Else
        Return String.Format("{0} {1}", mMovimientocontable.PardetTipoCompteString, mMovimientocontable.MovCtb_Secuencia.ToString.Trim)
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Detalle", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 205, True)> _
  Public ReadOnly Property Detalle() As String
    Get
      If Pardet_TipoCompte = -1 OrElse Movimientocontable Is Nothing Then
        Return "Saldo anterior"
      Else
        Return mMovimientocontable.MovCtb_Observacion
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Ingresos", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 65, True)> _
  Public ReadOnly Property Ingresos() As String
    Get
      If MoCtde_Valor >= 0 Then
        Return MoCtde_Valor.ToString("0.00")
      Else
        Return String.Empty
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Egresos", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 65, True)> _
  Public ReadOnly Property Egresos() As String
    Get
      If MoCtde_Valor < 0 Then
        Return MoCtde_Valor.ToString("0.00")
      Else
        Return String.Empty
      End If
    End Get
  End Property

  Private mSaldo As Decimal = 0
  <Infoware.Reportes.CampoReporteAtributo("Saldo", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 70, True)> _
  Public Property Saldo() As String
    Get
      Return mSaldo.ToString("0.00")
    End Get
    Set(ByVal value As String)
      mSaldo = value
    End Set
  End Property
#End Region

  'ParameAdjunto
  Public Overridable Property ParameAdjunto() As WWTSParametroDet
    Get
      If mParameAdjunto Is Nothing Then
        If Pardet_Adjunto > 0 Then
          mParameAdjunto = New WWTSParametroDet(OperadorDatos, Me.Parame_Adjunto, Me.Pardet_Adjunto)
        Else
          mParameAdjunto = New WWTSParametroDet(OperadorDatos, Enumerados.EnumParametros.Adjuntos, True)
        End If
      End If
      Return Me.mParameAdjunto
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mParameAdjunto = value
      If value Is Nothing Then
        Me.Pardet_Adjunto = 0
      Else
        Me.Parame_Adjunto = value.Parame_Codigo
        Me.Pardet_Adjunto = value.Pardet_Secuencia
      End If
    End Set
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Empres_Codigo = CType(Fila("Empres_Codigo"), Integer)
    RegCtb_Secuencia = CType(Fila("RegCtb_Secuencia"), Integer)
    Parame_TipoCompte = CType(Fila("Parame_TipoCompte"), Integer)
    Pardet_TipoCompte = CType(Fila("Pardet_TipoCompte"), Integer)
    MovCtb_Secuencia = CType(Fila("MovCtb_Secuencia"), Integer)
    MoCtde_Secuencia = CType(Fila("MoCtde_Secuencia"), Integer)
    MoCtde_Valor = CType(Fila("MoCtde_Valor"), Decimal)
    CtaCtb_Codigo = CType(Fila("CtaCtb_Codigo"), String)
    Try
      MoCtde_Detalle = CType(Fila("MoCtde_Detalle"), String)
      Dim obj As Object
      obj = Fila("Pardet_SubCuenta")
      If TypeOf obj Is DBNull Then
        Parame_SubCuenta = 0
        Pardet_SubCuenta = 0
      Else
        Pardet_SubCuenta = CType(obj, Integer)
        obj = Fila("Parame_SubCuenta")
        If TypeOf obj Is DBNull Then
          Parame_SubCuenta = 0
          Pardet_SubCuenta = 0
        Else
          Parame_SubCuenta = CType(obj, Integer)
        End If
      End If
      obj = Fila("Parame_Tipomovinv")
      If TypeOf obj Is DBNull Then
        Parame_Tipomovinv = 0
        Pardet_Tipomovinv = 0
      Else
        Parame_Tipomovinv = CInt(obj)
        obj = Fila("Pardet_Tipomovinv")
        If TypeOf obj Is DBNull Then
          Parame_Tipomovinv = 0
          Pardet_Tipomovinv = 0
        Else
          Pardet_Tipomovinv = CInt(obj)
        End If
      End If
      obj = Fila("Sucurs_Bodega")
      If TypeOf obj Is DBNull Then
        Sucurs_Bodega = 0
      Else
        Sucurs_Bodega = CInt(obj)
      End If
      obj = Fila("Movinv_Secuencia")
      If TypeOf obj Is DBNull Then
        Movinv_Secuencia = 0
      Else
        Movinv_Secuencia = CInt(obj)
      End If
      obj = Fila("Pagdet_Secuencia")
      If TypeOf obj Is DBNull Then
        Pagdet_Secuencia = 0
      Else
        Pagdet_Secuencia = CInt(obj)
      End If
    Catch ex As Exception
    End Try
    Try
      Parame_Adjunto = CInt(Fila("Parame_Adjunto"))
      Pardet_Adjunto = CInt(Fila("Pardet_Adjunto"))
    Catch ex As Exception
      Parame_Adjunto = 0
      Pardet_Adjunto = 0
    End Try
    mCuentacontable = Nothing
    mSubcuentacontable = Nothing
    mMovimientocontable = Nothing
    mParameAdjunto = Nothing
    mPagosDet = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As New DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@RegCtb_Secuencia", RegCtb_Secuencia)
    OperadorDatos.AgregarParametro("@Parame_TipoCompte", Parame_TipoCompte)
    OperadorDatos.AgregarParametro("@Pardet_TipoCompte", Pardet_TipoCompte)
    OperadorDatos.AgregarParametro("@MovCtb_Secuencia", MovCtb_Secuencia)
    OperadorDatos.AgregarParametro("@MoCtde_Secuencia", MoCtde_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    Dim _cuentacontable As CuentaContable = CuentaContable
    Dim _pagosdet As PagosDet = PagosDet
    If _pagosdet IsNot Nothing Then
      bReturn = _pagosdet.Guardar
    End If

    If bReturn AndAlso ParameAdjunto IsNot Nothing AndAlso ParameAdjunto.PardetHijos IsNot Nothing Then
      If (ParameAdjunto.EsNuevo AndAlso ParameAdjunto.PardetHijos.Count > 0) Or (Not ParameAdjunto.EsNuevo AndAlso ParameAdjunto.PardetHijos.Count + ParameAdjunto.PardetHijosEli.Count > 0) Then
        bReturn = ParameAdjunto.Guardar
        If bReturn Then
          Parame_Adjunto = ParameAdjunto.Parame_Codigo
          Pardet_Adjunto = ParameAdjunto.Pardet_Secuencia
        End If
      End If
    End If

    If bReturn Then
      OperadorDatos.AgregarParametro("@accion", sAccion)
      OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
      OperadorDatos.AgregarParametro("@RegCtb_Secuencia", RegCtb_Secuencia)
      OperadorDatos.AgregarParametro("@Parame_TipoCompte", Parame_TipoCompte)
      OperadorDatos.AgregarParametro("@Pardet_TipoCompte", Pardet_TipoCompte)
      OperadorDatos.AgregarParametro("@MovCtb_Secuencia", MovCtb_Secuencia)
      OperadorDatos.AgregarParametro("@MoCtde_Secuencia", MoCtde_Secuencia)
      OperadorDatos.AgregarParametro("@MoCtde_Valor", MoCtde_Valor)
      OperadorDatos.AgregarParametro("@MoCtde_Detalle", MoCtde_Detalle)
      OperadorDatos.AgregarParametro("@CtaCtb_Codigo", CtaCtb_Codigo)
      'If _cuentacontable.EsCuentaResultado Then
      OperadorDatos.AgregarParametro("@Parame_SubCuenta", Parame_SubCuenta)
      OperadorDatos.AgregarParametro("@Pardet_SubCuenta", Pardet_SubCuenta)
      'End If
      If _pagosdet IsNot Nothing Then
        OperadorDatos.AgregarParametro("@Parame_Tipomovinv", Parame_Tipomovinv)
        OperadorDatos.AgregarParametro("@Pardet_Tipomovinv", Pardet_Tipomovinv)
        OperadorDatos.AgregarParametro("@Sucurs_Bodega", Sucurs_Bodega)
        OperadorDatos.AgregarParametro("@Movinv_Secuencia", Movinv_Secuencia)
        OperadorDatos.AgregarParametro("@Pagdet_Secuencia", Pagdet_Secuencia)
      End If
      If Pardet_Adjunto > 0 Then
        OperadorDatos.AgregarParametro("@Parame_Adjunto", Parame_Adjunto)
        OperadorDatos.AgregarParametro("@Pardet_Adjunto", Pardet_Adjunto)
      End If
      OperadorDatos.Procedimiento = _Procedimiento
      bReturn = OperadorDatos.Ejecutar(Result)
      OperadorDatos.LimpiarParametros()
      If bReturn Then
        If EsNuevo Then
          MoCtde_Secuencia = Result
        End If
        If Pardet_Adjunto > 0 AndAlso ParameAdjunto IsNot Nothing AndAlso ParameAdjunto.PardetHijos IsNot Nothing Then
          For Each _param As WWTSParametroDet In ParameAdjunto.PardetHijos
            _param.Guardar()
          Next
        End If

        If _pagosdet IsNot Nothing Then
          _pagosdet.Pagdet_esContabilizado = True
          _pagosdet.Guardar()
        End If

        If Not OperadorDatos.EstaenTransaccion Then
          EsNuevo = False
          EsModificado = False
        End If

        If CuentaContable.Pardet_TipoCtaCtble = Enumerados.enumTipoCuentaContable.Bancos Then
          'MovimientoBancario.EsNuevo = True
          MovimientoBancario.MovimientoContableDet = Me
          bReturn = MovimientoBancario.Guardar
        End If
      End If
    End If
    Return bReturn
  End Function

  Public Overridable Function AceptarCambios() As Boolean
    EsNuevo = False
    EsModificado = False
    If CuentaContable.Pardet_TipoCtaCtble = Enumerados.enumTipoCuentaContable.Bancos Then
      MovimientoBancario.AceptarCambios()
    End If
  End Function

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@RegCtb_Secuencia", RegCtb_Secuencia)
    OperadorDatos.AgregarParametro("@Parame_TipoCompte", Parame_TipoCompte)
    OperadorDatos.AgregarParametro("@Pardet_TipoCompte", Pardet_TipoCompte)
    OperadorDatos.AgregarParametro("@MovCtb_Secuencia", MovCtb_Secuencia)
    OperadorDatos.AgregarParametro("@MoCtde_Secuencia", MoCtde_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function

  Public Function Clone() As Object Implements System.ICloneable.Clone
    Dim _objeto As New MovimientoContableDet(Movimientocontable, True)
    _objeto.Empres_Codigo = Empres_Codigo
    _objeto.RegCtb_Secuencia = RegCtb_Secuencia
    _objeto.Parame_TipoCompte = Parame_TipoCompte
    _objeto.Pardet_TipoCompte = Pardet_TipoCompte
    _objeto.MovCtb_Secuencia = MovCtb_Secuencia
    _objeto.MoCtde_Secuencia = MoCtde_Secuencia
    _objeto.MoCtde_Valor = MoCtde_Valor
    _objeto.MoCtde_Detalle = MoCtde_Detalle
    _objeto.CtaCtb_Codigo = CtaCtb_Codigo
    _objeto.Parame_SubCuenta = Parame_SubCuenta
    _objeto.Pardet_SubCuenta = Pardet_SubCuenta

    If MovimientoBancario IsNot Nothing Then
      _objeto.MovimientoBancario = MovimientoBancario.Clone
      _objeto.MovimientoBancario.MovimientoContableDet = _objeto
    End If
    Return _objeto
  End Function
End Class
#End Region

#Region "MovimientoContableDetList"
Public Class MovimientoContableDetList
  Inherits System.ComponentModel.BindingList(Of MovimientoContableDet)

  Public Shared Function ObtenerLista(ByVal _movimientocontable As MovimientoContable) As MovimientoContableDetList
    Dim oResult As MovimientoContableDetList = New MovimientoContableDetList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _movimientocontable.OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Empres_Codigo", _movimientocontable.Empres_Codigo)
      .AgregarParametro("@RegCtb_Secuencia", _movimientocontable.RegCtb_Secuencia)
      .AgregarParametro("@Parame_TipoCompte", _movimientocontable.Parame_TipoCompte)
      .AgregarParametro("@Pardet_TipoCompte", _movimientocontable.Pardet_TipoCompte)
      .AgregarParametro("@MovCtb_Secuencia", _movimientocontable.MovCtb_Secuencia)
      .Procedimiento = "proc_MovimientoContableDet"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New MovimientoContableDet(_movimientocontable, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function LibroMayor(ByVal _Empresa As Empresa, ByVal _RegistroContable As RegistroContable, ByVal _CuentaContable As CuentaContable, ByVal _fecdesde As Date, ByVal _fechasta As Date) As MovimientoContableDetList
    Dim oResult As MovimientoContableDetList = New MovimientoContableDetList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _CuentaContable.OperadorDatos
      .AgregarParametro("@Accion", "lm")
      .AgregarParametro("@Empres_Codigo", _Empresa.Empres_Codigo)
      .AgregarParametro("@RegCtb_Secuencia", _RegistroContable.RegCtb_Secuencia)
      .AgregarParametro("@CtaCtb_Codigo", _CuentaContable.CtaCtb_Codigo)
      .AgregarParametro("@fechadesde", _fecdesde.Date)
      .AgregarParametro("@fechahasta", _fechasta.Date) '.AddDays(1)
      .Procedimiento = "proc_MovimientoContableDet"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New MovimientoContableDet(_Empresa.OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If

    Dim saldo As Decimal = 0
    For Each _det As MovimientoContableDet In oResult
      saldo += _det.MoCtde_Valor
      _det.Saldo = saldo
    Next
    Return oResult
  End Function
End Class
#End Region
