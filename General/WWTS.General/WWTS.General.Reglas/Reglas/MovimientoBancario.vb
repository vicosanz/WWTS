'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports WWTS.General.Reglas


#Region "MovimientoBancario"
Public Class MovimientoBancario
  Implements ICloneable

  Const _Procedimiento As String = "proc_MovimientoBancario"

  Private mCuentabancaria As CuentaBancaria = Nothing

  Private mPardetBanco As WWTSParametroDet = Nothing

  Private mPardetTipoMovBan As WWTSParametroDet = Nothing

  Private mEntidadBeneficiario As Entidad = Nothing

  Private mMovimientoContableDet As MovimientoContableDet = Nothing

  Private mEmpresa As Empresa = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _MovimientoContableDet As MovimientoContableDet)
    MyBase.New()
    OperadorDatos = _MovimientoContableDet.OperadorDatos
    MovimientoContableDet = _MovimientoContableDet
    EsNuevo = Not Me.Recargar
  End Sub

  'Empresa
  Public Overridable Property Empresa() As Empresa
    Get
      If Me.mEmpresa Is Nothing AndAlso Not Empres_Codigo = 0 Then
        Me.mEmpresa = New Empresa(OperadorDatos, Empres_Codigo)
      End If
      Return Me.mEmpresa
    End Get
    Set(ByVal value As Empresa)
      Me.mEmpresa = value
      Empres_Codigo = Me.mEmpresa.Empres_Codigo
    End Set
  End Property

  'Cuentabancaria
  Public Overridable Property Cuentabancaria() As CuentaBancaria
    Get
      If Me.mCuentabancaria Is Nothing AndAlso Not Empres_Codigo = 0 Then
        Me.mCuentabancaria = New CuentaBancaria(New Empresa(OperadorDatos, Empres_Codigo), New WWTSParametroDet(OperadorDatos, Parame_Banco, Pardet_Banco), CtaBan_Numero)
      End If
      Return Me.mCuentabancaria
    End Get
    Set(ByVal value As CuentaBancaria)
      Me.mCuentabancaria = value
      Me.Parame_Banco = value.Parame_Banco
      Me.Pardet_Banco = value.Pardet_Banco
      Me.CtaBan_Numero = value.CtaBan_Numero
    End Set
  End Property

  Public Shadows Property Pardet_TipoMovBanEnum() As Enumerados.enumTipoMovimientoBancario
    Get
      Return CType(Pardet_TipoMovBan, Enumerados.enumTipoMovimientoBancario)
    End Get
    Set(ByVal value As Enumerados.enumTipoMovimientoBancario)
      Pardet_TipoMovBan = CInt(value)
    End Set
  End Property

  'Parametrodet
  Public Overridable Property PardetTipoMovBan() As WWTSParametroDet
    Get
      If Me.mPardetTipoMovBan Is Nothing AndAlso Pardet_TipoMovBan > 0 Then
        Me.mPardetTipoMovBan = New WWTSParametroDet(OperadorDatos, Parame_TipoMovBan, Pardet_TipoMovBan)
      End If
      Return Me.mPardetTipoMovBan
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetTipoMovBan = value
      Parame_TipoMovBan = value.Parame_Codigo
      Pardet_TipoMovBan = value.Pardet_Secuencia
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Tipo de movimiento", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 150, True)> _
  Public ReadOnly Property PardetTipoMovBanString() As String
    Get
      If PardetTipoMovBan Is Nothing Then
        Return String.Empty
      Else
        Return mPardetTipoMovBan.Pardet_Descripcion
      End If
    End Get
  End Property

  'Parametrodet
  Public Overridable Property PardetBanco() As WWTSParametroDet
    Get
      If Me.mPardetBanco Is Nothing AndAlso Pardet_Banco > 0 Then
        Me.mPardetBanco = New WWTSParametroDet(OperadorDatos, Parame_Banco, Pardet_Banco)
      End If
      Return Me.mPardetBanco
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetBanco = value
      Parame_Banco = value.Parame_Codigo
      Pardet_Banco = value.Pardet_Secuencia
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Banco", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property PardetBancoString() As String
    Get
      If PardetBanco Is Nothing Then
        Return String.Empty
      Else
        Return mPardetBanco.Pardet_Descripcion
      End If
    End Get
  End Property

  'Entidad
  Public Overridable Property EntidadBeneficiario() As Entidad
    Get
      If Me.mEntidadBeneficiario Is Nothing And Entida_Beneficiario > 0 Then
        Me.mEntidadBeneficiario = New Entidad(OperadorDatos, Entida_Beneficiario)
      End If
      Return Me.mEntidadBeneficiario
    End Get
    Set(ByVal value As Entidad)
      Me.mEntidadBeneficiario = value
      If value Is Nothing Then
        'Throw New Exception("Debe seleccionar una persona beneficiaria")
        Entida_Beneficiario = 0
      Else
        Entida_Beneficiario = Me.mEntidadBeneficiario.Entida_Codigo
      End If
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Beneficiario", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 250, True)> _
  Public ReadOnly Property BeneficiarioString() As String
    Get
      If EntidadBeneficiario Is Nothing Then
        Return String.Empty
      Else
        Return mEntidadBeneficiario.NombreCompleto
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Valor", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Decimales, 100, True)> _
  Public ReadOnly Property Valor() As Decimal
    Get
      If MovimientoContableDet Is Nothing Then
        Return 0
      Else
        Return mMovimientoContableDet.MoCtde_Valor
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Valor en letras", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 200, False)> _
  Public ReadOnly Property ValorenLetras() As String
    Get
      Return Utilerias.NumaLetras(Valor)
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Fecha en Letras", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 200, False)> _
  Public ReadOnly Property FechaenLetras() As String
    Get
      Return String.Format("{0}, {1} de {2} de {3}", Empresa.Entidadjuridica.Entidad.CiudadString, Me.MovBan_FechaCheque.Day, Enumerados.MesesdelAnioList(Me.MovBan_FechaCheque.Month - 1).Descripcion, Me.MovBan_FechaCheque.Year)
    End Get
  End Property

  Public ReadOnly Property Descripcion() As String
    Get
      Return String.Format("{0} Cta {1} #{2} {3} {4}", PardetBancoString, CtaBan_Numero.Trim, MovBan_NumCheque, BeneficiarioString, MovimientoContableDet.MoCtde_Valor)
    End Get
  End Property

  'Movimientocontabledet
  Public Overridable Property MovimientoContableDet() As MovimientoContableDet
    Get
      If Me.mMovimientoContableDet Is Nothing Then
        Me.mMovimientoContableDet = New MovimientoContableDet(New MovimientoContable(New Empresa(OperadorDatos, Me.Empres_Codigo), New RegistroContable(OperadorDatos, RegCtb_Secuencia), New WWTSParametroDet(OperadorDatos, Parame_TipoCompte, Pardet_TipoCompte), MovCtb_Secuencia), MoCtde_Secuencia)
      End If
      Return Me.mMovimientoContableDet
    End Get
    Set(ByVal value As MovimientoContableDet)
      Me.mMovimientoContableDet = value
      Me.Empres_Codigo = value.Empres_Codigo
      Me.RegCtb_Secuencia = value.RegCtb_Secuencia
      Me.Parame_TipoCompte = value.Parame_TipoCompte
      Me.Pardet_TipoCompte = value.Pardet_TipoCompte
      Me.MovCtb_Secuencia = value.MovCtb_Secuencia
      Me.MoCtde_Secuencia = value.MoCtde_Secuencia
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Descripción", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 250, True)> _
Public ReadOnly Property MovimientoContableDetDescripcion() As String
    Get
      If MovimientoContableDet Is Nothing Then
        Return String.Empty
      Else
        Return mMovimientoContableDet.MoCtde_Detalle
      End If
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Empres_Codigo = CType(Fila("Empres_Codigo"), Integer)
    RegCtb_Secuencia = CType(Fila("RegCtb_Secuencia"), Integer)
    Parame_TipoCompte = CType(Fila("Parame_TipoCompte"), Integer)
    Pardet_TipoCompte = CType(Fila("Pardet_TipoCompte"), Integer)
    MovCtb_Secuencia = CType(Fila("MovCtb_Secuencia"), Integer)
    MoCtde_Secuencia = CType(Fila("MoCtde_Secuencia"), Integer)
    Parame_Banco = CType(Fila("Parame_Banco"), Integer)
    Pardet_Banco = CType(Fila("Pardet_Banco"), Integer)
    CtaBan_Numero = CType(Fila("CtaBan_Numero"), String)
    Dim obj As Object
    obj = Fila("MovBan_NumCheque")
    If TypeOf obj Is DBNull Then
      MovBan_NumCheque = 0
    Else
      MovBan_NumCheque = CType(obj, Integer)
    End If
    obj = Fila("MovBan_FechaCheque")
    If TypeOf obj Is DBNull Then
      MovBan_FechaCheque = Now.Date
    Else
      MovBan_FechaCheque = CType(obj, Date)
    End If
    obj = Fila("Entida_Beneficiario")
    If TypeOf obj Is DBNull Then
      Entida_Beneficiario = 0
    Else
      Entida_Beneficiario = CType(obj, Integer)
    End If
    Parame_TipoMovBan = CType(Fila("Parame_TipoMovBan"), Integer)
    Pardet_TipoMovBan = CType(Fila("Pardet_TipoMovBan"), Integer)
    MovBan_esConciliado = CType(Fila("MovBan_esConciliado"), Boolean)
    mCuentabancaria = Nothing
    mPardetTipoMovBan = Nothing
    mPardetBanco = Nothing
    mEntidadBeneficiario = Nothing
    mMovimientoContableDet = Nothing
    mEmpresa = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As New DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@RegCtb_Secuencia", RegCtb_Secuencia)
    OperadorDatos.AgregarParametro("@Parame_TipoCompte", Parame_TipoCompte)
    OperadorDatos.AgregarParametro("@Pardet_TipoCompte", Pardet_TipoCompte)
    OperadorDatos.AgregarParametro("@MovCtb_Secuencia", MovCtb_Secuencia)
    OperadorDatos.AgregarParametro("@MoCtde_Secuencia", MoCtde_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@RegCtb_Secuencia", RegCtb_Secuencia)
    OperadorDatos.AgregarParametro("@Parame_TipoCompte", Parame_TipoCompte)
    OperadorDatos.AgregarParametro("@Pardet_TipoCompte", Pardet_TipoCompte)
    OperadorDatos.AgregarParametro("@MovCtb_Secuencia", MovCtb_Secuencia)
    OperadorDatos.AgregarParametro("@MoCtde_Secuencia", MoCtde_Secuencia)
    OperadorDatos.AgregarParametro("@Parame_Banco", Parame_Banco)
    OperadorDatos.AgregarParametro("@Pardet_Banco", Pardet_Banco)
    OperadorDatos.AgregarParametro("@CtaBan_Numero", CtaBan_Numero)
    OperadorDatos.AgregarParametro("@Parame_TipoMovBan", Parame_TipoMovBan)
    OperadorDatos.AgregarParametro("@Pardet_TipoMovBan", Pardet_TipoMovBan)
    If Pardet_TipoMovBan = Enumerados.enumTipoMovimientoBancario.Cheque Then
      OperadorDatos.AgregarParametro("@MovBan_NumCheque", MovBan_NumCheque)
      OperadorDatos.AgregarParametro("@MovBan_FechaCheque", MovBan_FechaCheque.Date)
      OperadorDatos.AgregarParametro("@Entida_Beneficiario", Entida_Beneficiario)
    End If
    OperadorDatos.AgregarParametro("@MovBan_esConciliado", MovBan_esConciliado)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If Not OperadorDatos.EstaenTransaccion Then
        EsNuevo = False
        EsModificado = False
      End If
    End If
    Return bReturn
  End Function

  Public Overridable Function AceptarCambios() As Boolean
    EsNuevo = False
    EsModificado = False
  End Function

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@RegCtb_Secuencia", RegCtb_Secuencia)
    OperadorDatos.AgregarParametro("@Parame_TipoCompte", Parame_TipoCompte)
    OperadorDatos.AgregarParametro("@Pardet_TipoCompte", Pardet_TipoCompte)
    OperadorDatos.AgregarParametro("@MovCtb_Secuencia", MovCtb_Secuencia)
    OperadorDatos.AgregarParametro("@MoCtde_Secuencia", MoCtde_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function

  Public Function Clone() As Object Implements System.ICloneable.Clone
    Dim _objeto As New MovimientoBancario(OperadorDatos, True)
    _objeto.Empres_Codigo = Empres_Codigo
    _objeto.RegCtb_Secuencia = RegCtb_Secuencia
    _objeto.Parame_TipoCompte = Parame_TipoCompte
    _objeto.Pardet_TipoCompte = Pardet_TipoCompte
    _objeto.MovCtb_Secuencia = MovCtb_Secuencia
    _objeto.MoCtde_Secuencia = MoCtde_Secuencia
    _objeto.Parame_Banco = Parame_Banco
    _objeto.Pardet_Banco = Pardet_Banco
    _objeto.CtaBan_Numero = CtaBan_Numero
    _objeto.MovBan_NumCheque = MovBan_NumCheque
    _objeto.MovBan_FechaCheque = MovBan_FechaCheque
    _objeto.Entida_Beneficiario = Entida_Beneficiario
    _objeto.Parame_TipoMovBan = Parame_TipoMovBan
    _objeto.Pardet_TipoMovBan = Pardet_TipoMovBan
    _objeto.MovBan_esConciliado = MovBan_esConciliado
    mCuentabancaria = Nothing
    mPardetTipoMovBan = Nothing
    mEntidadBeneficiario = Nothing
    mMovimientoContableDet = Nothing
    Return _objeto
  End Function
End Class
#End Region

#Region "MovimientoBancarioList"
Public Class MovimientoBancarioList
  Inherits System.ComponentModel.BindingList(Of MovimientoBancario)

  Public Shared Function ObtenerLista(ByVal _Empresa As Empresa, ByVal _RegistroContable As RegistroContable, ByVal _CuentaBancaria As CuentaBancaria, Optional ByVal _pardetTipoMovBan As WWTSParametroDet = Nothing, Optional ByVal _desde As Date = Nothing, Optional ByVal _hasta As Date = Nothing, Optional ByVal _filtro As String = "") As MovimientoBancarioList
    Dim oResult As MovimientoBancarioList = New MovimientoBancarioList
    If _RegistroContable IsNot Nothing AndAlso _CuentaBancaria IsNot Nothing Then
      Dim bReturn As Boolean
      Dim ds As DataTable = Nothing
      With _CuentaBancaria.OperadorDatos
        .AgregarParametro("@Accion", "F")
        .AgregarParametro("@Empres_Codigo", _Empresa.Empres_Codigo)
        .AgregarParametro("@RegCtb_Secuencia", _RegistroContable.RegCtb_Secuencia)
        .AgregarParametro("@Parame_Banco", _CuentaBancaria.Parame_Banco)
        .AgregarParametro("@Pardet_Banco", _CuentaBancaria.Pardet_Banco)
        .AgregarParametro("@CtaBan_Numero", _CuentaBancaria.CtaBan_Numero)
        If _pardetTipoMovBan IsNot Nothing Then
          .AgregarParametro("@Parame_TipoMovBan", _pardetTipoMovBan.Parame_Codigo)
          .AgregarParametro("@Pardet_TipoMovBan", _pardetTipoMovBan.Pardet_Secuencia)
        End If
        If Not _desde = Nothing And Not _hasta = Nothing Then
          .AgregarParametro("@fechadesde", _desde.Date)
          .AgregarParametro("@fechahasta", _hasta.Date.AddDays(1))
        End If
        .AgregarParametro("@filtro", _filtro)
        .Procedimiento = "proc_MovimientoBancario"
        bReturn = .Ejecutar(ds)
        .LimpiarParametros()
      End With
      If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
        For Each _dr As DataRow In ds.Rows
          Dim _fila As New MovimientoBancario(_RegistroContable.OperadorDatos, False)
          _fila.MapearDataRowaObjeto(_dr)
          oResult.Add(_fila)
        Next
      End If
    End If
    Return oResult
  End Function
End Class
#End Region
