'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports Infoware.Reglas.General
Imports WWTS.General.Reglas


#Region "Cheque"
Public Class Cheque
  Const _Procedimiento As String = "proc_Cheque"

  Private mCuentaBancaria As CuentaBancaria = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _CuentaBancaria As CuentaBancaria, ByVal _EsNuevo As Boolean)
    Me.New(_CuentaBancaria.OperadorDatos, True)
    CuentaBancaria = _CuentaBancaria
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _CuentaBancaria As CuentaBancaria, ByVal _Cheque_Numero As Integer)
    Me.New(_CuentaBancaria, False)
    Cheque_Numero = _Cheque_Numero
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto Cheque")
    End If
  End Sub

  'CuentaBancaria
  Public Overridable Property Cuentabancaria() As CuentaBancaria
    Get
      If Me.mCuentabancaria Is Nothing AndAlso Not Empres_Codigo = 0 Then
        Me.mCuentabancaria = New CuentaBancaria(New Empresa(OperadorDatos, Empres_Codigo), New WWTSParametroDet(OperadorDatos, Parame_Banco, Pardet_Banco), CtaBan_Numero)
      End If
      Return Me.mCuentabancaria
    End Get
    Set(ByVal value As CuentaBancaria)
      Me.mCuentabancaria = value
      Me.Parame_Banco = value.Parame_Banco
      Me.Pardet_Banco = value.Pardet_Banco
      Me.CtaBan_Numero = value.CtaBan_Numero
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Banco", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 150, True)> _
  Public ReadOnly Property Banco() As String
    Get
      If Cuentabancaria Is Nothing Then
        Return String.Empty
      Else
        Return mCuentaBancaria.BancoString
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Cuenta Bancaria", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 250, True)> _
  Public ReadOnly Property CuentaBancariaString() As String
    Get
      If Cuentabancaria Is Nothing Then
        Return String.Empty
      Else
        Return mCuentaBancaria.CtaBan_Numero
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("No. Cheque", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Numero, 100, True)> _
  Public ReadOnly Property ChequeNumero() As Integer
    Get
      Return Cheque_Numero
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Anulada", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Logico, 100, True)> _
  Public ReadOnly Property Anulado() As Boolean
    Get
      Return Cheque_Anulado
    End Get
  End Property

  Public ReadOnly Property Descripcion() As String
    Get
      Return String.Format("{0} {1} {2}", Banco, CuentaBancariaString, Cheque_Numero)
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Empres_Codigo = CType(Fila("Empres_Codigo"), Integer)
    Parame_Banco = CType(Fila("Parame_Banco"), Integer)
    Pardet_Banco = CType(Fila("Pardet_Banco"), Integer)
    CtaBan_Numero = CType(Fila("CtaBan_Numero"), Integer)
    Cheque_Numero = CType(Fila("Cheque_Numero"), Integer)
    Cheque_Anulado = CType(Fila("Cheque_Anulado"), Boolean)
    mCuentaBancaria = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As New DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Banco", Parame_Banco)
    OperadorDatos.AgregarParametro("@Pardet_Banco", Pardet_Banco)
    OperadorDatos.AgregarParametro("@CtaBan_Numero", CtaBan_Numero)
    OperadorDatos.AgregarParametro("@Cheque_Numero", Cheque_Numero)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    'If Not EsNuevo And Not EsModificado Then
    '  Return True
    'End If
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True

    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Banco", Parame_Banco)
    OperadorDatos.AgregarParametro("@Pardet_Banco", Pardet_Banco)
    OperadorDatos.AgregarParametro("@CtaBan_Numero", CtaBan_Numero)
    OperadorDatos.AgregarParametro("@Cheque_Numero", Cheque_Numero)
    OperadorDatos.AgregarParametro("@Cheque_Anulado", Cheque_Anulado)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If Not OperadorDatos.EstaenTransaccion Then
        EsNuevo = False
        EsModificado = False
      End If
    End If
    If bReturn Then
      AceptarCambios()
    End If
    Return bReturn
  End Function

  Public Overridable Function AceptarCambios() As Boolean
    EsNuevo = False
    EsModificado = False
  End Function

  Public Overridable Function Eliminar() As Boolean
    If EsNuevo Then
      Return True
    End If

    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Banco", Parame_Banco)
    OperadorDatos.AgregarParametro("@Pardet_Banco", Pardet_Banco)
    OperadorDatos.AgregarParametro("@CtaBan_Numero", CtaBan_Numero)
    OperadorDatos.AgregarParametro("@Cheque_Numero", Cheque_Numero)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function

End Class
#End Region

#Region "ChequeList"
Public Class ChequeList
  Inherits System.ComponentModel.BindingList(Of Cheque)

  Public Shared Function ObtenerLista(ByVal _OperadorDatos As OperadorDatos, Optional ByVal _filtro As String = "") As ChequeList
    Dim oResult As ChequeList = New ChequeList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_Cheque"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New Cheque(_OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function ObtenerLista(ByVal _CuentaBancaria As CuentaBancaria, Optional ByVal _filtro As String = "") As ChequeList
    Dim oResult As ChequeList = New ChequeList
    Dim bReturn As Boolean
    Dim ds As New DataTable
    With _CuentaBancaria.OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Empres_Codigo", _CuentaBancaria.Empres_Codigo)
      .AgregarParametro("@Parame_Banco", _CuentaBancaria.Parame_Banco)
      .AgregarParametro("@Pardet_Banco", _CuentaBancaria.Pardet_Banco)
      .AgregarParametro("@CtaBan_Numero", _CuentaBancaria.CtaBan_Numero)
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_Cheque"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New Cheque(_CuentaBancaria, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
