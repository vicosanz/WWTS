'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports Infoware.Reglas.General


#Region "CuentaContable"
Public Class CuentaContable

  Const _Procedimiento As String = "proc_CuentaContable"

  Private mPardetTipoCtaCtble As WWTSParametroDet = Nothing

  Private mCuentaContablePadre As CuentaContable = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _CtaCtb_Codigo As String)
    Me.New(_OperadorDatos, False)
    CtaCtb_Codigo = _CtaCtb_Codigo
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto CuentaContable")
    End If
  End Sub

  Public Shadows Property Pardet_TipoCtaCtbleEnum() As Enumerados.enumTipoCuentaContable
    Get
      Return CType(Pardet_TipoCtaCtble, Enumerados.enumTipoCuentaContable)
    End Get
    Set(ByVal value As Enumerados.enumTipoCuentaContable)
      Pardet_TipoCtaCtble = CInt(value)
    End Set
  End Property

  'PardetTipoCtaCtble
  Public Overridable Property PardetTipoCtaCtble() As WWTSParametroDet
    Get
      If Me.mPardetTipoCtaCtble Is Nothing AndAlso Pardet_TipoCtaCtble > 0 Then
        Me.mPardetTipoCtaCtble = New WWTSParametroDet(OperadorDatos, Parame_TipoCtaCtble, Pardet_TipoCtaCtble)
      End If
      Return Me.mPardetTipoCtaCtble
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetTipoCtaCtble = value
      If value IsNot Nothing Then
        Parame_TipoCtaCtble = value.Parame_Codigo
        Pardet_TipoCtaCtble = value.Pardet_Secuencia
      Else
        Parame_TipoCtaCtble = 0
        Pardet_TipoCtaCtble = 0
      End If
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Tipo de cuenta", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 120, True)> _
  Public ReadOnly Property TipoCtaCtbleString() As String
    Get
      If PardetTipoCtaCtble Is Nothing Then
        Return String.Empty
      Else
        Return mPardetTipoCtaCtble.Pardet_Descripcion
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Descripción", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 250, True)> _
  Public ReadOnly Property Descripcion() As String
    Get
      Return String.Format("{0}{1}", Space(IIf(CtaCtb_Nivel <= 1, 0, (CtaCtb_Nivel - 1) * 2)), CtaCtb_Descripcion.Trim)
    End Get
  End Property

  Public ReadOnly Property DescripcionLarga() As String
    Get
      Return String.Format("{0} {1}{2}", CtaCtb_Codigo, Space(IIf(CtaCtb_Nivel <= 1, 0, (CtaCtb_Nivel - 1) * 2)), CtaCtb_Descripcion.Trim)
    End Get
  End Property

  Public Property CuentaContablePadre() As CuentaContable
    Get
      If mCuentaContablePadre Is Nothing AndAlso Not CtaCtb_Padre = String.Empty Then
        mCuentaContablePadre = New CuentaContable(OperadorDatos, CtaCtb_Padre)
      End If
      Return mCuentaContablePadre
    End Get
    Set(ByVal value As CuentaContable)
      mCuentaContablePadre = value
      If value Is Nothing Then
        CtaCtb_Padre = ""
      Else
        CtaCtb_Padre = value.CtaCtb_Codigo
      End If
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Padre", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 250, True)> _
  Public ReadOnly Property CuentaContablePadreString() As String
    Get
      If CuentaContablePadre Is Nothing Then
        Return String.Empty
      Else
        Return mCuentaContablePadre.DescripcionLarga
      End If
    End Get
  End Property

  Public ReadOnly Property EsCuentaResultado() As Boolean
    Get
      If CtaCtb_Codigo = String.Empty Then
        Return False
      Else
        If CInt(CtaCtb_Codigo.Substring(0, 1)) > 3 Then
          Return True
        Else
          Return False
        End If
      End If
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    CtaCtb_Codigo = CType(Fila("CtaCtb_Codigo"), String)
    CtaCtb_Descripcion = CType(Fila("CtaCtb_Descripcion"), String)
    Dim obj As Object
    obj = Fila("Parame_TipoCtaCtble")
    If TypeOf obj Is DBNull Then
      Parame_TipoCtaCtble = 0
    Else
      Parame_TipoCtaCtble = CType(obj, Integer)
    End If
    obj = Fila("Pardet_TipoCtaCtble")
    If TypeOf obj Is DBNull Then
      Pardet_TipoCtaCtble = 0
    Else
      Pardet_TipoCtaCtble = CType(obj, Integer)
    End If
    CtaCtb_EsGrupo = CType(Fila("CtaCtb_EsGrupo"), Boolean)
    CtaCtb_Nivel = CType(Fila("CtaCtb_Nivel"), Integer)

    obj = Fila("CtaCtb_Padre")
    If TypeOf obj Is DBNull Then
      CtaCtb_Padre = ""
    Else
      CtaCtb_Padre = CType(obj, String)
    End If
    obj = Fila("CtaCtb_Dif")
    If TypeOf obj Is DBNull Then
      CtaCtb_Dif = ""
    Else
      CtaCtb_Dif = CType(obj, String)
    End If
    mPardetTipoCtaCtble = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As System.Data.datatable = New System.Data.datatable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@CtaCtb_Codigo", CtaCtb_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    If Not EsNuevo And Not EsModificado Then
      Return True
    End If
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@CtaCtb_Codigo", CtaCtb_Codigo)
    OperadorDatos.AgregarParametro("@CtaCtb_Descripcion", CtaCtb_Descripcion)
    If Not Pardet_TipoCtaCtble = 0 Then
      OperadorDatos.AgregarParametro("@Parame_TipoCtaCtble", Parame_TipoCtaCtble)
      OperadorDatos.AgregarParametro("@Pardet_TipoCtaCtble", Pardet_TipoCtaCtble)
    End If
    OperadorDatos.AgregarParametro("@CtaCtb_EsGrupo", CtaCtb_EsGrupo)
    OperadorDatos.AgregarParametro("@CtaCtb_Nivel", CtaCtb_Nivel)
    OperadorDatos.AgregarParametro("@CtaCtb_Padre", CtaCtb_Padre)
    OperadorDatos.AgregarParametro("@CtaCtb_Dif", CtaCtb_Dif)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      EsNuevo = False
      EsModificado = False
    End If
    Return bReturn
  End Function

  Public Overridable Function Eliminar() As Boolean
    If EsNuevo Then
      Return True
    End If
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@CtaCtb_Codigo", CtaCtb_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "CuentaContableList"
Public Class CuentaContableList
  Inherits System.ComponentModel.BindingList(Of CuentaContable)

  Public Shared Function ObtenerLista(ByVal _OperadorDatos As OperadorDatos, Optional ByVal _TipoCuenta As WWTSParametroDet = Nothing, Optional ByVal _filtro As String = "") As CuentaContableList
    Dim oResult As CuentaContableList = New CuentaContableList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _OperadorDatos
      .AgregarParametro("@Accion", "F")
      If _TipoCuenta IsNot Nothing Then
        .AgregarParametro("@Pardet_TipoCtaCtble", _TipoCuenta.Pardet_Secuencia)
      End If
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_CuentaContable"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New CuentaContable(_OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function PosiblesPadres(ByVal _OperadorDatos As OperadorDatos, Optional ByVal _cuenta As String = "") As CuentaContableList
    Dim oResult As CuentaContableList = New CuentaContableList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _OperadorDatos
      .AgregarParametro("@Accion", "FP")
      .AgregarParametro("@CtaCtb_Codigo", _cuenta)
      .Procedimiento = "proc_CuentaContable"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New CuentaContable(_OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
