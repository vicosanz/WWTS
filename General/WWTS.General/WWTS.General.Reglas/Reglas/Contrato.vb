'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports Infoware.Reglas.General
Imports Infoware.Reportes

#Region "Contrato"
Public Class Contrato

  Const _Procedimiento As String = "proc_Contrato"

  Private mEmpleado As Empleado = Nothing

  Private mPatron_CodigoNuevo As Integer = 0

  Private mPatrono As Patrono = Nothing

  Private mPatronoNuevo As Patrono = Nothing

  Private mTipocontrato As TipoContrato = Nothing

  Private mPardetMotivoSalida As WWTSParametroDet = Nothing

  Private mPardetTipoLiquidacion As WWTSParametroDet = Nothing

  Private mPardetAdjuntoEvaluacion As WWTSParametroDet = Nothing

  Private mesCerrado As Boolean = False

  Private mSeleccionado As Boolean = False

  Private mSucursal As Sucursal = Nothing

  Private mPardetArea As WWTSParametroDet = Nothing

  Private mPardetEstadoContrato As WWTSParametroDet = Nothing

  Private mPardetSeccion As WWTSParametroDet = Nothing

  Private mCargo As Cargo = Nothing

  Private mPardetDepartamento As WWTSParametroDet = Nothing

  Private mDiasTrabajados As Integer = -1

  Private mAniosTrabajados As Decimal = -1

  Private mPardetSubCentroCosto As WWTSParametroDet = Nothing

  Private mPardetLote As WWTSParametroDet = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Empleado As Empleado)
    Me.New(_OperadorDatos, True)
    Me.Empleado = _Empleado
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Entida_Codigo As Integer, ByVal _Patron_Codigo As Integer, ByVal _Contra_Secuencia As Integer)
    Me.New(_OperadorDatos, False)
    Entida_Codigo = _Entida_Codigo
    Patron_Codigo = _Patron_Codigo
    Contra_Secuencia = _Contra_Secuencia
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto Contrato")
    End If
  End Sub

  Public Property Seleccionado() As Boolean
    Get
      Return mSeleccionado
    End Get
    Set(ByVal value As Boolean)
      mSeleccionado = value
    End Set
  End Property

  'Sucursal
  Public Overridable Property Sucursal() As Sucursal
    Get
      If Me.mSucursal Is Nothing AndAlso Sucurs_Codigo > 0 Then
        Me.mSucursal = New Sucursal(New Empresa(OperadorDatos, Empres_Codigo), Sucurs_Codigo)
      End If
      Return Me.mSucursal
    End Get
    Set(ByVal value As Sucursal)
      Me.mSucursal = value
      Empres_Codigo = value.Empres_Codigo
      Sucurs_Codigo = value.Sucurs_Codigo
    End Set
  End Property

  'Empleado
  Public Overridable Property Empleado() As Empleado
    Get
      If Me.mEmpleado Is Nothing AndAlso Entida_Codigo > 0 Then
        Me.mEmpleado = New Empleado(OperadorDatos, Entida_Codigo)
      End If
      Return Me.mEmpleado
    End Get
    Set(ByVal value As Empleado)
      Me.mEmpleado = value
      Entida_Codigo = value.Entida_Codigo
    End Set
  End Property

  'Patrono
  Public Overridable Property Patrono() As Patrono
    Get
      If Me.mPatrono Is Nothing AndAlso Patron_Codigo > 0 Then
        Me.mPatrono = New Patrono(OperadorDatos, Patron_Codigo)
      End If
      Return Me.mPatrono
    End Get
    Set(ByVal value As Patrono)
      Me.mPatrono = value
      Patron_Codigo = value.Patron_Codigo
    End Set
  End Property

  'Patrono
  Public Overridable Property PatronoNuevo() As Patrono
    Get
      If Me.mPatronoNuevo Is Nothing AndAlso mPatron_CodigoNuevo > 0 Then
        Me.mPatronoNuevo = New Patrono(OperadorDatos, mPatron_CodigoNuevo)
      End If
      Return Me.mPatronoNuevo
    End Get
    Set(ByVal value As Patrono)
      Me.mPatronoNuevo = value
      mPatron_CodigoNuevo = value.Patron_Codigo
    End Set
  End Property

  'Tipocontrato
  Public Overridable Property Tipocontrato() As TipoContrato
    Get
      If Me.mTipocontrato Is Nothing AndAlso TipCon_Codigo > 0 Then
        Me.mTipocontrato = New TipoContrato(OperadorDatos, Patron_Codigo, TipCon_Codigo)
      End If
      Return Me.mTipocontrato
    End Get
    Set(ByVal value As TipoContrato)
      Me.mTipocontrato = value
      'Patron_Codigo = value.patron_codigo
      TipCon_Codigo = value.TipCon_Codigo
    End Set
  End Property

  'PardetMotivoSalida
  Public Overridable Property PardetMotivoSalida() As WWTSParametroDet
    Get
      If Me.mPardetMotivoSalida Is Nothing AndAlso Pardet_TipoMotivoSalida > 0 Then
        Me.mPardetMotivoSalida = New WWTSParametroDet(OperadorDatos, Parame_TipoMotivoSalida, Pardet_TipoMotivoSalida)
      End If
      Return Me.mPardetMotivoSalida
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetMotivoSalida = value
      If value Is Nothing Then
        Parame_TipoMotivoSalida = 0
        Pardet_TipoMotivoSalida = 0
      Else
        Parame_TipoMotivoSalida = value.Parame_Codigo
        Pardet_TipoMotivoSalida = value.Pardet_Secuencia
      End If
    End Set
  End Property

  'PardetAdjuntoEvaluacion
  Public Overridable Property PardetAdjuntoEvaluacion() As WWTSParametroDet
    Get
      If Me.mPardetAdjuntoEvaluacion Is Nothing AndAlso Pardet_AdjuntoEvaluacion > 0 Then
        Me.mPardetAdjuntoEvaluacion = New WWTSParametroDet(OperadorDatos, Parame_AdjuntoEvaluacion, Pardet_AdjuntoEvaluacion)
      End If
      Return Me.mPardetAdjuntoEvaluacion
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetAdjuntoEvaluacion = value
      If value Is Nothing Then
        Parame_AdjuntoEvaluacion = 0
        Pardet_AdjuntoEvaluacion = 0
      Else
        Parame_AdjuntoEvaluacion = value.Parame_Codigo
        Pardet_AdjuntoEvaluacion = value.Pardet_Secuencia
      End If
    End Set
  End Property

  'PardetTipoLiquidacion
  Public Overridable Property PardetTipoLiquidacion() As WWTSParametroDet
    Get
      If Me.mPardetTipoLiquidacion Is Nothing AndAlso Pardet_TipoLiquidacion > 0 Then
        Me.mPardetTipoLiquidacion = New WWTSParametroDet(OperadorDatos, Parame_TipoLiquidacion, Pardet_TipoLiquidacion)
      End If
      Return Me.mPardetTipoLiquidacion
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetTipoLiquidacion = value
      If value Is Nothing Then
        Parame_TipoLiquidacion = 0
        Pardet_TipoLiquidacion = 0
      Else
        Parame_TipoLiquidacion = value.Parame_Codigo
        Pardet_TipoLiquidacion = value.Pardet_Secuencia
      End If
    End Set
  End Property

  'PardetArea
  Public Overridable Property PardetArea() As WWTSParametroDet
    Get
      If Me.mPardetArea Is Nothing AndAlso Pardet_Area > 0 Then
        Me.mPardetArea = New WWTSParametroDet(OperadorDatos, Parame_Area, Pardet_Area)
      End If
      Return Me.mPardetArea
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetArea = value
      If value Is Nothing Then
        Parame_Area = 0
        Pardet_Area = 0
      Else
        Parame_Area = value.Parame_Codigo
        Pardet_Area = value.Pardet_Secuencia
      End If
    End Set
  End Property

  'PardetEstadoContrato
  Public Overridable Property PardetEstadoContrato() As WWTSParametroDet
    Get
      If Me.mPardetEstadoContrato Is Nothing AndAlso Pardet_EstadoContrato > 0 Then
        Me.mPardetEstadoContrato = New WWTSParametroDet(OperadorDatos, Parame_EstadoContrato, Pardet_EstadoContrato)
      End If
      Return Me.mPardetEstadoContrato
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetEstadoContrato = value
      If value Is Nothing Then
        Parame_EstadoContrato = 0
        Pardet_EstadoContrato = 0
      Else
        Parame_EstadoContrato = value.Parame_Codigo
        Pardet_EstadoContrato = value.Pardet_Secuencia
      End If
    End Set
  End Property

  'PardetDepartamento
  Public Overridable Property PardetDepartamento() As WWTSParametroDet
    Get
      If Me.mPardetDepartamento Is Nothing AndAlso Pardet_Departamento > 0 Then
        Me.mPardetDepartamento = New WWTSParametroDet(OperadorDatos, Parame_Departamento, Pardet_Departamento)
      End If
      Return Me.mPardetDepartamento
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetDepartamento = value
      If value Is Nothing Then
        Parame_Departamento = 0
        Pardet_Departamento = 0
      Else
        Parame_Departamento = value.Parame_Codigo
        Pardet_Departamento = value.Pardet_Secuencia
      End If
    End Set
  End Property

  'PardetDepartamento
  Public Overridable Property PardetSubCentroCosto() As WWTSParametroDet
    Get
      If Me.mPardetSubCentroCosto Is Nothing AndAlso Pardet_SubCentroCosto > 0 Then
        Me.mPardetSubCentroCosto = New WWTSParametroDet(OperadorDatos, Parame_SubCentroCosto, Pardet_SubCentroCosto)
      End If
      Return Me.mPardetSubCentroCosto
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetSubCentroCosto = value
      If value Is Nothing Then
        Parame_SubCentroCosto = 0
        Pardet_SubCentroCosto = 0
      Else
        Parame_SubCentroCosto = value.Parame_Codigo
        Pardet_SubCentroCosto = value.Pardet_Secuencia
      End If
    End Set
  End Property

  'PardetLote
  Public Overridable Property PardetLote() As WWTSParametroDet
    Get
      If Me.mPardetLote Is Nothing AndAlso Pardet_Lote > 0 Then
        Me.mPardetLote = New WWTSParametroDet(OperadorDatos, Parame_Lote, Pardet_Lote)
      End If
      Return Me.mPardetLote
    End Get
    Set(ByVal value As WWTSParametroDet)
      Me.mPardetLote = value
      If value Is Nothing Then
        Parame_Lote = 0
        Pardet_Lote = 0
      Else
        Parame_Lote = value.Parame_Codigo
        Pardet_Lote = value.Pardet_Secuencia
      End If
    End Set
  End Property

  Public ReadOnly Property Contra_SueldoenLetras() As String
    Get
      Return Utilerias.NumaLetras(Sueldo)
    End Get
  End Property

  Public Property esCerrado() As Boolean
    Get
      Return mesCerrado
    End Get
    Set(ByVal Value As Boolean)
      mesCerrado = Value
    End Set
  End Property

  Public ReadOnly Property Activo() As Boolean
    Get
      If Now.Date >= Me.Contra_Desde Then
        If Not mesCerrado Then
          Return True
        Else
          If Me.Contra_Hasta >= Now.Date Then
            Return True
          End If
        End If
      End If
      Return False
    End Get
  End Property

  'pedro
  Public ReadOnly Property MotivoSalidaString() As String
    Get
      If PardetMotivoSalida Is Nothing Then
        Return String.Empty
      Else
        Return Me.PardetMotivoSalida.Pardet_Descripcion + ", " + Me.Contra_MotivoSalida
      End If
    End Get
  End Property

  'pedro
  Public ReadOnly Property PardetTipoLiquidacionString() As String
    Get
      If PardetTipoLiquidacion Is Nothing Then
        Return String.Empty
      Else
        Return Me.PardetTipoLiquidacion.Pardet_Descripcion
      End If
    End Get
  End Property

  'Cargo
  Public Overridable Property Cargo() As Cargo
    Get
      If Me.mCargo Is Nothing AndAlso Cargo_Secuencia > 0 Then
        Me.mCargo = New Cargo(OperadorDatos, Parame_Departamento, Pardet_Departamento, Parame_Area, Pardet_Area, Cargo_Secuencia)
      End If
      Return Me.mCargo
    End Get
    Set(ByVal value As Cargo)
      Me.mCargo = value
      If value Is Nothing Then
        Cargo_Secuencia = 0
      Else
        Parame_Departamento = mCargo.Parame_Departamento
        Pardet_Departamento = mCargo.Pardet_Departamento
        Parame_Area = mCargo.Parame_Area
        Pardet_Area = mCargo.Pardet_Area
        Cargo_Secuencia = mCargo.Cargo_Secuencia
      End If
    End Set
  End Property


  <Infoware.Reportes.CampoReporteAtributo("Patrono", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property PatronoString() As String
    Get
      Return Me.Patrono.NombreCompleto
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("RUCPatrono", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property RUCPatronoString() As String
    Get
      Return Me.Patrono.Entidadjuridica.Entidad.RUC
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("RepresLegal", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property RepresLegalString() As String
    Get
      Return Me.Patrono.Entidadjuridica.RepresentanteLegalString
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("CedRepLegal", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property CedRepLegalString() As String
    Get
      If Me.Patrono.Entidadjuridica.RepresentanteLegal Is Nothing Then
        Return "*N/A*"
      Else
        Return Me.Patrono.Entidadjuridica.RepresentanteLegal.Entidad.Cedula
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Empleado", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property EmpleadoString() As String
    Get
      If Empleado Is Nothing Then
        Return String.Empty
      Else
        Return Empleado.NombreCompleto
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("CedEmpleado", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property CedEmpleadoString() As String
    Get
      Return Me.Empleado.Cedula
    End Get
  End Property

  Public ReadOnly Property CodigoEmpleado() As String
    Get
      Return Me.Empleado.CodigoEmpleado
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Provincia", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property ProvinciaString() As String
    Get
      Return Me.Patrono.PardetParroquia.PardetPadre.PardetPadre.Pardet_Descripcion
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Canton", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property CantonString() As String
    Get
      Return Me.Patrono.PardetParroquia.PardetPadre.Pardet_Descripcion
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Fecha", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property FechaString() As String
    Get
      Return Me.Contra_Desde.ToLongDateString
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Cargo", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property CargoString() As String
    Get
      Return Me.Cargo.Cargo_Descripcion
    End Get
  End Property

  Public ReadOnly Property Sueldo() As Decimal
    Get
      Dim msueldo As Rubro = Rubro.ObtenerSueldoxContrato(Me)
      Return IIf(Contra_Sueldo > 0, Contra_Sueldo, msueldo.Total)
    End Get
  End Property

  Public ReadOnly Property Transporte() As Decimal
    Get
      Dim mRubros As RubroList
      Dim _Parametro_Padre As New WWTSParametroDet(OperadorDatos, Enumerados.EnumParametros.Rubro, Enumerados.enumRubro.DefinidoEnContrato)
      mRubros = RubroList.ObtenerListaxContrato(OperadorDatos, Me, _Parametro_Padre, Nothing)
      If mRubros IsNot Nothing Then
        For Each _rubro As Rubro In mRubros
          If _rubro.Pardet_TipoRubro = Enumerados.enumTipoRubroDefinidoContrato.Transporte Then
            Return _rubro.Rubro_EnQuincena + _rubro.Rubro_EnFindeMes
          End If
        Next
      End If
      Return 0
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Sueldo", CampoReporteAtributo.EnumTipoDato.Decimales, 150, False)> _
  Public ReadOnly Property SueldoString() As String
    Get
      Return Sueldo.ToString("0.00")
    End Get
  End Property

  'Public ReadOnly Property SueldoString() As String
  '  Get
  '    Return Me.Contra_Sueldo.ToString("0.00")
  '  End Get
  'End Property

  Public ReadOnly Property SueldoMes(ByVal _fecha As Date) As Decimal
    Get
      Dim msueldo As Rubro

      Select Case _fecha.Month
        Case 1, 3, 5, 7, 8, 10, 12
          'resultado = _cadena.Insert(0, "31")
          If _fecha.Day = 31 Then
            msueldo = Rubro.ObtenerSueldoxContratoMes(Me, _fecha)
            Return msueldo.Total
          Else
            msueldo = Rubro.ObtenerSueldoxContratoMes(Me, _fecha.AddMonths(-1))
            Return msueldo.Total
          End If
        Case 4, 6, 9, 11
          'resultado = _cadena.Insert(0, "30")
          If _fecha.Day = 30 Then
            msueldo = Rubro.ObtenerSueldoxContratoMes(Me, _fecha)
            Return msueldo.Total
          Else
            msueldo = Rubro.ObtenerSueldoxContratoMes(Me, _fecha.AddMonths(-1))
            Return msueldo.Total
          End If
        Case 2
          If Date.IsLeapYear(_fecha.Year) Then
            'resultado = _cadena.Insert(0, "29")
            If _fecha.Day = 29 Then
              msueldo = Rubro.ObtenerSueldoxContratoMes(Me, _fecha)
              Return msueldo.Total
            Else
              msueldo = Rubro.ObtenerSueldoxContratoMes(Me, _fecha.AddMonths(-1))
              Return msueldo.Total
            End If
          Else
            'resultado = _cadena.Insert(0, "28")
            If _fecha.Day = 28 Then
              msueldo = Rubro.ObtenerSueldoxContratoMes(Me, _fecha)
              Return msueldo.Total
            Else
              msueldo = Rubro.ObtenerSueldoxContratoMes(Me, _fecha.AddMonths(-1))
              Return msueldo.Total
            End If
          End If
      End Select

      'Dim msueldo As Rubro = Rubro.ObtenerSueldoxContratoMes(Me, _fecha.AddMonths(-1))
      'Return msueldo.Total
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("SueldoLetras", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property SueldoLetrasString() As String
    Get
      Dim sueldo As Rubro = Rubro.ObtenerSueldoxContrato(Me)
      Return Utilerias.NumaLetras(sueldo.Total)
    End Get
  End Property

  'Public ReadOnly Property SueldoLetrasString() As String
  '  Get
  '    Return Me.Contra_SueldoenLetras
  '  End Get
  'End Property

  <Infoware.Reportes.CampoReporteAtributo("TelEmpleado", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property TelEmpleado() As String
    Get
      Return Empleado.TelefonoCasaString
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("DirecDomEmpleado", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property DirecDomEmpleado() As String
    Get
      Return Empleado.DireccionesString
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Seccion", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property SeccionString() As String
    Get
      Return Me.PardetDepartamento.PardetPadre.Pardet_Descripcion
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Nombre", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property NombreString() As String
    Get
      Return Me.Empleado.Entidadnatural.Entnat_Nombres
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Apellido", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property ApellidoString() As String
    Get
      Return Me.Empleado.Entidadnatural.Entnat_Apellidopaterno
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Fecha Desde", CampoReporteAtributo.EnumTipoDato.Texto, 150, False)> _
  Public ReadOnly Property FechaDesdeString() As String
    Get
      Return Me.Contra_Desde.ToString("dd/MM/yyyy")
    End Get
  End Property

  Public ReadOnly Property Diastrabajados() As Integer
    Get
      If mDiasTrabajados = -1 Then
        Dim dsResult As New DataTable
        Dim bResult As Boolean
        With OperadorDatos
          '.AgregarParametro("@accion", "c")
          .AgregarParametro("@accion", "DT")
          .AgregarParametro("@Entida_Codigo", Me.Entida_Codigo)
          .AgregarParametro("@Patron_Codigo", Me.Patron_Codigo)
          .AgregarParametro("@Contra_Secuencia", Me.Contra_Secuencia)
          '.Procedimiento = "proc_vacacion"
          .Procedimiento = "proc_RubroDet"
          bResult = .Ejecutar(dsResult)
          .LimpiarParametros()
        End With
        If bResult And dsResult.Rows.Count > 0 Then
          Me.mDiasTrabajados = (dsResult.Rows(0)("diastrabajados"))
        End If
      End If
      Return mDiasTrabajados
    End Get
  End Property

  Public ReadOnly Property AniosTrabajados() As Decimal
    Get
      If mAniosTrabajados = -1 Then
        mAniosTrabajados = Diastrabajados / 365
      End If
      Return mAniosTrabajados
    End Get
  End Property

  Public ReadOnly Property UltimoSueldoMas25dias() As Decimal
    Get
      Dim dsResult As New DataTable
      Dim resultado As Decimal = 0
      Dim bReturn As Boolean
      With OperadorDatos
        .AgregarParametro("@accion", "us25")
        .AgregarParametro("@Entida_Codigo", Entida_Codigo)
        .AgregarParametro("@Patron_Codigo", Patron_Codigo)
        '.AgregarParametro("@Hac_codigo", mHac_codigo)
        .AgregarParametro("@Contra_Secuencia", Contra_Secuencia)
        .Procedimiento = "proc_Sueldomensual"
        bReturn = .Ejecutar(dsResult)
        If bReturn Then
          resultado = CDec(dsResult.Rows(0)(0))
        End If
        .LimpiarParametros()
      End With
      Return resultado
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Entida_Codigo = CType(Fila("Entida_Codigo"), Integer)
    Patron_Codigo = CType(Fila("Patron_Codigo"), Integer)
    mPatron_CodigoNuevo = CType(Fila("Patron_Codigo"), Integer)
    Contra_Secuencia = CType(Fila("Contra_Secuencia"), Integer)
    TipCon_Codigo = CType(Fila("TipCon_Codigo"), Integer)
    Empres_Codigo = CType(Fila("Empres_Codigo"), Integer)
    Sucurs_Codigo = CType(Fila("Sucurs_Codigo"), Integer)
    Contra_Desde = CType(Fila("Contra_Desde"), Date)
    Try
      Contra_Hasta = CType(Fila("Contra_Hasta"), Date)
      mesCerrado = True
      Contra_MotivoSalida = CType(Fila("Contra_MotivoSalida"), String)
      Parame_TipoMotivoSalida = CType(Fila("Parame_TipoMotivoSalida"), Integer)
      Pardet_TipoMotivoSalida = CType(Fila("Pardet_TipoMotivoSalida"), Integer)
    Catch ex As Exception
      Contra_Hasta = Now.Date
      mesCerrado = False
    End Try
    Contra_Sueldo = CType(Fila("Contra_Sueldo"), Decimal)
    Contra_Antiguedad = CType(Fila("Contra_Antiguedad"), Decimal)
    Contra_Transporte = CType(Fila("Contra_Transporte"), Decimal)
    Contra_esSindicalista = CType(Fila("Contra_esSindicalista"), Boolean)
    Contra_esJuicioLaboral = CType(Fila("Contra_esJuicioLaboral"), Boolean)
    Contra_Observacion = CType(Fila("Contra_Observacion"), String)
    Contra_ValorHora = CType(Fila("Contra_ValorHora"), Decimal)
    Contra_ValorHexLV = CType(Fila("Contra_ValorHexLV"), Decimal)
    Contra_ValorHexSDF = CType(Fila("Contra_ValorHexSDF"), Decimal)
    Contra_afiliess = CBool(Fila("Contra_afiliess"))
    Contra_recordpolicial = CBool(Fila("Contra_recordpolicial"))
    Contra_reglamentointerno = CBool(Fila("Contra_reglamentointerno"))
    Contra_certvot = CBool(Fila("Contra_certvot"))
    Contra_certifsalud = CBool(Fila("Contra_certifsalud"))
    Try
      Contra_FechaAfiliacionIESS = CDate(Fila("Contra_FechaAfiliacionIESS"))
    Catch ex As Exception
      Contra_FechaAfiliacionIESS = Now.Date
    End Try
    Contra_DescontarImpuestoRenta = CBool(Fila("Contra_DescontarImpuestoRenta"))
    Contra_EvaluacionTrimestral = CInt(Fila("Contra_EvaluacionTrimestral"))
    Contra_EvaluacionAnual = CInt(Fila("Contra_EvaluacionAnual"))
    Parame_AdjuntoEvaluacion = 0
    Pardet_AdjuntoEvaluacion = 0
    If Not TypeOf Fila("Parame_AdjuntoEvaluacion") Is DBNull Then
      Parame_AdjuntoEvaluacion = CInt(Fila("Parame_AdjuntoEvaluacion"))
    End If
    If Not TypeOf Fila("Pardet_AdjuntoEvaluacion") Is DBNull Then
      Pardet_AdjuntoEvaluacion = CInt(Fila("Pardet_AdjuntoEvaluacion"))
    End If
    Parame_Departamento = 0
    Pardet_Departamento = 0
    If Not TypeOf Fila("Parame_Departamento") Is DBNull Then
      Parame_Departamento = CInt(Fila("Parame_Departamento"))
    End If
    If Not TypeOf Fila("Pardet_Departamento") Is DBNull Then
      Pardet_Departamento = CInt(Fila("Pardet_Departamento"))
    End If
    Parame_Area = 0
    Pardet_Area = 0
    If Not TypeOf Fila("Parame_Area") Is DBNull Then
      Parame_Area = CInt(Fila("Parame_Area"))
    End If
    If Not TypeOf Fila("Pardet_Area") Is DBNull Then
      Pardet_Area = CInt(Fila("Pardet_Area"))
    End If
    Cargo_Secuencia = 0
    If Not TypeOf Fila("Cargo_Secuencia") Is DBNull Then
      Cargo_Secuencia = CInt(Fila("Cargo_Secuencia"))
    End If
    Parame_EstadoContrato = 0
    Pardet_EstadoContrato = 0
    If Not TypeOf Fila("Parame_EstadoContrato") Is DBNull Then
      Parame_EstadoContrato = CInt(Fila("Parame_EstadoContrato"))
    End If
    If Not TypeOf Fila("Pardet_EstadoContrato") Is DBNull Then
      Pardet_EstadoContrato = CInt(Fila("Pardet_EstadoContrato"))
    End If
    Selecc_Codigo = 0
    If Not TypeOf Fila("Selecc_Codigo") Is DBNull Then
      Selecc_Codigo = CInt(Fila("Selecc_Codigo"))
    End If
    Parame_SubCentroCosto = 0
    Pardet_SubCentroCosto = 0
    If Not TypeOf Fila("Parame_SubCentroCosto") Is DBNull Then
      Parame_SubCentroCosto = CType(Fila("Parame_SubCentroCosto"), Integer)
    End If
    If Not TypeOf Fila("Pardet_SubCentroCosto") Is DBNull Then
      Pardet_SubCentroCosto = CType(Fila("Pardet_SubCentroCosto"), Integer)
    End If
    Parame_Lote = 0
    Pardet_Lote = 0
    If Not TypeOf Fila("Parame_Lote") Is DBNull Then
      Parame_Lote = CInt(Fila("Parame_Lote"))
    End If
    If Not TypeOf Fila("Pardet_Lote") Is DBNull Then
      Pardet_Lote = CInt(Fila("Pardet_Lote"))
    End If
    'Contra_AcumFondoReserva = CType(Fila("Contra_AcumFondoReserva"), Boolean)
    Contra_MensualizarD3 = CBool(Fila("Contra_MensualizarD3"))
    Contra_MensualizarD4 = CBool(Fila("Contra_MensualizarD4"))
    Contra_MensualizarVac = CBool(Fila("Contra_MensualizarVac"))
    Contra_MensualizarFondoReserva = CBool(Fila("Contra_MensualizarFondoReserva"))

    mEmpleado = Nothing
    mPatrono = Nothing
    mTipocontrato = Nothing
    mPardetMotivoSalida = Nothing
    mPardetTipoLiquidacion = Nothing
    mPardetAdjuntoEvaluacion = Nothing
    mPardetArea = Nothing
    mPardetEstadoContrato = Nothing
    mPardetDepartamento = Nothing
    mSucursal = Nothing
    mCargo = Nothing
    mPardetSubCentroCosto = Nothing
    mPardetLote = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As System.Data.DataTable = New System.Data.DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.AgregarParametro("@Contra_Secuencia", Contra_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If

    If PardetAdjuntoEvaluacion IsNot Nothing AndAlso PardetAdjuntoEvaluacion.PardetHijos IsNot Nothing Then
      If (PardetAdjuntoEvaluacion.EsNuevo AndAlso PardetAdjuntoEvaluacion.PardetHijos.Count > 0) Or (Not PardetAdjuntoEvaluacion.EsNuevo AndAlso PardetAdjuntoEvaluacion.PardetHijos.Count + PardetAdjuntoEvaluacion.PardetHijosEli.Count > 0) Then
        bReturn = PardetAdjuntoEvaluacion.Guardar
        If bReturn Then
          Parame_AdjuntoEvaluacion = PardetAdjuntoEvaluacion.Parame_Codigo
          Pardet_AdjuntoEvaluacion = PardetAdjuntoEvaluacion.Pardet_Secuencia
        End If
      End If
    End If

    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.AgregarParametro("@Patron_CodigoNuevo", mPatron_CodigoNuevo)
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.AgregarParametro("@Contra_Secuencia", Contra_Secuencia)
    OperadorDatos.AgregarParametro("@TipCon_Codigo", TipCon_Codigo)
    OperadorDatos.AgregarParametro("@Empres_Codigo", Empres_Codigo)
    OperadorDatos.AgregarParametro("@Sucurs_Codigo", Sucurs_Codigo)
    OperadorDatos.AgregarParametro("@Contra_Desde", Contra_Desde)
    OperadorDatos.AgregarParametro("@Contra_Sueldo", Contra_Sueldo)
    OperadorDatos.AgregarParametro("@Contra_Antiguedad", Contra_Antiguedad)
    OperadorDatos.AgregarParametro("@Contra_Transporte", Contra_Transporte)
    OperadorDatos.AgregarParametro("@Contra_esSindicalista", Contra_esSindicalista)
    OperadorDatos.AgregarParametro("@Contra_esJuicioLaboral", Contra_esJuicioLaboral)
    OperadorDatos.AgregarParametro("@Contra_afiliess", Contra_afiliess)
    OperadorDatos.AgregarParametro("@Contra_certifsalud", Contra_certifsalud)
    OperadorDatos.AgregarParametro("@Contra_certvot", Contra_certvot)
    OperadorDatos.AgregarParametro("@Contra_recordpolicial", Contra_recordpolicial)
    OperadorDatos.AgregarParametro("@Contra_reglamentointerno", Contra_reglamentointerno)
    OperadorDatos.AgregarParametro("@Contra_Observacion", Contra_Observacion)
    OperadorDatos.AgregarParametro("@Contra_ValorHora", Contra_ValorHora)
    OperadorDatos.AgregarParametro("@Contra_ValorHexLV", Contra_ValorHexLV)
    OperadorDatos.AgregarParametro("@Contra_ValorHexSDF", Contra_ValorHexSDF)
    If Contra_afiliess Then
      OperadorDatos.AgregarParametro("@Contra_FechaAfiliacionIESS", Contra_FechaAfiliacionIESS.Date)
    End If
    OperadorDatos.AgregarParametro("@Contra_DescontarImpuestoRenta", Contra_DescontarImpuestoRenta)
    OperadorDatos.AgregarParametro("@Contra_EvaluacionTrimestral", Contra_EvaluacionTrimestral)
    OperadorDatos.AgregarParametro("@Contra_EvaluacionAnual", Contra_EvaluacionAnual)
    If Pardet_AdjuntoEvaluacion > 0 Then
      OperadorDatos.AgregarParametro("@Parame_AdjuntoEvaluacion", Parame_AdjuntoEvaluacion)
      OperadorDatos.AgregarParametro("@Pardet_AdjuntoEvaluacion", Pardet_AdjuntoEvaluacion)
    End If
    If mesCerrado Then
      OperadorDatos.AgregarParametro("@Contra_Hasta", Contra_Hasta)
      OperadorDatos.AgregarParametro("@Contra_MotivoSalida", Contra_MotivoSalida)
      OperadorDatos.AgregarParametro("@Parame_TipoMotivoSalida", Parame_TipoMotivoSalida)
      OperadorDatos.AgregarParametro("@Pardet_TipoMotivoSalida", Pardet_TipoMotivoSalida)
    End If
    If Pardet_Departamento > 0 Then
      OperadorDatos.AgregarParametro("@Parame_Departamento", Parame_Departamento)
      OperadorDatos.AgregarParametro("@Pardet_Departamento", Pardet_Departamento)
    End If
    If Pardet_Area > 0 Then
      OperadorDatos.AgregarParametro("@Parame_Area", Parame_Area)
      OperadorDatos.AgregarParametro("@Pardet_Area", Pardet_Area)
    End If
    If Cargo_Secuencia > 0 Then
      OperadorDatos.AgregarParametro("@Cargo_Secuencia", Cargo_Secuencia)
    End If
    If Pardet_EstadoContrato > 0 Then
      OperadorDatos.AgregarParametro("@Parame_EstadoContrato", Parame_EstadoContrato)
      OperadorDatos.AgregarParametro("@Pardet_EstadoContrato", Pardet_EstadoContrato)
    End If
    If Selecc_Codigo > 0 Then
      OperadorDatos.AgregarParametro("@Selecc_Codigo", Selecc_Codigo)
    End If
    If Pardet_SubCentroCosto > 0 Then
      OperadorDatos.AgregarParametro("@Parame_SubCentroCosto", Parame_SubCentroCosto)
      OperadorDatos.AgregarParametro("@Pardet_SubCentroCosto", Pardet_SubCentroCosto)
    End If
    If Pardet_Lote > 0 Then
      OperadorDatos.AgregarParametro("@Parame_Lote", Parame_Lote)
      OperadorDatos.AgregarParametro("@Pardet_Lote", Pardet_Lote)
    End If
    'OperadorDatos.AgregarParametro("@Contra_AcumFondoReserva", Contra_AcumFondoReserva)
    OperadorDatos.AgregarParametro("@Contra_MensualizarD3", Contra_MensualizarD3)
    OperadorDatos.AgregarParametro("@Contra_MensualizarD4", Contra_MensualizarD4)
    OperadorDatos.AgregarParametro("@Contra_MensualizarVac", Contra_MensualizarVac)
    OperadorDatos.AgregarParametro("@Contra_MensualizarFondoReserva", Contra_MensualizarFondoReserva)

    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If EsNuevo Then
        Contra_Secuencia = Result
      End If
      EsNuevo = False
      EsModificado = False
    End If
    Return bReturn
  End Function

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Entida_Codigo", Entida_Codigo)
    OperadorDatos.AgregarParametro("@Patron_Codigo", Patron_Codigo)
    OperadorDatos.AgregarParametro("@Contra_Secuencia", Contra_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "ContratoList"
Public Class ContratoList
  Inherits System.ComponentModel.BindingList(Of Contrato)

  Public Function ListaSeleccionadas() As ContratoList
    Dim _contratos As New ContratoList
    For Each _contrato As Contrato In Me
      If _contrato.Seleccionado Then
        _contratos.Add(_contrato)
      End If
    Next
    Return _contratos
  End Function

  Public Function ListaEmpleadosSeleccionados() As EmpleadoList
    Dim _empleados As New EmpleadoList
    For Each _contrato As Contrato In Me
      If _contrato.Seleccionado Then
        _empleados.Add(_contrato.Empleado)
      End If
    Next
    Return _empleados
  End Function

  Public Shared Function ObtenerLista(ByVal _OperadorDatos As OperadorDatos, ByVal _Empleado As Empleado, Optional ByVal _filtro As String = "") As ContratoList
    Dim oResult As ContratoList = New ContratoList
    Dim bReturn As Boolean
    Dim ds As datatable = Nothing
    With _OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Entida_Codigo", _Empleado.Entida_Codigo)
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_Contrato"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New Contrato(_OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function ObtenerListaxPatronoUsuario(ByVal _OperadorDatos As OperadorDatos, ByVal _Empleado As Empleado, ByVal _Usuario As Usuario, Optional ByVal _filtro As String = "") As ContratoList
    Dim oResult As ContratoList = New ContratoList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _OperadorDatos
      .AgregarParametro("@Accion", "FU")
      .AgregarParametro("@Entida_Codigo", _Empleado.Entida_Codigo)
      .AgregarParametro("@Usuari_Codigo", _Usuario.Usuari_Codigo)
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_Contrato"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New Contrato(_OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function RetornarEmpleadosActivos(ByVal _OperadorDatos As OperadorDatos, ByVal _fecactivo As Date, ByVal _Patrono As Patrono, ByVal _reporte As Integer, ByVal _Seccion As WWTSParametroDet, ByVal _feccond As Date, ByVal _fecconh As Date, ByVal _Clase As WWTSParametroDet, ByVal _TipoContrato As TipoContrato, ByVal _poredad As Boolean, ByVal _edadi As Integer, ByVal _edadf As Integer) As ContratoList
    Dim oResult As New ContratoList
    Dim bReturn As Boolean
    Dim dsResult As New datatable
    With _OperadorDatos
      .AgregarParametro("@accion", "a")
      .AgregarParametro("@fecactivo", _fecactivo)
      If _Patrono IsNot Nothing Then
        .AgregarParametro("@Patron_Codigo", _Patrono.Patron_Codigo)
      End If
      .AgregarParametro("@reporte", _reporte)
      If _Seccion IsNot Nothing Then
        .AgregarParametro("@Parame_Seccion", _Seccion.Parame_Codigo)
        .AgregarParametro("@Pardet_Seccion", _Seccion.Pardet_Secuencia)
      End If
      .AgregarParametro("@feccond", IIf(_feccond = Nothing, Now.Date, _feccond))
      .AgregarParametro("@fecconh", IIf(_fecconh = Nothing, Now.Date, _fecconh))
      If _Clase IsNot Nothing Then
        .AgregarParametro("@Parame_ClaseEmpleado", _Clase.Parame_Codigo)
        .AgregarParametro("@Pardet_ClaseEmpleado", _Clase.Pardet_Secuencia)
      End If
      If _TipoContrato IsNot Nothing Then
        .AgregarParametro("@TipCon_Codigo", _TipoContrato.TipCon_Codigo)
      End If
      .AgregarParametro("@poredad", _poredad)
      .AgregarParametro("@edadi", _edadi)
      .AgregarParametro("@edadf", _edadf)
      .Procedimiento = "proc_Contrato"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Rows
        Dim _obj As New Contrato(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function RetornarEmpleadosInactivos(ByVal _OperadorDatos As OperadorDatos, ByVal _anioinactivo As Integer, ByVal _anioactivo As Integer) As ContratoList
    Dim oResult As New ContratoList
    Dim bReturn As Boolean
    Dim dsResult As New datatable
    With _OperadorDatos
      .AgregarParametro("@accion", "ia")
      .AgregarParametro("@anioinactivo", _anioinactivo)
      .AgregarParametro("@anioactivo", _anioactivo)
      .Procedimiento = "proc_Contrato"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Rows
        Dim _obj As New Contrato(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function RetornarPersonalActivoPeriodo(ByVal _OperadorDatos As OperadorDatos, ByVal _fecactivod As Date, ByVal _fecactivoh As Date, ByVal _Patron_Codigo As Integer, ByVal _reporte As Integer, ByVal _Pardet_Seccion As Integer, _
 ByVal _feccond As Date, ByVal _fecconh As Date, ByVal _Pardet_ClaseEmpleado As Integer, ByVal _TipCon_Codigo As Integer, ByVal _poredad As Boolean, ByVal _edadi As Integer, ByVal _edadf As Integer, ByVal _diassingrabar As Boolean, ByVal _pardetperiodopago As WWTSParametroDet) As ContratoList
    Dim oResult As New ContratoList
    Dim bReturn As Boolean
    Dim dsResult As New DataTable
    With _OperadorDatos
      .AgregarParametro("@accion", "s")
      .AgregarParametro("@fecactivo", _fecactivod.Date)
      .AgregarParametro("@fecactivoh", _fecactivoh.Date)
      .AgregarParametro("@Patron_Codigo", _Patron_Codigo)
      .AgregarParametro("@reporte", _reporte)
      .AgregarParametro("@Pardet_Seccion", _Pardet_Seccion)
      .AgregarParametro("@feccond", _feccond.Date)
      .AgregarParametro("@fecconh", _fecconh.Date)
      If _Pardet_ClaseEmpleado > 0 Then
        .AgregarParametro("@Pardet_ClaseEmpleado", _Pardet_ClaseEmpleado)
      End If
      .AgregarParametro("@TipCon_Codigo", _TipCon_Codigo)
      .AgregarParametro("@poredad", _poredad)
      .AgregarParametro("@edadi", _edadi)
      .AgregarParametro("@edadf", _edadf)
      If _diassingrabar Then
        .AgregarParametro("@diassingrabar", _diassingrabar)
        .AgregarParametro("@Pardet_PeriodoPago", _pardetperiodopago.Pardet_Secuencia)
      End If
      .Procedimiento = "proc_Contrato"
      bReturn = .Ejecutar(dsResult)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not dsResult Is Nothing AndAlso dsResult.Rows.Count > 0 Then
      For Each _dr As DataRow In dsResult.Rows
        Dim _obj As New Contrato(_OperadorDatos, False)
        _obj.MapearDataRowaObjeto(_dr)
        oResult.Add(_obj)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function ObtenerListaContratosTerminados(ByVal _OperadorDatos As OperadorDatos, ByVal _Empleado As Empleado, Optional ByVal _filtro As String = "") As ContratoList
    Dim oResult As ContratoList = New ContratoList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _OperadorDatos
      .AgregarParametro("@Accion", "FT")
      .AgregarParametro("@Entida_Codigo", _Empleado.Entida_Codigo)
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_Contrato"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New Contrato(_OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
