'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos


#Region "Parametro"
Public Class Parametro

  Const _Procedimiento As String = "proc_Parametro"

  Private mParametro As Parametro = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Parame_Codigo As Integer)
    Me.New(_OperadorDatos, False)
    Parame_Codigo = _Parame_Codigo
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto Parametro")
    End If
  End Sub

  'Parametro
  Public Overridable Property ParametroPadre() As Parametro
    Get
      If Me.mParametro Is Nothing AndAlso Parame_Padre > 0 Then
        Me.mParametro = New Parametro(OperadorDatos, Parame_Padre)
      End If
      Return Me.mParametro
    End Get
    Set(ByVal value As Parametro)
      Me.mParametro = value
      Parame_Padre = value.Parame_Codigo
    End Set
  End Property

  Public ReadOnly Property TieneDatoStr1() As Boolean
    Get
      Return Not Parame_LeyendaDatoStr1.Trim = String.Empty
    End Get
  End Property

  Public ReadOnly Property TieneDatoInt1() As Boolean
    Get
      Return Not Parame_LeyendaDatoInt1.Trim = String.Empty
    End Get
  End Property

  Public ReadOnly Property TieneDatoImg1() As Boolean
    Get
      Return Not Parame_LeyendaDatoImg1.Trim = String.Empty
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Parame_Codigo = CInt(Fila("Parame_Codigo"))
    Parame_Descripcion = CStr(Fila("Parame_Descripcion"))
    Parame_Modificable = CBool(Fila("Parame_Modificable"))
    Parame_esImagen = CBool(Fila("Parame_esImagen"))

    Parame_LeyendaDatoStr1 = ""
    Try
      If Not TypeOf Fila("Parame_LeyendaDatoStr1") Is DBNull Then
        Parame_LeyendaDatoStr1 = CStr(Fila("Parame_LeyendaDatoStr1"))
      End If
    Catch ex As Exception
    End Try

    Parame_LeyendaDatoInt1 = ""
    Try
      If Not TypeOf Fila("Parame_LeyendaDatoInt1") Is DBNull Then
        Parame_LeyendaDatoInt1 = CStr(Fila("Parame_LeyendaDatoInt1"))
      End If
    Catch ex As Exception
    End Try

    Parame_LeyendaDatoImg1 = ""
    Try
      If Not TypeOf Fila("Parame_LeyendaDatoImg1") Is DBNull Then
        Parame_LeyendaDatoImg1 = CStr(Fila("Parame_LeyendaDatoImg1"))
      End If
    Catch ex As Exception
    End Try

    Parame_LeyendaDatoDec1 = ""
    Try
      If Not TypeOf Fila("Parame_LeyendaDatoDec1") Is DBNull Then
        Parame_LeyendaDatoDec1 = CStr(Fila("Parame_LeyendaDatoDec1"))
      End If
    Catch ex As Exception
    End Try

    Parame_Padre = 0
    Try
      If Not TypeOf Fila("Parame_Padre") Is DBNull Then
        Parame_Padre = CInt(Fila("Parame_Padre"))
      End If
    Catch ex As Exception
    End Try

    mParametro = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As System.Data.datatable = New System.Data.datatable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Parame_Codigo", Parame_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  'Public Overridable Function Guardar() As Boolean
  '  Dim Result As Integer = 0
  '  Dim bReturn As Boolean = True
  '  Dim sAccion As String = "M"
  '  If EsNuevo Then
  '    sAccion = "I"
  '  End If
  '  OperadorDatos.AgregarParametro("@accion", sAccion)
  '  OperadorDatos.AgregarParametro("@Parame_Codigo", Parame_Codigo)
  '  OperadorDatos.AgregarParametro("@Parame_Descripcion", Parame_Descripcion)
  '  OperadorDatos.AgregarParametro("@Parame_Modificable", Parame_Modificable)
  '  OperadorDatos.AgregarParametro("@Parame_Padre", Parame_Padre)
  '  OperadorDatos.Procedimiento = _Procedimiento
  '  bReturn = OperadorDatos.Ejecutar(Result)
  '  OperadorDatos.LimpiarParametros()
  '  If bReturn Then
  '    EsNuevo = False
  '    EsModificado = False
  '  End If
  '  Return bReturn
  'End Function

  'Public Overridable Function Eliminar() As Boolean
  '  Dim bReturn As Boolean = True
  '  OperadorDatos.AgregarParametro("@accion", "E")
  '  OperadorDatos.AgregarParametro("@Parame_Codigo", Parame_Codigo)
  '  OperadorDatos.Procedimiento = _Procedimiento
  '  bReturn = OperadorDatos.Ejecutar
  '  OperadorDatos.LimpiarParametros()
  '  Return bReturn
  'End Function
End Class
#End Region

#Region "ParametroList"
Public Class ParametroList
  Inherits System.ComponentModel.BindingList(Of Parametro)

  Public Shared Function ObtenerLista(ByVal _op As OperadorDatos, Optional ByVal _filtro As String = "") As ParametroList
    Dim oResult As ParametroList = New ParametroList
    Dim bReturn As Boolean
    Dim ds As datatable = Nothing
        With _op
            .AgregarParametro("@Accion", "F")
            .AgregarParametro("@filtro", _filtro)
            .Procedimiento = "proc_Parametro"
            bReturn = .Ejecutar(ds)
            .LimpiarParametros()
        End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New Parametro(_op, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
        Return oResult
    End Function
End Class
#End Region
