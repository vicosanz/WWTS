'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports System.IO

#Region "ParametroDet"
Public Class ParametroDet

  Const _Procedimiento As String = "proc_ParametroDet"

  Private mParametro As Parametro = Nothing

  Private mPardetPadre As ParametroDet = Nothing

  Private mPardet_Imagen As System.Drawing.Image = Nothing

  Private mCambio_Imagen As Boolean = False

  'Private mCuentaContable1 As CuentaContable = Nothing

  'Private mCuentaContable2 As CuentaContable = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Parame_Codigo As Integer, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    Parame_Codigo = _Parame_Codigo
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Parame_Codigo As Integer, ByVal _Pardet_Secuencia As Integer)
    Me.New(_OperadorDatos, _Parame_Codigo, False)
    Pardet_Secuencia = _Pardet_Secuencia
    If Not Me.Recargar Then
      Throw New System.Exception("No se puede cargar objeto ParametroDet")
    End If
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Parametro As Parametro, ByVal _Pardet_Secuencia As Integer)
    Me.New(_OperadorDatos, _Parametro.Parame_Codigo, False)
  End Sub

  'Parametro
  Public Overridable Property Parametro() As Parametro
    Get
      If Me.mParametro Is Nothing AndAlso Parame_Codigo > 0 Then
        Me.mParametro = New Parametro(OperadorDatos, Parame_Codigo)
      End If
      Return Me.mParametro
    End Get
    Set(ByVal value As Parametro)
      Me.mParametro = value
      Parame_Codigo = value.Parame_Codigo
    End Set
  End Property

  'Parametrodet
  Public Overridable Property PardetPadre() As ParametroDet
    Get
      If Me.mPardetPadre Is Nothing AndAlso Pardet_Padre > 0 Then
        Me.mPardetPadre = New ParametroDet(OperadorDatos, Parame_Padre, Pardet_Padre)
      End If
      Return Me.mPardetPadre
    End Get
    Set(ByVal value As ParametroDet)
      Me.mPardetPadre = value
      Parame_Padre = value.Parame_Codigo
      Pardet_Padre = value.Pardet_Secuencia
    End Set
  End Property

  'Pardet_Imagen
  Public Overridable ReadOnly Property Pardet_Imagen(Optional ByVal heightwidth As Integer = 0) As System.Drawing.Image
    Get
      If mPardet_Imagen Is Nothing Then
        Dim Result As Object = Nothing
        Dim bReturn As Boolean = True
        OperadorDatos.AgregarParametro("@accion", "Pl")
        OperadorDatos.AgregarParametro("@Parame_Codigo", Parame_Codigo)
        OperadorDatos.AgregarParametro("@Pardet_Secuencia", Pardet_Secuencia)
        OperadorDatos.Procedimiento = _Procedimiento
        bReturn = OperadorDatos.Ejecutar(Result)
        OperadorDatos.LimpiarParametros()
        Try
          Dim imagen() As Byte
          imagen = CType(Result, Byte())
          Dim ms As New MemoryStream
          ms.Write(imagen, 0, imagen.GetUpperBound(0) + 1)
          mPardet_Imagen = System.Drawing.Image.FromStream(ms)
          ms.Close()
        Catch ex As System.Exception
          bReturn = False
          mPardet_Imagen = Nothing
        End Try
      End If
      If heightwidth > 0 AndAlso mPardet_Imagen IsNot Nothing Then
        Dim imagenbm = New System.Drawing.Bitmap(mPardet_Imagen)
        Return imagenbm.GetThumbnailImage(heightwidth, heightwidth, Nothing, New IntPtr())
      Else
        Return mPardet_Imagen
      End If
    End Get
  End Property

  'Pardet_Imagen 
  Public Overridable ReadOnly Property Pardet_ImagenFile() As String
    Get
      Dim Result As Object = Nothing
      Dim bReturn As Boolean = True

      OperadorDatos.AgregarParametro("@accion", "Pl")
      OperadorDatos.AgregarParametro("@Parame_Codigo", Parame_Codigo)
      OperadorDatos.AgregarParametro("@Pardet_Secuencia", Pardet_Secuencia)
      OperadorDatos.Procedimiento = _Procedimiento
      bReturn = OperadorDatos.Ejecutar(Result)
      OperadorDatos.LimpiarParametros()
      Try
        Dim imagen() As Byte
        imagen = CType(Result, Byte())

        Dim nomarchivo As String
        If Parametro.Parame_esImagen Then
          nomarchivo = String.Format("{0}\{1}", My.Computer.FileSystem.SpecialDirectories.Temp, Now.Date.ToShortDateString.Replace(".", "") & Environment.TickCount & ".jpg").Replace("/", "").Replace("-", "")
        Else
          nomarchivo = String.Format("{0}\{1}", My.Computer.FileSystem.SpecialDirectories.Temp, Pardet_DatoStr1)
        End If

        Dim ms As New FileStream(nomarchivo, FileMode.Create)
        ms.Write(imagen, 0, imagen.GetUpperBound(0) + 1)
        ms.Close()
        Return nomarchivo
      Catch ex As System.Exception
        bReturn = False
        Return String.Empty
      End Try
    End Get
  End Property

  Public ReadOnly Property Cambio_Imagen() As Boolean
    Get
      Return mCambio_Imagen
    End Get
  End Property

  Private mArchivoImagen As String = String.Empty
  Public Property ArchivoImagen() As String
    Get
      Return mArchivoImagen
    End Get
    Set(ByVal value As String)
      mArchivoImagen = value
      EsModificado = True
      mCambio_Imagen = True
    End Set
  End Property

  Public ReadOnly Property ArchivoSalida() As String
    Get
      If String.IsNullOrEmpty(ArchivoImagen) Then
        Return Pardet_ImagenFile
      Else
        Return ArchivoImagen
      End If
    End Get
  End Property

  Public Sub Inicializar_imagen()
    mPardet_Imagen = Nothing
    mCambio_Imagen = False
  End Sub

  'Public Property CuentaContable1() As CuentaContable
  '  Get
  '    If Me.mCuentaContable1 Is Nothing AndAlso Not CtaCtb_CtaCtble1 = String.Empty Then
  '      Me.mCuentaContable1 = New CuentaContable(OperadorDatos, CtaCtb_CtaCtble1)
  '    End If
  '    Return Me.mCuentaContable1
  '  End Get
  '  Set(ByVal value As CuentaContable)
  '    Me.mCuentaContable1 = value
  '    If value Is Nothing Then
  '      CtaCtb_CtaCtble1 = ""
  '    Else
  '      CtaCtb_CtaCtble1 = value.CtaCtb_Codigo
  '    End If
  '  End Set
  'End Property

  'Public Property CuentaContable2() As CuentaContable
  '  Get
  '    If Me.mCuentaContable2 Is Nothing AndAlso Not CtaCtb_CtaCtble2 = String.Empty Then
  '      Me.mCuentaContable2 = New CuentaContable(OperadorDatos, CtaCtb_CtaCtble2)
  '    End If
  '    Return Me.mCuentaContable2
  '  End Get
  '  Set(ByVal value As CuentaContable)
  '    Me.mCuentaContable2 = value
  '    If value Is Nothing Then
  '      CtaCtb_CtaCtble2 = ""
  '    Else
  '      CtaCtb_CtaCtble2 = value.CtaCtb_Codigo
  '    End If
  '  End Set
  'End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Parame_Codigo = CType(Fila("Parame_Codigo"), Integer)
    Pardet_Secuencia = CType(Fila("Pardet_Secuencia"), Integer)
    Pardet_Descripcion = CType(Fila("Pardet_Descripcion"), String)
    Pardet_DatoStr1 = CType(Fila("Pardet_DatoStr1"), String)
    Pardet_DatoInt1 = CType(Fila("Pardet_DatoInt1"), Integer)

    Pardet_DatoDec1 = 0
    Try
      If Not TypeOf Fila("Pardet_DatoDec1") Is DBNull Then
        Pardet_DatoDec1 = CDec(Fila("Pardet_DatoDec1"))
      End If
    Catch ex As Exception
    End Try

    Pardet_Modificable = CType(Fila("Pardet_Modificable"), Boolean)

    Parame_Padre = 0
    Try
      If Not TypeOf Fila("Parame_Padre") Is DBNull Then
        Parame_Padre = CInt(Fila("Parame_Padre"))
      End If
    Catch ex As Exception
    End Try

    Pardet_Padre = 0
    Try
      If Not TypeOf Fila("Pardet_Padre") Is DBNull Then
        Pardet_Padre = CInt(Fila("Pardet_Padre"))
      End If
    Catch ex As Exception
    End Try

    Pardet_Leyenda = ""
    Try
      If Not TypeOf Fila("Pardet_Leyenda") Is DBNull Then
        Pardet_Leyenda = CStr(Fila("Pardet_Leyenda"))
      End If
    Catch ex As Exception
    End Try

    'mCuentaContable1 = Nothing
    'mCuentaContable2 = Nothing
    mParametro = Nothing
    mPardetPadre = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As System.Data.DataTable = New System.Data.DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Parame_Codigo", Parame_Codigo)
    OperadorDatos.AgregarParametro("@Pardet_Secuencia", Pardet_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    If Not EsNuevo And Not EsModificado Then
      Return True
    End If
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.ReplicarComando = True
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Parame_Codigo", Parame_Codigo)
    OperadorDatos.AgregarParametro("@Pardet_Secuencia", Pardet_Secuencia)
    OperadorDatos.AgregarParametro("@Pardet_Descripcion", Pardet_Descripcion)
    OperadorDatos.AgregarParametro("@Pardet_DatoStr1", Pardet_DatoStr1)
    OperadorDatos.AgregarParametro("@Pardet_DatoInt1", Pardet_DatoInt1)
    OperadorDatos.AgregarParametro("@Pardet_DatoDec1", Pardet_DatoDec1)
    OperadorDatos.AgregarParametro("@Pardet_Modificable", Pardet_Modificable)
    If Parame_Padre > 0 OrElse Pardet_Padre > 0 Then
      OperadorDatos.AgregarParametro("@Parame_Padre", Parame_Padre)
      OperadorDatos.AgregarParametro("@Pardet_Padre", Pardet_Padre)
    End If

    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If EsNuevo Then
        Pardet_Secuencia = Result
      End If
      EsNuevo = False
      EsModificado = False

      If mCambio_Imagen Then
        Guardar_Imagen()
      End If
    End If
    Return bReturn
  End Function

  Public Overridable Function Guardar_Imagen() As Boolean
    If EsNuevo Then
      Return False
    End If
    If Not mCambio_Imagen Then
      Return True
    End If
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "ps")
    OperadorDatos.AgregarParametro("@Parame_Codigo", Parame_Codigo)
    OperadorDatos.AgregarParametro("@Pardet_Secuencia", Pardet_Secuencia)
    OperadorDatos.AgregarParametroImagen("@Pardet_Imagen", mArchivoImagen)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar()
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      mPardet_Imagen = Nothing
      mCambio_Imagen = False
    End If
    Return bReturn
  End Function

  Public Overridable Function Eliminar() As Boolean
    If EsNuevo Then
      Return True
    End If
    Dim bReturn As Boolean = True
    OperadorDatos.ReplicarComando = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Parame_Codigo", Parame_Codigo)
    OperadorDatos.AgregarParametro("@Pardet_Secuencia", Pardet_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "ParametroDetList"
Public Class ParametroDetList
  Inherits System.ComponentModel.BindingList(Of ParametroDet)

  Enum enumTipoObjeto
    Nada = -1
    Persona = 0
    Natural = 1
    Juridica = 2
    Sucursal = 3
    Bodega = 4

    UnidadMedida = 5
  End Enum

  Public Shared Function ObtenerLista(ByVal _op As OperadorDatos, ByVal _Parame_Codigo As Integer, Optional ByVal _enumtipoobjeto As enumTipoObjeto = enumTipoObjeto.Nada, Optional ByVal _ParametroDetRel As ParametroDet = Nothing, Optional ByVal _filtro As String = "") As ParametroDetList
    Dim oResult As ParametroDetList = New ParametroDetList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _op
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Parame_Codigo", _Parame_Codigo)
      If Not _enumtipoobjeto = enumTipoObjeto.Nada Then
        .AgregarParametro("@TipoPersona", _enumtipoobjeto)
      End If
      If _ParametroDetRel IsNot Nothing Then
        .AgregarParametro("@Parame_Padre", _ParametroDetRel.Parame_Codigo)
        .AgregarParametro("@Pardet_Padre", _ParametroDetRel.Pardet_Secuencia)
      End If
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_ParametroDet"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New ParametroDet(_op, _Parame_Codigo, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function


  Public Shared Function ObtenerListaOrdenCodigo(ByVal _op As OperadorDatos, ByVal _Parame_Codigo As Integer, Optional ByVal _enumtipoobjeto As enumTipoObjeto = enumTipoObjeto.Nada, Optional ByVal _ParametroDetRel As ParametroDet = Nothing, Optional ByVal _filtro As String = "") As ParametroDetList
    Dim oResult As ParametroDetList = New ParametroDetList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _op
      .AgregarParametro("@Accion", "FC")
      .AgregarParametro("@Parame_Codigo", _Parame_Codigo)
      If Not _enumtipoobjeto = enumTipoObjeto.Nada Then
        .AgregarParametro("@TipoPersona", _enumtipoobjeto)
      End If
      If _ParametroDetRel IsNot Nothing Then
        .AgregarParametro("@Parame_Padre", _ParametroDetRel.Parame_Codigo)
        .AgregarParametro("@Pardet_Padre", _ParametroDetRel.Pardet_Secuencia)
      End If
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_ParametroDet"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New ParametroDet(_op, _Parame_Codigo, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
