'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos
Imports System.Data.SqlClient
Imports System.Text.RegularExpressions
Imports System.Data.OleDb

#Region "Reporte"
Public Class Reporte
  Private mOperadorDatos As OperadorDatos = Nothing
  Public Property OperadorDatos() As OperadorDatos
    Get
      Return mOperadorDatos
    End Get
    Set(ByVal value As OperadorDatos)
      mOperadorDatos = value
    End Set
  End Property

  Private mEsNuevo As Boolean = True
  Public Property EsNuevo() As Boolean
    Get
      Return mEsNuevo
    End Get
    Set(ByVal value As Boolean)
      mEsNuevo = value
    End Set
  End Property

  Private mNombreProcedimiento As String = String.Empty

  Public Property NombreProcedimiento() As String
    Get
      Return mNombreProcedimiento
    End Get
    Set(ByVal value As String)
      mNombreProcedimiento = value
    End Set
  End Property

  Public ReadOnly Property NombreGrupo() As String
    Get
      Dim nombre As String = mNombreProcedimiento.Substring(mNombreProcedimiento.IndexOf("_") + 1).Replace("_", " ")
      If Not nombre.Contains("$") Then
        Return String.Empty
      Else
        Return nombre.Substring(0, nombre.IndexOf("$"))
      End If
    End Get
  End Property

  Public ReadOnly Property NombreReporte() As String
    Get
      Dim nombre As String = mNombreProcedimiento.Substring(mNombreProcedimiento.IndexOf("_") + 1).Replace("_", " ")
      If Not nombre.Contains("$") Then
        Return nombre
      Else
        Return nombre.Substring(nombre.IndexOf("$") + 1)
      End If
    End Get
  End Property

  Private mParametros As ParametroReporteList

  Public ReadOnly Property Parametros() As ParametroReporteList
    Get
      If mParametros Is Nothing Then
        mParametros = ParametroReporteList.ObtenerLista(mOperadorDatos, Me)
      End If

      Return mParametros
    End Get
  End Property

  Private mProximoEnvioAutomatico As Date
  Public Property ProximoEnvioAutomatico() As Date
    Get
      Return mProximoEnvioAutomatico
    End Get
    Set(ByVal value As Date)
      mProximoEnvioAutomatico = value
    End Set
  End Property

  Public ReadOnly Property Enviara() As String
    Get
      If RetornarEmailProgramacion() IsNot Nothing Then
        If RetornarEmailProgramacion.Listo Then
          Return RetornarEmailLista()
        End If
      End If
      Return String.Empty
    End Get
  End Property

  Public Sub New(ByVal _OperadorDatos As OperadorDatos)
    MyBase.New()
    mOperadorDatos = _OperadorDatos
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _NombreProcedimiento As String)
    Me.New(_OperadorDatos)
    NombreProcedimiento = _NombreProcedimiento
  End Sub

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    mNombreProcedimiento = CType(Fila(0), String)
  End Sub

  Public Sub CargarReporte(ByVal _Registro As DataRowView)
    Dim bReturn As Boolean = False
    Dim ds As New DataTable
    With mOperadorDatos
      For Each _param As ParametroReporte In Me.Parametros
        Try
          _param.Valor = _Registro(_param.NombreColumna)
          .AgregarParametro(_param.NombreParametro, _param.Valor)
        Catch ex As Exception

        End Try
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With

    If ds IsNot Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _param As ParametroReporte In Me.Parametros
        Try
          _param.Valor = ds.Rows(0)(_param.NombreParametro)
        Catch ex As Exception

        End Try
      Next
    End If
  End Sub

  Public Function ValidarReporte(ByVal _Usuario As String) As Boolean
    Try
      Dim bReturn As Boolean = False
      Dim result As Integer = 0
      With mOperadorDatos
        .AgregarParametro("@accion", "Select")

        For Each _param As ParametroReporte In Me.Parametros
          If _param.NombreParametro.ToUpper = "@OCU_USUARIO" Then
            _param.Valor = _Usuario
          End If
          .AgregarParametro(_param.NombreParametro, _param.Valor)
        Next
        .Procedimiento = Me.NombreProcedimiento
        bReturn = .Ejecutar(result)
        .LimpiarParametros()
      End With
      Return result = 1
    Catch ex As Exception
      Return False
    End Try
  End Function

  Public Function Guardar(ByVal _Nuevo As Boolean) As Boolean
    Dim bReturn As Boolean = False
    With mOperadorDatos
      If _Nuevo Then
        .AgregarParametro("@accion", "Insert")
      Else
        .AgregarParametro("@accion", "Update")
      End If
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar()
      .LimpiarParametros()
    End With
    Return bReturn
  End Function

  Public Function Eliminar() As Boolean
    Dim bReturn As Boolean = False
    With mOperadorDatos
      .AgregarParametro("@accion", "Delete")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar()
      .LimpiarParametros()
    End With
    Return bReturn
  End Function

  Public Function RetornarDataTable() As DataTable
    Dim bReturn As Boolean = False
    Dim ds As New DataTable
    With mOperadorDatos
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With

    Return ds
  End Function

  Public Function RetornarDataSet() As DataSet
    Dim bReturn As Boolean = False
    Dim ds As New DataSet
    With mOperadorDatos
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With

    Return ds
  End Function

  Public Function RetornarInfoExcelSubtotales() As DataTable
    Dim bReturn As Boolean = False
    Dim ds As New DataTable
    With mOperadorDatos
      .AgregarParametro("@accion", "ExcelSubtotales")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Function RetornarInfoExcelTablaDinamica() As DataTable
    Dim bReturn As Boolean = False
    Dim ds As New DataTable
    With mOperadorDatos
      .AgregarParametro("@accion", "ExcelPivot")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Function RetornarInfoExcelTotalizar() As DataTable
    Dim bReturn As Boolean = False
    Dim ds As New DataTable
    With mOperadorDatos
      .AgregarParametro("@accion", "ExcelTotalizar")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Function RetornarInfoExcelGraficar() As DataTable
    Dim bReturn As Boolean = False
    Dim ds As New DataTable
    With mOperadorDatos
      .AgregarParametro("@accion", "ExcelGraficar")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Function RetornarInfoNombreHojas() As DataTable
    Dim bReturn As Boolean = False
    Dim ds As New DataTable
    With mOperadorDatos
      .AgregarParametro("@accion", "NombreHojas")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Function RetornarDocSalida() As String
    Dim bReturn As Boolean = False
    Dim ds As String = ""
    With mOperadorDatos
      .AgregarParametro("@accion", "Word")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Function RetornarEmailProgramacion() As Programacion
    Dim bReturn As Boolean = False
    Dim ds As Object = Nothing
    With mOperadorDatos
      .AgregarParametro("@accion", "EmailProgramacion")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Try
      Dim oresult As Programacion = Nothing
      oresult = Programacion.deXml(ds)
      If oresult Is Nothing Then
        oresult = New Programacion
      End If
      Return oresult
    Catch ex As Exception
      Return New Programacion
    End Try
  End Function

  Public Function RetornarEmailLista() As String
    Dim bReturn As Boolean = False
    Dim ds As New DataTable
    With mOperadorDatos
      .AgregarParametro("@accion", "EmailLista")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With

    Dim oresult As String = ""
    For Each _datarow As DataRow In ds.Rows
      If Not TypeOf (_datarow(0)) Is System.DBNull Then
        If Not String.IsNullOrEmpty(oresult) Then
          oresult = oresult & "; "
        End If
        oresult = oresult & _datarow(0)
      End If
    Next
    Return oresult
  End Function

  Function IsValidEmail(ByVal strIn As String) As Boolean
    ' Return true if strIn is in valid e-mail format.
    Return Regex.IsMatch(strIn, _
           "^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$")
  End Function

  Public Function GuardarEmailProgramacion(ByVal _programacion As Programacion) As Boolean
    Dim bReturn As Boolean = False
    With mOperadorDatos
      .AgregarParametro("@accion", "EmailProgramacionGuardar")
      .AgregarParametro("@acciondatos", _programacion.aXml)
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar()
      .LimpiarParametros()
    End With
    Return bReturn
  End Function

  Public Function GuardarEmailLista(ByVal _lista As String) As Boolean
    Dim bReturn As Boolean = False
    With mOperadorDatos
      .AgregarParametro("@accion", "EmailListaGuardar")
      .AgregarParametro("@acciondatos", _lista)
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar()
      .LimpiarParametros()
    End With
    Return bReturn
  End Function

  Public Function RetornarEmailAsunto() As String
    Dim bReturn As Boolean = False
    Dim ds As String = ""
    With mOperadorDatos
      .AgregarParametro("@accion", "EmailAsunto")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Function RetornarEmailArchivo() As String
    Dim bReturn As Boolean = False
    Dim ds As String = ""
    With mOperadorDatos
      .AgregarParametro("@accion", "EmailArchivo")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Function RetornarEmailAutomatico(ByVal _Usuario As String) As Boolean
    Dim bReturn As Boolean = False
    Dim ds As Integer = 0
    With mOperadorDatos
      .AgregarParametro("@accion", "EmailAutomatico")
      For Each _param As ParametroReporte In Me.Parametros
        If _param.NombreParametro.ToUpper = "@OCU_USUARIO" Then
          _param.Valor = _Usuario
        End If
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds = 1
  End Function

  Public Function RetornarManInsert() As String
    Dim bReturn As Boolean = False
    Dim ds As String = ""
    With mOperadorDatos
      .AgregarParametro("@accion", "Insert")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Function RetornarManUpdate() As String
    Dim bReturn As Boolean = False
    Dim ds As String = ""
    With mOperadorDatos
      .AgregarParametro("@accion", "Update")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Function RetornarManDelete() As String
    Dim bReturn As Boolean = False
    Dim ds As String = ""
    With mOperadorDatos
      .AgregarParametro("@accion", "Delete")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Function RetornarManPrint() As String
    Dim bReturn As Boolean = False
    Dim ds As String = ""
    With mOperadorDatos
      .AgregarParametro("@accion", "Print")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Function RetornarAutoRefresco() As Integer
    Dim bReturn As Boolean = False
    Dim ds As Integer = 0
    With mOperadorDatos
      .AgregarParametro("@accion", "refresh")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Function RetornarAutoejecutable() As Boolean
    Dim bReturn As Boolean = False
    Dim ds As Boolean = False
    With mOperadorDatos
      .AgregarParametro("@accion", "autoexec")
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Function RetornarSubListaDataTable(ByVal _nombre As String, ByVal _Usuario As String) As DataTable
    Dim bReturn As Boolean = False
    Dim ds As New DataTable
    With mOperadorDatos
      .AgregarParametro("@accion", _nombre)
      For Each _param As ParametroReporte In Me.Parametros
        If _param.NombreParametro.ToUpper = "@OCU_USUARIO" Then
          _param.Valor = _Usuario
        End If
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Sub RetornarRegistroxDataRow(ByVal _fila As DataRowView)
    Dim bReturn As Boolean = False
    Dim ds As New DataTable
    With mOperadorDatos
      '.AgregarParametro("@accion", _nombre)
      For Each _param As ParametroReporte In Me.Parametros
        Try
          Dim mparametro As String = _param.NombreParametro.Substring(1).ToLower
          Dim flg_limpio As Boolean = False
          While Not flg_limpio
            flg_limpio = True
            If mparametro.StartsWith("ocu_") Or mparametro.StartsWith("key_") Or mparametro.StartsWith("cbo_") Or mparametro.StartsWith("cba_") Then
              mparametro = mparametro.Substring(4)
              flg_limpio = False
            End If
            If mparametro.StartsWith("read_") Then
              mparametro = mparametro.Substring(5)
              flg_limpio = False
            End If
          End While

          .AgregarParametro(_param.NombreParametro, _fila(mparametro))
        Catch ex As Exception
        End Try
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    EsNuevo = True
    If ds Is Nothing OrElse ds.Rows.Count = 0 Then
      Return
    Else
      For Each _param As ParametroReporte In Me.Parametros
        Dim mparametro As String = _param.NombreParametro.Substring(1).ToLower
        'If mparametro.StartsWith("ocu_") Then
        '  mparametro = mparametro.Substring(4)
        'End If
        'If mparametro.StartsWith("key_") Then
        '  mparametro = mparametro.Substring(4)
        'End If
        'If mparametro.StartsWith("read_") Then
        '  mparametro = mparametro.Substring(5)
        'End If

        'Dim flg_limpio As Boolean = False
        'While Not flg_limpio
        '  flg_limpio = True
        '  If mparametro.StartsWith("ocu_") Or mparametro.StartsWith("key_") Or mparametro.StartsWith("cbo_") Or mparametro.StartsWith("cba_") Then
        '    mparametro = mparametro.Substring(4)
        '    flg_limpio = False
        '  End If
        '  If mparametro.StartsWith("read_") Then
        '    mparametro = mparametro.Substring(5)
        '    flg_limpio = False
        '  End If
        'End While
        Dim mvalor As Object = ds.Rows(0)(mparametro)
        _param.Valor = mvalor
      Next
      EsNuevo = False
      Return
    End If
  End Sub

  Public Function RetornarSubListaDataTableconParametros(ByVal _nombre As String) As DataTable
    Dim bReturn As Boolean = False
    Dim ds As New DataTable
    With mOperadorDatos
      .AgregarParametro("@accion", _nombre)
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.Valor)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Function RetornarSubListaDataTableconParametrosAux(ByVal _nombre As String) As DataTable
    Dim bReturn As Boolean = False
    Dim ds As New DataTable
    With mOperadorDatos
      .AgregarParametro("@accion", _nombre)
      For Each _param As ParametroReporte In Me.Parametros
        .AgregarParametro(_param.NombreParametro, _param.ValorAux)
      Next
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    Return ds
  End Function

  Public Function RetornarValorDefault(ByVal _nombre As String) As Object
    Dim bReturn As Boolean = False
    Dim Result As Object = Nothing
    With mOperadorDatos
      .AgregarParametro("@accion", "def_" + _nombre)
      .Procedimiento = Me.NombreProcedimiento
      bReturn = .Ejecutar(Result)
      .LimpiarParametros()
    End With
    Return Result
  End Function
End Class
#End Region

#Region "ReporteList"
Public Class ReporteList
  Inherits System.ComponentModel.BindingList(Of Reporte)

  Public Shared Function ObtenerLista(ByVal _OperadorDatos As OperadorDatos, ByVal _prefijo As String) As ReporteList
    Dim oResult As ReporteList = New ReporteList
    Dim ds As DataTable = Nothing

    Try
      If _OperadorDatos.Proveedor = enumProveedorDatos.SQL Then
        Dim _comando As New SqlClient.SqlCommand
        _comando.Connection = _OperadorDatos.Conexion
        _comando.CommandType = CommandType.Text
        _comando.CommandText = String.Format("select distinct specific_name from INFORMATION_SCHEMA.parameters where specific_name like '{0}%' order by specific_name", _prefijo)

        Dim da As New SqlDataAdapter(_comando)
        ds = New DataTable
        da.Fill(ds)

        If Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
          For Each _dr As DataRow In ds.Rows
            Dim _fila As New Reporte(_OperadorDatos)
            _fila.MapearDataRowaObjeto(_dr)
            oResult.Add(_fila)
          Next
        End If
      ElseIf _OperadorDatos.Proveedor = enumProveedorDatos.Sybase Then
        Dim _comando As OleDbCommand
        _comando = New OleDbCommand
        _comando.CommandType = CommandType.StoredProcedure
        _comando.Connection = _OperadorDatos.Conexion
        _comando.CommandTimeout = 180
        _comando.CommandText = "Proc_ObtenerSPs"

        Dim oledbparam As New OleDbParameter
        oledbparam.DbType = DbType.String
        oledbparam.OleDbType = OleDbType.VarChar
        oledbparam.Value = _prefijo
        oledbparam.ParameterName = "@prefijo"
        oledbparam.Direction = ParameterDirection.Input

        _comando.Parameters.Add(oledbparam)
        _comando.Connection = _OperadorDatos.Conexion

        Dim da As New OleDbDataAdapter(_comando)

        ds = New DataTable
        da.Fill(ds)

        If Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
          For Each _dr As DataRow In ds.Rows
            Dim _fila As New Reporte(_OperadorDatos)
            _fila.MapearDataRowaObjeto(_dr)
            oResult.Add(_fila)
          Next
        End If
      End If
    Catch ex As Exception

    End Try
    Return oResult
  End Function

  Public Sub New()
  End Sub
End Class
#End Region
